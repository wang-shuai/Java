/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class DTOQuestionIndexField implements org.apache.thrift.TBase<DTOQuestionIndexField, DTOQuestionIndexField._Fields>, java.io.Serializable, Cloneable, Comparable<DTOQuestionIndexField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DTOQuestionIndexField");

  private static final org.apache.thrift.protocol.TField QOID_FIELD_DESC = new org.apache.thrift.protocol.TField("qoid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AREAID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AREATYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("areatype", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AREANAME_FIELD_DESC = new org.apache.thrift.protocol.TField("areaname", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField REPLYCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("replycount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField VIEWCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("viewcount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("active", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CATEGORIES_FIELD_DESC = new org.apache.thrift.protocol.TField("categories", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REPLYBODY_FIELD_DESC = new org.apache.thrift.protocol.TField("replybody", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField LASTREPLYUSERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastreplyusertype", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField LASTREPLYUSERID_FIELD_DESC = new org.apache.thrift.protocol.TField("lastreplyuserid", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MASTERBRANDID_FIELD_DESC = new org.apache.thrift.protocol.TField("masterbrandid", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField BRANDID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandid", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BRANDNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("brandname", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField PVCID_FIELD_DESC = new org.apache.thrift.protocol.TField("pvcid", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField PVCNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pvcname", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CITYID_FIELD_DESC = new org.apache.thrift.protocol.TField("cityid", org.apache.thrift.protocol.TType.I32, (short)23);
  private static final org.apache.thrift.protocol.TField CITYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cityname", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField USERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("usertype", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField ISSOLVE_FIELD_DESC = new org.apache.thrift.protocol.TField("issolve", org.apache.thrift.protocol.TType.I32, (short)28);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField BRANDSPELL_FIELD_DESC = new org.apache.thrift.protocol.TField("brandspell", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField CATESPELL_FIELD_DESC = new org.apache.thrift.protocol.TField("catespell", org.apache.thrift.protocol.TType.STRING, (short)31);
  private static final org.apache.thrift.protocol.TField CATEGROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("categroup", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.STRING, (short)33);
  private static final org.apache.thrift.protocol.TField LASTMODIFYTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifytime", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField LASTREPLYTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastreplytime", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)100);
  private static final org.apache.thrift.protocol.TField FULLINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("fullinfo", org.apache.thrift.protocol.TType.STRING, (short)101);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DTOQuestionIndexFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DTOQuestionIndexFieldTupleSchemeFactory());
  }

  public int qoid; // required
  public String title; // required
  public String body; // required
  public int areaid; // required
  public String areatype; // required
  public String areaname; // required
  public int replycount; // required
  public int viewcount; // required
  public int active; // required
  public String categories; // required
  public String tags; // required
  public String replybody; // required
  public int lastreplyusertype; // required
  public int lastreplyuserid; // required
  public int masterbrandid; // required
  public int brandid; // required
  public String brandname; // required
  public int pvcid; // required
  public String pvcname; // required
  public int cityid; // required
  public String cityname; // required
  public int userid; // required
  public String username; // required
  public int usertype; // required
  public int issolve; // required
  public int status; // required
  public String brandspell; // required
  public String catespell; // required
  public String categroup; // required
  public String createtime; // required
  public String lastmodifytime; // required
  public String lastreplytime; // required
  public int id; // required
  public String fullinfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    QOID((short)1, "qoid"),
    TITLE((short)2, "title"),
    BODY((short)3, "body"),
    AREAID((short)4, "areaid"),
    AREATYPE((short)5, "areatype"),
    AREANAME((short)6, "areaname"),
    REPLYCOUNT((short)7, "replycount"),
    VIEWCOUNT((short)8, "viewcount"),
    ACTIVE((short)9, "active"),
    CATEGORIES((short)12, "categories"),
    TAGS((short)13, "tags"),
    REPLYBODY((short)14, "replybody"),
    LASTREPLYUSERTYPE((short)15, "lastreplyusertype"),
    LASTREPLYUSERID((short)16, "lastreplyuserid"),
    MASTERBRANDID((short)17, "masterbrandid"),
    BRANDID((short)19, "brandid"),
    BRANDNAME((short)20, "brandname"),
    PVCID((short)21, "pvcid"),
    PVCNAME((short)22, "pvcname"),
    CITYID((short)23, "cityid"),
    CITYNAME((short)24, "cityname"),
    USERID((short)25, "userid"),
    USERNAME((short)26, "username"),
    USERTYPE((short)27, "usertype"),
    ISSOLVE((short)28, "issolve"),
    STATUS((short)29, "status"),
    BRANDSPELL((short)30, "brandspell"),
    CATESPELL((short)31, "catespell"),
    CATEGROUP((short)32, "categroup"),
    CREATETIME((short)33, "createtime"),
    LASTMODIFYTIME((short)34, "lastmodifytime"),
    LASTREPLYTIME((short)35, "lastreplytime"),
    ID((short)100, "id"),
    FULLINFO((short)101, "fullinfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // QOID
          return QOID;
        case 2: // TITLE
          return TITLE;
        case 3: // BODY
          return BODY;
        case 4: // AREAID
          return AREAID;
        case 5: // AREATYPE
          return AREATYPE;
        case 6: // AREANAME
          return AREANAME;
        case 7: // REPLYCOUNT
          return REPLYCOUNT;
        case 8: // VIEWCOUNT
          return VIEWCOUNT;
        case 9: // ACTIVE
          return ACTIVE;
        case 12: // CATEGORIES
          return CATEGORIES;
        case 13: // TAGS
          return TAGS;
        case 14: // REPLYBODY
          return REPLYBODY;
        case 15: // LASTREPLYUSERTYPE
          return LASTREPLYUSERTYPE;
        case 16: // LASTREPLYUSERID
          return LASTREPLYUSERID;
        case 17: // MASTERBRANDID
          return MASTERBRANDID;
        case 19: // BRANDID
          return BRANDID;
        case 20: // BRANDNAME
          return BRANDNAME;
        case 21: // PVCID
          return PVCID;
        case 22: // PVCNAME
          return PVCNAME;
        case 23: // CITYID
          return CITYID;
        case 24: // CITYNAME
          return CITYNAME;
        case 25: // USERID
          return USERID;
        case 26: // USERNAME
          return USERNAME;
        case 27: // USERTYPE
          return USERTYPE;
        case 28: // ISSOLVE
          return ISSOLVE;
        case 29: // STATUS
          return STATUS;
        case 30: // BRANDSPELL
          return BRANDSPELL;
        case 31: // CATESPELL
          return CATESPELL;
        case 32: // CATEGROUP
          return CATEGROUP;
        case 33: // CREATETIME
          return CREATETIME;
        case 34: // LASTMODIFYTIME
          return LASTMODIFYTIME;
        case 35: // LASTREPLYTIME
          return LASTREPLYTIME;
        case 100: // ID
          return ID;
        case 101: // FULLINFO
          return FULLINFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QOID_ISSET_ID = 0;
  private static final int __AREAID_ISSET_ID = 1;
  private static final int __REPLYCOUNT_ISSET_ID = 2;
  private static final int __VIEWCOUNT_ISSET_ID = 3;
  private static final int __ACTIVE_ISSET_ID = 4;
  private static final int __LASTREPLYUSERTYPE_ISSET_ID = 5;
  private static final int __LASTREPLYUSERID_ISSET_ID = 6;
  private static final int __MASTERBRANDID_ISSET_ID = 7;
  private static final int __BRANDID_ISSET_ID = 8;
  private static final int __PVCID_ISSET_ID = 9;
  private static final int __CITYID_ISSET_ID = 10;
  private static final int __USERID_ISSET_ID = 11;
  private static final int __USERTYPE_ISSET_ID = 12;
  private static final int __ISSOLVE_ISSET_ID = 13;
  private static final int __STATUS_ISSET_ID = 14;
  private static final int __ID_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.QOID, new org.apache.thrift.meta_data.FieldMetaData("qoid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREAID, new org.apache.thrift.meta_data.FieldMetaData("areaid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AREATYPE, new org.apache.thrift.meta_data.FieldMetaData("areatype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AREANAME, new org.apache.thrift.meta_data.FieldMetaData("areaname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLYCOUNT, new org.apache.thrift.meta_data.FieldMetaData("replycount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIEWCOUNT, new org.apache.thrift.meta_data.FieldMetaData("viewcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("active", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CATEGORIES, new org.apache.thrift.meta_data.FieldMetaData("categories", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLYBODY, new org.apache.thrift.meta_data.FieldMetaData("replybody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTREPLYUSERTYPE, new org.apache.thrift.meta_data.FieldMetaData("lastreplyusertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTREPLYUSERID, new org.apache.thrift.meta_data.FieldMetaData("lastreplyuserid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MASTERBRANDID, new org.apache.thrift.meta_data.FieldMetaData("masterbrandid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRANDID, new org.apache.thrift.meta_data.FieldMetaData("brandid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRANDNAME, new org.apache.thrift.meta_data.FieldMetaData("brandname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PVCID, new org.apache.thrift.meta_data.FieldMetaData("pvcid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PVCNAME, new org.apache.thrift.meta_data.FieldMetaData("pvcname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITYID, new org.apache.thrift.meta_data.FieldMetaData("cityid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CITYNAME, new org.apache.thrift.meta_data.FieldMetaData("cityname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERTYPE, new org.apache.thrift.meta_data.FieldMetaData("usertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISSOLVE, new org.apache.thrift.meta_data.FieldMetaData("issolve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRANDSPELL, new org.apache.thrift.meta_data.FieldMetaData("brandspell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATESPELL, new org.apache.thrift.meta_data.FieldMetaData("catespell", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGROUP, new org.apache.thrift.meta_data.FieldMetaData("categroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTMODIFYTIME, new org.apache.thrift.meta_data.FieldMetaData("lastmodifytime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTREPLYTIME, new org.apache.thrift.meta_data.FieldMetaData("lastreplytime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FULLINFO, new org.apache.thrift.meta_data.FieldMetaData("fullinfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DTOQuestionIndexField.class, metaDataMap);
  }

  public DTOQuestionIndexField() {
  }

  public DTOQuestionIndexField(
    int qoid,
    String title,
    String body,
    int areaid,
    String areatype,
    String areaname,
    int replycount,
    int viewcount,
    int active,
    String categories,
    String tags,
    String replybody,
    int lastreplyusertype,
    int lastreplyuserid,
    int masterbrandid,
    int brandid,
    String brandname,
    int pvcid,
    String pvcname,
    int cityid,
    String cityname,
    int userid,
    String username,
    int usertype,
    int issolve,
    int status,
    String brandspell,
    String catespell,
    String categroup,
    String createtime,
    String lastmodifytime,
    String lastreplytime,
    int id,
    String fullinfo)
  {
    this();
    this.qoid = qoid;
    setQoidIsSet(true);
    this.title = title;
    this.body = body;
    this.areaid = areaid;
    setAreaidIsSet(true);
    this.areatype = areatype;
    this.areaname = areaname;
    this.replycount = replycount;
    setReplycountIsSet(true);
    this.viewcount = viewcount;
    setViewcountIsSet(true);
    this.active = active;
    setActiveIsSet(true);
    this.categories = categories;
    this.tags = tags;
    this.replybody = replybody;
    this.lastreplyusertype = lastreplyusertype;
    setLastreplyusertypeIsSet(true);
    this.lastreplyuserid = lastreplyuserid;
    setLastreplyuseridIsSet(true);
    this.masterbrandid = masterbrandid;
    setMasterbrandidIsSet(true);
    this.brandid = brandid;
    setBrandidIsSet(true);
    this.brandname = brandname;
    this.pvcid = pvcid;
    setPvcidIsSet(true);
    this.pvcname = pvcname;
    this.cityid = cityid;
    setCityidIsSet(true);
    this.cityname = cityname;
    this.userid = userid;
    setUseridIsSet(true);
    this.username = username;
    this.usertype = usertype;
    setUsertypeIsSet(true);
    this.issolve = issolve;
    setIssolveIsSet(true);
    this.status = status;
    setStatusIsSet(true);
    this.brandspell = brandspell;
    this.catespell = catespell;
    this.categroup = categroup;
    this.createtime = createtime;
    this.lastmodifytime = lastmodifytime;
    this.lastreplytime = lastreplytime;
    this.id = id;
    setIdIsSet(true);
    this.fullinfo = fullinfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DTOQuestionIndexField(DTOQuestionIndexField other) {
    __isset_bitfield = other.__isset_bitfield;
    this.qoid = other.qoid;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }
    this.areaid = other.areaid;
    if (other.isSetAreatype()) {
      this.areatype = other.areatype;
    }
    if (other.isSetAreaname()) {
      this.areaname = other.areaname;
    }
    this.replycount = other.replycount;
    this.viewcount = other.viewcount;
    this.active = other.active;
    if (other.isSetCategories()) {
      this.categories = other.categories;
    }
    if (other.isSetTags()) {
      this.tags = other.tags;
    }
    if (other.isSetReplybody()) {
      this.replybody = other.replybody;
    }
    this.lastreplyusertype = other.lastreplyusertype;
    this.lastreplyuserid = other.lastreplyuserid;
    this.masterbrandid = other.masterbrandid;
    this.brandid = other.brandid;
    if (other.isSetBrandname()) {
      this.brandname = other.brandname;
    }
    this.pvcid = other.pvcid;
    if (other.isSetPvcname()) {
      this.pvcname = other.pvcname;
    }
    this.cityid = other.cityid;
    if (other.isSetCityname()) {
      this.cityname = other.cityname;
    }
    this.userid = other.userid;
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    this.usertype = other.usertype;
    this.issolve = other.issolve;
    this.status = other.status;
    if (other.isSetBrandspell()) {
      this.brandspell = other.brandspell;
    }
    if (other.isSetCatespell()) {
      this.catespell = other.catespell;
    }
    if (other.isSetCategroup()) {
      this.categroup = other.categroup;
    }
    if (other.isSetCreatetime()) {
      this.createtime = other.createtime;
    }
    if (other.isSetLastmodifytime()) {
      this.lastmodifytime = other.lastmodifytime;
    }
    if (other.isSetLastreplytime()) {
      this.lastreplytime = other.lastreplytime;
    }
    this.id = other.id;
    if (other.isSetFullinfo()) {
      this.fullinfo = other.fullinfo;
    }
  }

  public DTOQuestionIndexField deepCopy() {
    return new DTOQuestionIndexField(this);
  }

  @Override
  public void clear() {
    setQoidIsSet(false);
    this.qoid = 0;
    this.title = null;
    this.body = null;
    setAreaidIsSet(false);
    this.areaid = 0;
    this.areatype = null;
    this.areaname = null;
    setReplycountIsSet(false);
    this.replycount = 0;
    setViewcountIsSet(false);
    this.viewcount = 0;
    setActiveIsSet(false);
    this.active = 0;
    this.categories = null;
    this.tags = null;
    this.replybody = null;
    setLastreplyusertypeIsSet(false);
    this.lastreplyusertype = 0;
    setLastreplyuseridIsSet(false);
    this.lastreplyuserid = 0;
    setMasterbrandidIsSet(false);
    this.masterbrandid = 0;
    setBrandidIsSet(false);
    this.brandid = 0;
    this.brandname = null;
    setPvcidIsSet(false);
    this.pvcid = 0;
    this.pvcname = null;
    setCityidIsSet(false);
    this.cityid = 0;
    this.cityname = null;
    setUseridIsSet(false);
    this.userid = 0;
    this.username = null;
    setUsertypeIsSet(false);
    this.usertype = 0;
    setIssolveIsSet(false);
    this.issolve = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.brandspell = null;
    this.catespell = null;
    this.categroup = null;
    this.createtime = null;
    this.lastmodifytime = null;
    this.lastreplytime = null;
    setIdIsSet(false);
    this.id = 0;
    this.fullinfo = null;
  }

  public int getQoid() {
    return this.qoid;
  }

  public DTOQuestionIndexField setQoid(int qoid) {
    this.qoid = qoid;
    setQoidIsSet(true);
    return this;
  }

  public void unsetQoid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QOID_ISSET_ID);
  }

  /** Returns true if field qoid is set (has been assigned a value) and false otherwise */
  public boolean isSetQoid() {
    return EncodingUtils.testBit(__isset_bitfield, __QOID_ISSET_ID);
  }

  public void setQoidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QOID_ISSET_ID, value);
  }

  public String getTitle() {
    return this.title;
  }

  public DTOQuestionIndexField setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getBody() {
    return this.body;
  }

  public DTOQuestionIndexField setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public int getAreaid() {
    return this.areaid;
  }

  public DTOQuestionIndexField setAreaid(int areaid) {
    this.areaid = areaid;
    setAreaidIsSet(true);
    return this;
  }

  public void unsetAreaid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  /** Returns true if field areaid is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaid() {
    return EncodingUtils.testBit(__isset_bitfield, __AREAID_ISSET_ID);
  }

  public void setAreaidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AREAID_ISSET_ID, value);
  }

  public String getAreatype() {
    return this.areatype;
  }

  public DTOQuestionIndexField setAreatype(String areatype) {
    this.areatype = areatype;
    return this;
  }

  public void unsetAreatype() {
    this.areatype = null;
  }

  /** Returns true if field areatype is set (has been assigned a value) and false otherwise */
  public boolean isSetAreatype() {
    return this.areatype != null;
  }

  public void setAreatypeIsSet(boolean value) {
    if (!value) {
      this.areatype = null;
    }
  }

  public String getAreaname() {
    return this.areaname;
  }

  public DTOQuestionIndexField setAreaname(String areaname) {
    this.areaname = areaname;
    return this;
  }

  public void unsetAreaname() {
    this.areaname = null;
  }

  /** Returns true if field areaname is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaname() {
    return this.areaname != null;
  }

  public void setAreanameIsSet(boolean value) {
    if (!value) {
      this.areaname = null;
    }
  }

  public int getReplycount() {
    return this.replycount;
  }

  public DTOQuestionIndexField setReplycount(int replycount) {
    this.replycount = replycount;
    setReplycountIsSet(true);
    return this;
  }

  public void unsetReplycount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLYCOUNT_ISSET_ID);
  }

  /** Returns true if field replycount is set (has been assigned a value) and false otherwise */
  public boolean isSetReplycount() {
    return EncodingUtils.testBit(__isset_bitfield, __REPLYCOUNT_ISSET_ID);
  }

  public void setReplycountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLYCOUNT_ISSET_ID, value);
  }

  public int getViewcount() {
    return this.viewcount;
  }

  public DTOQuestionIndexField setViewcount(int viewcount) {
    this.viewcount = viewcount;
    setViewcountIsSet(true);
    return this;
  }

  public void unsetViewcount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID);
  }

  /** Returns true if field viewcount is set (has been assigned a value) and false otherwise */
  public boolean isSetViewcount() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID);
  }

  public void setViewcountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWCOUNT_ISSET_ID, value);
  }

  public int getActive() {
    return this.active;
  }

  public DTOQuestionIndexField setActive(int active) {
    this.active = active;
    setActiveIsSet(true);
    return this;
  }

  public void unsetActive() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  /** Returns true if field active is set (has been assigned a value) and false otherwise */
  public boolean isSetActive() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVE_ISSET_ID);
  }

  public void setActiveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVE_ISSET_ID, value);
  }

  public String getCategories() {
    return this.categories;
  }

  public DTOQuestionIndexField setCategories(String categories) {
    this.categories = categories;
    return this;
  }

  public void unsetCategories() {
    this.categories = null;
  }

  /** Returns true if field categories is set (has been assigned a value) and false otherwise */
  public boolean isSetCategories() {
    return this.categories != null;
  }

  public void setCategoriesIsSet(boolean value) {
    if (!value) {
      this.categories = null;
    }
  }

  public String getTags() {
    return this.tags;
  }

  public DTOQuestionIndexField setTags(String tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public String getReplybody() {
    return this.replybody;
  }

  public DTOQuestionIndexField setReplybody(String replybody) {
    this.replybody = replybody;
    return this;
  }

  public void unsetReplybody() {
    this.replybody = null;
  }

  /** Returns true if field replybody is set (has been assigned a value) and false otherwise */
  public boolean isSetReplybody() {
    return this.replybody != null;
  }

  public void setReplybodyIsSet(boolean value) {
    if (!value) {
      this.replybody = null;
    }
  }

  public int getLastreplyusertype() {
    return this.lastreplyusertype;
  }

  public DTOQuestionIndexField setLastreplyusertype(int lastreplyusertype) {
    this.lastreplyusertype = lastreplyusertype;
    setLastreplyusertypeIsSet(true);
    return this;
  }

  public void unsetLastreplyusertype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTREPLYUSERTYPE_ISSET_ID);
  }

  /** Returns true if field lastreplyusertype is set (has been assigned a value) and false otherwise */
  public boolean isSetLastreplyusertype() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTREPLYUSERTYPE_ISSET_ID);
  }

  public void setLastreplyusertypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTREPLYUSERTYPE_ISSET_ID, value);
  }

  public int getLastreplyuserid() {
    return this.lastreplyuserid;
  }

  public DTOQuestionIndexField setLastreplyuserid(int lastreplyuserid) {
    this.lastreplyuserid = lastreplyuserid;
    setLastreplyuseridIsSet(true);
    return this;
  }

  public void unsetLastreplyuserid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTREPLYUSERID_ISSET_ID);
  }

  /** Returns true if field lastreplyuserid is set (has been assigned a value) and false otherwise */
  public boolean isSetLastreplyuserid() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTREPLYUSERID_ISSET_ID);
  }

  public void setLastreplyuseridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTREPLYUSERID_ISSET_ID, value);
  }

  public int getMasterbrandid() {
    return this.masterbrandid;
  }

  public DTOQuestionIndexField setMasterbrandid(int masterbrandid) {
    this.masterbrandid = masterbrandid;
    setMasterbrandidIsSet(true);
    return this;
  }

  public void unsetMasterbrandid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MASTERBRANDID_ISSET_ID);
  }

  /** Returns true if field masterbrandid is set (has been assigned a value) and false otherwise */
  public boolean isSetMasterbrandid() {
    return EncodingUtils.testBit(__isset_bitfield, __MASTERBRANDID_ISSET_ID);
  }

  public void setMasterbrandidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MASTERBRANDID_ISSET_ID, value);
  }

  public int getBrandid() {
    return this.brandid;
  }

  public DTOQuestionIndexField setBrandid(int brandid) {
    this.brandid = brandid;
    setBrandidIsSet(true);
    return this;
  }

  public void unsetBrandid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BRANDID_ISSET_ID);
  }

  /** Returns true if field brandid is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandid() {
    return EncodingUtils.testBit(__isset_bitfield, __BRANDID_ISSET_ID);
  }

  public void setBrandidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BRANDID_ISSET_ID, value);
  }

  public String getBrandname() {
    return this.brandname;
  }

  public DTOQuestionIndexField setBrandname(String brandname) {
    this.brandname = brandname;
    return this;
  }

  public void unsetBrandname() {
    this.brandname = null;
  }

  /** Returns true if field brandname is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandname() {
    return this.brandname != null;
  }

  public void setBrandnameIsSet(boolean value) {
    if (!value) {
      this.brandname = null;
    }
  }

  public int getPvcid() {
    return this.pvcid;
  }

  public DTOQuestionIndexField setPvcid(int pvcid) {
    this.pvcid = pvcid;
    setPvcidIsSet(true);
    return this;
  }

  public void unsetPvcid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PVCID_ISSET_ID);
  }

  /** Returns true if field pvcid is set (has been assigned a value) and false otherwise */
  public boolean isSetPvcid() {
    return EncodingUtils.testBit(__isset_bitfield, __PVCID_ISSET_ID);
  }

  public void setPvcidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PVCID_ISSET_ID, value);
  }

  public String getPvcname() {
    return this.pvcname;
  }

  public DTOQuestionIndexField setPvcname(String pvcname) {
    this.pvcname = pvcname;
    return this;
  }

  public void unsetPvcname() {
    this.pvcname = null;
  }

  /** Returns true if field pvcname is set (has been assigned a value) and false otherwise */
  public boolean isSetPvcname() {
    return this.pvcname != null;
  }

  public void setPvcnameIsSet(boolean value) {
    if (!value) {
      this.pvcname = null;
    }
  }

  public int getCityid() {
    return this.cityid;
  }

  public DTOQuestionIndexField setCityid(int cityid) {
    this.cityid = cityid;
    setCityidIsSet(true);
    return this;
  }

  public void unsetCityid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  /** Returns true if field cityid is set (has been assigned a value) and false otherwise */
  public boolean isSetCityid() {
    return EncodingUtils.testBit(__isset_bitfield, __CITYID_ISSET_ID);
  }

  public void setCityidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CITYID_ISSET_ID, value);
  }

  public String getCityname() {
    return this.cityname;
  }

  public DTOQuestionIndexField setCityname(String cityname) {
    this.cityname = cityname;
    return this;
  }

  public void unsetCityname() {
    this.cityname = null;
  }

  /** Returns true if field cityname is set (has been assigned a value) and false otherwise */
  public boolean isSetCityname() {
    return this.cityname != null;
  }

  public void setCitynameIsSet(boolean value) {
    if (!value) {
      this.cityname = null;
    }
  }

  public int getUserid() {
    return this.userid;
  }

  public DTOQuestionIndexField setUserid(int userid) {
    this.userid = userid;
    setUseridIsSet(true);
    return this;
  }

  public void unsetUserid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUseridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getUsername() {
    return this.username;
  }

  public DTOQuestionIndexField setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public int getUsertype() {
    return this.usertype;
  }

  public DTOQuestionIndexField setUsertype(int usertype) {
    this.usertype = usertype;
    setUsertypeIsSet(true);
    return this;
  }

  public void unsetUsertype() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  /** Returns true if field usertype is set (has been assigned a value) and false otherwise */
  public boolean isSetUsertype() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  public void setUsertypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
  }

  public int getIssolve() {
    return this.issolve;
  }

  public DTOQuestionIndexField setIssolve(int issolve) {
    this.issolve = issolve;
    setIssolveIsSet(true);
    return this;
  }

  public void unsetIssolve() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSOLVE_ISSET_ID);
  }

  /** Returns true if field issolve is set (has been assigned a value) and false otherwise */
  public boolean isSetIssolve() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSOLVE_ISSET_ID);
  }

  public void setIssolveIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSOLVE_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public DTOQuestionIndexField setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public String getBrandspell() {
    return this.brandspell;
  }

  public DTOQuestionIndexField setBrandspell(String brandspell) {
    this.brandspell = brandspell;
    return this;
  }

  public void unsetBrandspell() {
    this.brandspell = null;
  }

  /** Returns true if field brandspell is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandspell() {
    return this.brandspell != null;
  }

  public void setBrandspellIsSet(boolean value) {
    if (!value) {
      this.brandspell = null;
    }
  }

  public String getCatespell() {
    return this.catespell;
  }

  public DTOQuestionIndexField setCatespell(String catespell) {
    this.catespell = catespell;
    return this;
  }

  public void unsetCatespell() {
    this.catespell = null;
  }

  /** Returns true if field catespell is set (has been assigned a value) and false otherwise */
  public boolean isSetCatespell() {
    return this.catespell != null;
  }

  public void setCatespellIsSet(boolean value) {
    if (!value) {
      this.catespell = null;
    }
  }

  public String getCategroup() {
    return this.categroup;
  }

  public DTOQuestionIndexField setCategroup(String categroup) {
    this.categroup = categroup;
    return this;
  }

  public void unsetCategroup() {
    this.categroup = null;
  }

  /** Returns true if field categroup is set (has been assigned a value) and false otherwise */
  public boolean isSetCategroup() {
    return this.categroup != null;
  }

  public void setCategroupIsSet(boolean value) {
    if (!value) {
      this.categroup = null;
    }
  }

  public String getCreatetime() {
    return this.createtime;
  }

  public DTOQuestionIndexField setCreatetime(String createtime) {
    this.createtime = createtime;
    return this;
  }

  public void unsetCreatetime() {
    this.createtime = null;
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return this.createtime != null;
  }

  public void setCreatetimeIsSet(boolean value) {
    if (!value) {
      this.createtime = null;
    }
  }

  public String getLastmodifytime() {
    return this.lastmodifytime;
  }

  public DTOQuestionIndexField setLastmodifytime(String lastmodifytime) {
    this.lastmodifytime = lastmodifytime;
    return this;
  }

  public void unsetLastmodifytime() {
    this.lastmodifytime = null;
  }

  /** Returns true if field lastmodifytime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifytime() {
    return this.lastmodifytime != null;
  }

  public void setLastmodifytimeIsSet(boolean value) {
    if (!value) {
      this.lastmodifytime = null;
    }
  }

  public String getLastreplytime() {
    return this.lastreplytime;
  }

  public DTOQuestionIndexField setLastreplytime(String lastreplytime) {
    this.lastreplytime = lastreplytime;
    return this;
  }

  public void unsetLastreplytime() {
    this.lastreplytime = null;
  }

  /** Returns true if field lastreplytime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastreplytime() {
    return this.lastreplytime != null;
  }

  public void setLastreplytimeIsSet(boolean value) {
    if (!value) {
      this.lastreplytime = null;
    }
  }

  public int getId() {
    return this.id;
  }

  public DTOQuestionIndexField setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getFullinfo() {
    return this.fullinfo;
  }

  public DTOQuestionIndexField setFullinfo(String fullinfo) {
    this.fullinfo = fullinfo;
    return this;
  }

  public void unsetFullinfo() {
    this.fullinfo = null;
  }

  /** Returns true if field fullinfo is set (has been assigned a value) and false otherwise */
  public boolean isSetFullinfo() {
    return this.fullinfo != null;
  }

  public void setFullinfoIsSet(boolean value) {
    if (!value) {
      this.fullinfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case QOID:
      if (value == null) {
        unsetQoid();
      } else {
        setQoid((Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case AREAID:
      if (value == null) {
        unsetAreaid();
      } else {
        setAreaid((Integer)value);
      }
      break;

    case AREATYPE:
      if (value == null) {
        unsetAreatype();
      } else {
        setAreatype((String)value);
      }
      break;

    case AREANAME:
      if (value == null) {
        unsetAreaname();
      } else {
        setAreaname((String)value);
      }
      break;

    case REPLYCOUNT:
      if (value == null) {
        unsetReplycount();
      } else {
        setReplycount((Integer)value);
      }
      break;

    case VIEWCOUNT:
      if (value == null) {
        unsetViewcount();
      } else {
        setViewcount((Integer)value);
      }
      break;

    case ACTIVE:
      if (value == null) {
        unsetActive();
      } else {
        setActive((Integer)value);
      }
      break;

    case CATEGORIES:
      if (value == null) {
        unsetCategories();
      } else {
        setCategories((String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((String)value);
      }
      break;

    case REPLYBODY:
      if (value == null) {
        unsetReplybody();
      } else {
        setReplybody((String)value);
      }
      break;

    case LASTREPLYUSERTYPE:
      if (value == null) {
        unsetLastreplyusertype();
      } else {
        setLastreplyusertype((Integer)value);
      }
      break;

    case LASTREPLYUSERID:
      if (value == null) {
        unsetLastreplyuserid();
      } else {
        setLastreplyuserid((Integer)value);
      }
      break;

    case MASTERBRANDID:
      if (value == null) {
        unsetMasterbrandid();
      } else {
        setMasterbrandid((Integer)value);
      }
      break;

    case BRANDID:
      if (value == null) {
        unsetBrandid();
      } else {
        setBrandid((Integer)value);
      }
      break;

    case BRANDNAME:
      if (value == null) {
        unsetBrandname();
      } else {
        setBrandname((String)value);
      }
      break;

    case PVCID:
      if (value == null) {
        unsetPvcid();
      } else {
        setPvcid((Integer)value);
      }
      break;

    case PVCNAME:
      if (value == null) {
        unsetPvcname();
      } else {
        setPvcname((String)value);
      }
      break;

    case CITYID:
      if (value == null) {
        unsetCityid();
      } else {
        setCityid((Integer)value);
      }
      break;

    case CITYNAME:
      if (value == null) {
        unsetCityname();
      } else {
        setCityname((String)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((Integer)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case USERTYPE:
      if (value == null) {
        unsetUsertype();
      } else {
        setUsertype((Integer)value);
      }
      break;

    case ISSOLVE:
      if (value == null) {
        unsetIssolve();
      } else {
        setIssolve((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case BRANDSPELL:
      if (value == null) {
        unsetBrandspell();
      } else {
        setBrandspell((String)value);
      }
      break;

    case CATESPELL:
      if (value == null) {
        unsetCatespell();
      } else {
        setCatespell((String)value);
      }
      break;

    case CATEGROUP:
      if (value == null) {
        unsetCategroup();
      } else {
        setCategroup((String)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((String)value);
      }
      break;

    case LASTMODIFYTIME:
      if (value == null) {
        unsetLastmodifytime();
      } else {
        setLastmodifytime((String)value);
      }
      break;

    case LASTREPLYTIME:
      if (value == null) {
        unsetLastreplytime();
      } else {
        setLastreplytime((String)value);
      }
      break;

    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FULLINFO:
      if (value == null) {
        unsetFullinfo();
      } else {
        setFullinfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case QOID:
      return getQoid();

    case TITLE:
      return getTitle();

    case BODY:
      return getBody();

    case AREAID:
      return getAreaid();

    case AREATYPE:
      return getAreatype();

    case AREANAME:
      return getAreaname();

    case REPLYCOUNT:
      return getReplycount();

    case VIEWCOUNT:
      return getViewcount();

    case ACTIVE:
      return getActive();

    case CATEGORIES:
      return getCategories();

    case TAGS:
      return getTags();

    case REPLYBODY:
      return getReplybody();

    case LASTREPLYUSERTYPE:
      return getLastreplyusertype();

    case LASTREPLYUSERID:
      return getLastreplyuserid();

    case MASTERBRANDID:
      return getMasterbrandid();

    case BRANDID:
      return getBrandid();

    case BRANDNAME:
      return getBrandname();

    case PVCID:
      return getPvcid();

    case PVCNAME:
      return getPvcname();

    case CITYID:
      return getCityid();

    case CITYNAME:
      return getCityname();

    case USERID:
      return getUserid();

    case USERNAME:
      return getUsername();

    case USERTYPE:
      return getUsertype();

    case ISSOLVE:
      return getIssolve();

    case STATUS:
      return getStatus();

    case BRANDSPELL:
      return getBrandspell();

    case CATESPELL:
      return getCatespell();

    case CATEGROUP:
      return getCategroup();

    case CREATETIME:
      return getCreatetime();

    case LASTMODIFYTIME:
      return getLastmodifytime();

    case LASTREPLYTIME:
      return getLastreplytime();

    case ID:
      return getId();

    case FULLINFO:
      return getFullinfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case QOID:
      return isSetQoid();
    case TITLE:
      return isSetTitle();
    case BODY:
      return isSetBody();
    case AREAID:
      return isSetAreaid();
    case AREATYPE:
      return isSetAreatype();
    case AREANAME:
      return isSetAreaname();
    case REPLYCOUNT:
      return isSetReplycount();
    case VIEWCOUNT:
      return isSetViewcount();
    case ACTIVE:
      return isSetActive();
    case CATEGORIES:
      return isSetCategories();
    case TAGS:
      return isSetTags();
    case REPLYBODY:
      return isSetReplybody();
    case LASTREPLYUSERTYPE:
      return isSetLastreplyusertype();
    case LASTREPLYUSERID:
      return isSetLastreplyuserid();
    case MASTERBRANDID:
      return isSetMasterbrandid();
    case BRANDID:
      return isSetBrandid();
    case BRANDNAME:
      return isSetBrandname();
    case PVCID:
      return isSetPvcid();
    case PVCNAME:
      return isSetPvcname();
    case CITYID:
      return isSetCityid();
    case CITYNAME:
      return isSetCityname();
    case USERID:
      return isSetUserid();
    case USERNAME:
      return isSetUsername();
    case USERTYPE:
      return isSetUsertype();
    case ISSOLVE:
      return isSetIssolve();
    case STATUS:
      return isSetStatus();
    case BRANDSPELL:
      return isSetBrandspell();
    case CATESPELL:
      return isSetCatespell();
    case CATEGROUP:
      return isSetCategroup();
    case CREATETIME:
      return isSetCreatetime();
    case LASTMODIFYTIME:
      return isSetLastmodifytime();
    case LASTREPLYTIME:
      return isSetLastreplytime();
    case ID:
      return isSetId();
    case FULLINFO:
      return isSetFullinfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DTOQuestionIndexField)
      return this.equals((DTOQuestionIndexField)that);
    return false;
  }

  public boolean equals(DTOQuestionIndexField that) {
    if (that == null)
      return false;

    boolean this_present_qoid = true;
    boolean that_present_qoid = true;
    if (this_present_qoid || that_present_qoid) {
      if (!(this_present_qoid && that_present_qoid))
        return false;
      if (this.qoid != that.qoid)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    boolean this_present_areaid = true;
    boolean that_present_areaid = true;
    if (this_present_areaid || that_present_areaid) {
      if (!(this_present_areaid && that_present_areaid))
        return false;
      if (this.areaid != that.areaid)
        return false;
    }

    boolean this_present_areatype = true && this.isSetAreatype();
    boolean that_present_areatype = true && that.isSetAreatype();
    if (this_present_areatype || that_present_areatype) {
      if (!(this_present_areatype && that_present_areatype))
        return false;
      if (!this.areatype.equals(that.areatype))
        return false;
    }

    boolean this_present_areaname = true && this.isSetAreaname();
    boolean that_present_areaname = true && that.isSetAreaname();
    if (this_present_areaname || that_present_areaname) {
      if (!(this_present_areaname && that_present_areaname))
        return false;
      if (!this.areaname.equals(that.areaname))
        return false;
    }

    boolean this_present_replycount = true;
    boolean that_present_replycount = true;
    if (this_present_replycount || that_present_replycount) {
      if (!(this_present_replycount && that_present_replycount))
        return false;
      if (this.replycount != that.replycount)
        return false;
    }

    boolean this_present_viewcount = true;
    boolean that_present_viewcount = true;
    if (this_present_viewcount || that_present_viewcount) {
      if (!(this_present_viewcount && that_present_viewcount))
        return false;
      if (this.viewcount != that.viewcount)
        return false;
    }

    boolean this_present_active = true;
    boolean that_present_active = true;
    if (this_present_active || that_present_active) {
      if (!(this_present_active && that_present_active))
        return false;
      if (this.active != that.active)
        return false;
    }

    boolean this_present_categories = true && this.isSetCategories();
    boolean that_present_categories = true && that.isSetCategories();
    if (this_present_categories || that_present_categories) {
      if (!(this_present_categories && that_present_categories))
        return false;
      if (!this.categories.equals(that.categories))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_replybody = true && this.isSetReplybody();
    boolean that_present_replybody = true && that.isSetReplybody();
    if (this_present_replybody || that_present_replybody) {
      if (!(this_present_replybody && that_present_replybody))
        return false;
      if (!this.replybody.equals(that.replybody))
        return false;
    }

    boolean this_present_lastreplyusertype = true;
    boolean that_present_lastreplyusertype = true;
    if (this_present_lastreplyusertype || that_present_lastreplyusertype) {
      if (!(this_present_lastreplyusertype && that_present_lastreplyusertype))
        return false;
      if (this.lastreplyusertype != that.lastreplyusertype)
        return false;
    }

    boolean this_present_lastreplyuserid = true;
    boolean that_present_lastreplyuserid = true;
    if (this_present_lastreplyuserid || that_present_lastreplyuserid) {
      if (!(this_present_lastreplyuserid && that_present_lastreplyuserid))
        return false;
      if (this.lastreplyuserid != that.lastreplyuserid)
        return false;
    }

    boolean this_present_masterbrandid = true;
    boolean that_present_masterbrandid = true;
    if (this_present_masterbrandid || that_present_masterbrandid) {
      if (!(this_present_masterbrandid && that_present_masterbrandid))
        return false;
      if (this.masterbrandid != that.masterbrandid)
        return false;
    }

    boolean this_present_brandid = true;
    boolean that_present_brandid = true;
    if (this_present_brandid || that_present_brandid) {
      if (!(this_present_brandid && that_present_brandid))
        return false;
      if (this.brandid != that.brandid)
        return false;
    }

    boolean this_present_brandname = true && this.isSetBrandname();
    boolean that_present_brandname = true && that.isSetBrandname();
    if (this_present_brandname || that_present_brandname) {
      if (!(this_present_brandname && that_present_brandname))
        return false;
      if (!this.brandname.equals(that.brandname))
        return false;
    }

    boolean this_present_pvcid = true;
    boolean that_present_pvcid = true;
    if (this_present_pvcid || that_present_pvcid) {
      if (!(this_present_pvcid && that_present_pvcid))
        return false;
      if (this.pvcid != that.pvcid)
        return false;
    }

    boolean this_present_pvcname = true && this.isSetPvcname();
    boolean that_present_pvcname = true && that.isSetPvcname();
    if (this_present_pvcname || that_present_pvcname) {
      if (!(this_present_pvcname && that_present_pvcname))
        return false;
      if (!this.pvcname.equals(that.pvcname))
        return false;
    }

    boolean this_present_cityid = true;
    boolean that_present_cityid = true;
    if (this_present_cityid || that_present_cityid) {
      if (!(this_present_cityid && that_present_cityid))
        return false;
      if (this.cityid != that.cityid)
        return false;
    }

    boolean this_present_cityname = true && this.isSetCityname();
    boolean that_present_cityname = true && that.isSetCityname();
    if (this_present_cityname || that_present_cityname) {
      if (!(this_present_cityname && that_present_cityname))
        return false;
      if (!this.cityname.equals(that.cityname))
        return false;
    }

    boolean this_present_userid = true;
    boolean that_present_userid = true;
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (this.userid != that.userid)
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_usertype = true;
    boolean that_present_usertype = true;
    if (this_present_usertype || that_present_usertype) {
      if (!(this_present_usertype && that_present_usertype))
        return false;
      if (this.usertype != that.usertype)
        return false;
    }

    boolean this_present_issolve = true;
    boolean that_present_issolve = true;
    if (this_present_issolve || that_present_issolve) {
      if (!(this_present_issolve && that_present_issolve))
        return false;
      if (this.issolve != that.issolve)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_brandspell = true && this.isSetBrandspell();
    boolean that_present_brandspell = true && that.isSetBrandspell();
    if (this_present_brandspell || that_present_brandspell) {
      if (!(this_present_brandspell && that_present_brandspell))
        return false;
      if (!this.brandspell.equals(that.brandspell))
        return false;
    }

    boolean this_present_catespell = true && this.isSetCatespell();
    boolean that_present_catespell = true && that.isSetCatespell();
    if (this_present_catespell || that_present_catespell) {
      if (!(this_present_catespell && that_present_catespell))
        return false;
      if (!this.catespell.equals(that.catespell))
        return false;
    }

    boolean this_present_categroup = true && this.isSetCategroup();
    boolean that_present_categroup = true && that.isSetCategroup();
    if (this_present_categroup || that_present_categroup) {
      if (!(this_present_categroup && that_present_categroup))
        return false;
      if (!this.categroup.equals(that.categroup))
        return false;
    }

    boolean this_present_createtime = true && this.isSetCreatetime();
    boolean that_present_createtime = true && that.isSetCreatetime();
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (!this.createtime.equals(that.createtime))
        return false;
    }

    boolean this_present_lastmodifytime = true && this.isSetLastmodifytime();
    boolean that_present_lastmodifytime = true && that.isSetLastmodifytime();
    if (this_present_lastmodifytime || that_present_lastmodifytime) {
      if (!(this_present_lastmodifytime && that_present_lastmodifytime))
        return false;
      if (!this.lastmodifytime.equals(that.lastmodifytime))
        return false;
    }

    boolean this_present_lastreplytime = true && this.isSetLastreplytime();
    boolean that_present_lastreplytime = true && that.isSetLastreplytime();
    if (this_present_lastreplytime || that_present_lastreplytime) {
      if (!(this_present_lastreplytime && that_present_lastreplytime))
        return false;
      if (!this.lastreplytime.equals(that.lastreplytime))
        return false;
    }

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_fullinfo = true && this.isSetFullinfo();
    boolean that_present_fullinfo = true && that.isSetFullinfo();
    if (this_present_fullinfo || that_present_fullinfo) {
      if (!(this_present_fullinfo && that_present_fullinfo))
        return false;
      if (!this.fullinfo.equals(that.fullinfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_qoid = true;
    list.add(present_qoid);
    if (present_qoid)
      list.add(qoid);

    boolean present_title = true && (isSetTitle());
    list.add(present_title);
    if (present_title)
      list.add(title);

    boolean present_body = true && (isSetBody());
    list.add(present_body);
    if (present_body)
      list.add(body);

    boolean present_areaid = true;
    list.add(present_areaid);
    if (present_areaid)
      list.add(areaid);

    boolean present_areatype = true && (isSetAreatype());
    list.add(present_areatype);
    if (present_areatype)
      list.add(areatype);

    boolean present_areaname = true && (isSetAreaname());
    list.add(present_areaname);
    if (present_areaname)
      list.add(areaname);

    boolean present_replycount = true;
    list.add(present_replycount);
    if (present_replycount)
      list.add(replycount);

    boolean present_viewcount = true;
    list.add(present_viewcount);
    if (present_viewcount)
      list.add(viewcount);

    boolean present_active = true;
    list.add(present_active);
    if (present_active)
      list.add(active);

    boolean present_categories = true && (isSetCategories());
    list.add(present_categories);
    if (present_categories)
      list.add(categories);

    boolean present_tags = true && (isSetTags());
    list.add(present_tags);
    if (present_tags)
      list.add(tags);

    boolean present_replybody = true && (isSetReplybody());
    list.add(present_replybody);
    if (present_replybody)
      list.add(replybody);

    boolean present_lastreplyusertype = true;
    list.add(present_lastreplyusertype);
    if (present_lastreplyusertype)
      list.add(lastreplyusertype);

    boolean present_lastreplyuserid = true;
    list.add(present_lastreplyuserid);
    if (present_lastreplyuserid)
      list.add(lastreplyuserid);

    boolean present_masterbrandid = true;
    list.add(present_masterbrandid);
    if (present_masterbrandid)
      list.add(masterbrandid);

    boolean present_brandid = true;
    list.add(present_brandid);
    if (present_brandid)
      list.add(brandid);

    boolean present_brandname = true && (isSetBrandname());
    list.add(present_brandname);
    if (present_brandname)
      list.add(brandname);

    boolean present_pvcid = true;
    list.add(present_pvcid);
    if (present_pvcid)
      list.add(pvcid);

    boolean present_pvcname = true && (isSetPvcname());
    list.add(present_pvcname);
    if (present_pvcname)
      list.add(pvcname);

    boolean present_cityid = true;
    list.add(present_cityid);
    if (present_cityid)
      list.add(cityid);

    boolean present_cityname = true && (isSetCityname());
    list.add(present_cityname);
    if (present_cityname)
      list.add(cityname);

    boolean present_userid = true;
    list.add(present_userid);
    if (present_userid)
      list.add(userid);

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_usertype = true;
    list.add(present_usertype);
    if (present_usertype)
      list.add(usertype);

    boolean present_issolve = true;
    list.add(present_issolve);
    if (present_issolve)
      list.add(issolve);

    boolean present_status = true;
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_brandspell = true && (isSetBrandspell());
    list.add(present_brandspell);
    if (present_brandspell)
      list.add(brandspell);

    boolean present_catespell = true && (isSetCatespell());
    list.add(present_catespell);
    if (present_catespell)
      list.add(catespell);

    boolean present_categroup = true && (isSetCategroup());
    list.add(present_categroup);
    if (present_categroup)
      list.add(categroup);

    boolean present_createtime = true && (isSetCreatetime());
    list.add(present_createtime);
    if (present_createtime)
      list.add(createtime);

    boolean present_lastmodifytime = true && (isSetLastmodifytime());
    list.add(present_lastmodifytime);
    if (present_lastmodifytime)
      list.add(lastmodifytime);

    boolean present_lastreplytime = true && (isSetLastreplytime());
    list.add(present_lastreplytime);
    if (present_lastreplytime)
      list.add(lastreplytime);

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_fullinfo = true && (isSetFullinfo());
    list.add(present_fullinfo);
    if (present_fullinfo)
      list.add(fullinfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(DTOQuestionIndexField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetQoid()).compareTo(other.isSetQoid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQoid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qoid, other.qoid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaid()).compareTo(other.isSetAreaid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaid, other.areaid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreatype()).compareTo(other.isSetAreatype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreatype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areatype, other.areatype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaname()).compareTo(other.isSetAreaname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaname, other.areaname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplycount()).compareTo(other.isSetReplycount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplycount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replycount, other.replycount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewcount()).compareTo(other.isSetViewcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewcount, other.viewcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActive()).compareTo(other.isSetActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.active, other.active);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategories()).compareTo(other.isSetCategories());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategories()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categories, other.categories);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTags()).compareTo(other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplybody()).compareTo(other.isSetReplybody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplybody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replybody, other.replybody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastreplyusertype()).compareTo(other.isSetLastreplyusertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastreplyusertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastreplyusertype, other.lastreplyusertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastreplyuserid()).compareTo(other.isSetLastreplyuserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastreplyuserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastreplyuserid, other.lastreplyuserid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMasterbrandid()).compareTo(other.isSetMasterbrandid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMasterbrandid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterbrandid, other.masterbrandid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandid()).compareTo(other.isSetBrandid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandid, other.brandid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandname()).compareTo(other.isSetBrandname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandname, other.brandname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvcid()).compareTo(other.isSetPvcid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvcid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvcid, other.pvcid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPvcname()).compareTo(other.isSetPvcname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPvcname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pvcname, other.pvcname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityid()).compareTo(other.isSetCityid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityid, other.cityid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityname()).compareTo(other.isSetCityname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cityname, other.cityname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsertype()).compareTo(other.isSetUsertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usertype, other.usertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIssolve()).compareTo(other.isSetIssolve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIssolve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.issolve, other.issolve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandspell()).compareTo(other.isSetBrandspell());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandspell()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandspell, other.brandspell);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCatespell()).compareTo(other.isSetCatespell());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCatespell()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.catespell, other.catespell);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategroup()).compareTo(other.isSetCategroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categroup, other.categroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifytime()).compareTo(other.isSetLastmodifytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifytime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifytime, other.lastmodifytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastreplytime()).compareTo(other.isSetLastreplytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastreplytime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastreplytime, other.lastreplytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFullinfo()).compareTo(other.isSetFullinfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFullinfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fullinfo, other.fullinfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DTOQuestionIndexField(");
    boolean first = true;

    sb.append("qoid:");
    sb.append(this.qoid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaid:");
    sb.append(this.areaid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("areatype:");
    if (this.areatype == null) {
      sb.append("null");
    } else {
      sb.append(this.areatype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("areaname:");
    if (this.areaname == null) {
      sb.append("null");
    } else {
      sb.append(this.areaname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replycount:");
    sb.append(this.replycount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewcount:");
    sb.append(this.viewcount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("active:");
    sb.append(this.active);
    first = false;
    if (!first) sb.append(", ");
    sb.append("categories:");
    if (this.categories == null) {
      sb.append("null");
    } else {
      sb.append(this.categories);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("replybody:");
    if (this.replybody == null) {
      sb.append("null");
    } else {
      sb.append(this.replybody);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastreplyusertype:");
    sb.append(this.lastreplyusertype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastreplyuserid:");
    sb.append(this.lastreplyuserid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("masterbrandid:");
    sb.append(this.masterbrandid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandid:");
    sb.append(this.brandid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandname:");
    if (this.brandname == null) {
      sb.append("null");
    } else {
      sb.append(this.brandname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pvcid:");
    sb.append(this.pvcid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("pvcname:");
    if (this.pvcname == null) {
      sb.append("null");
    } else {
      sb.append(this.pvcname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityid:");
    sb.append(this.cityid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cityname:");
    if (this.cityname == null) {
      sb.append("null");
    } else {
      sb.append(this.cityname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    sb.append(this.userid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usertype:");
    sb.append(this.usertype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("issolve:");
    sb.append(this.issolve);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandspell:");
    if (this.brandspell == null) {
      sb.append("null");
    } else {
      sb.append(this.brandspell);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("catespell:");
    if (this.catespell == null) {
      sb.append("null");
    } else {
      sb.append(this.catespell);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categroup:");
    if (this.categroup == null) {
      sb.append("null");
    } else {
      sb.append(this.categroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createtime:");
    if (this.createtime == null) {
      sb.append("null");
    } else {
      sb.append(this.createtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastmodifytime:");
    if (this.lastmodifytime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastmodifytime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastreplytime:");
    if (this.lastreplytime == null) {
      sb.append("null");
    } else {
      sb.append(this.lastreplytime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fullinfo:");
    if (this.fullinfo == null) {
      sb.append("null");
    } else {
      sb.append(this.fullinfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DTOQuestionIndexFieldStandardSchemeFactory implements SchemeFactory {
    public DTOQuestionIndexFieldStandardScheme getScheme() {
      return new DTOQuestionIndexFieldStandardScheme();
    }
  }

  private static class DTOQuestionIndexFieldStandardScheme extends StandardScheme<DTOQuestionIndexField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DTOQuestionIndexField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // QOID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.qoid = iprot.readI32();
              struct.setQoidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AREAID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.areaid = iprot.readI32();
              struct.setAreaidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AREATYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areatype = iprot.readString();
              struct.setAreatypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AREANAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.areaname = iprot.readString();
              struct.setAreanameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPLYCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.replycount = iprot.readI32();
              struct.setReplycountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VIEWCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewcount = iprot.readI32();
              struct.setViewcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.active = iprot.readI32();
              struct.setActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CATEGORIES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categories = iprot.readString();
              struct.setCategoriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tags = iprot.readString();
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REPLYBODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.replybody = iprot.readString();
              struct.setReplybodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // LASTREPLYUSERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastreplyusertype = iprot.readI32();
              struct.setLastreplyusertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LASTREPLYUSERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastreplyuserid = iprot.readI32();
              struct.setLastreplyuseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MASTERBRANDID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.masterbrandid = iprot.readI32();
              struct.setMasterbrandidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // BRANDID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brandid = iprot.readI32();
              struct.setBrandidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BRANDNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandname = iprot.readString();
              struct.setBrandnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PVCID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pvcid = iprot.readI32();
              struct.setPvcidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PVCNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pvcname = iprot.readString();
              struct.setPvcnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CITYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cityid = iprot.readI32();
              struct.setCityidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CITYNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cityname = iprot.readString();
              struct.setCitynameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userid = iprot.readI32();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // USERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usertype = iprot.readI32();
              struct.setUsertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ISSOLVE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.issolve = iprot.readI32();
              struct.setIssolveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // BRANDSPELL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandspell = iprot.readString();
              struct.setBrandspellIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CATESPELL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.catespell = iprot.readString();
              struct.setCatespellIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CATEGROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.categroup = iprot.readString();
              struct.setCategroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createtime = iprot.readString();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // LASTMODIFYTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastmodifytime = iprot.readString();
              struct.setLastmodifytimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // LASTREPLYTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastreplytime = iprot.readString();
              struct.setLastreplytimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FULLINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fullinfo = iprot.readString();
              struct.setFullinfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DTOQuestionIndexField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(QOID_FIELD_DESC);
      oprot.writeI32(struct.qoid);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AREAID_FIELD_DESC);
      oprot.writeI32(struct.areaid);
      oprot.writeFieldEnd();
      if (struct.areatype != null) {
        oprot.writeFieldBegin(AREATYPE_FIELD_DESC);
        oprot.writeString(struct.areatype);
        oprot.writeFieldEnd();
      }
      if (struct.areaname != null) {
        oprot.writeFieldBegin(AREANAME_FIELD_DESC);
        oprot.writeString(struct.areaname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REPLYCOUNT_FIELD_DESC);
      oprot.writeI32(struct.replycount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEWCOUNT_FIELD_DESC);
      oprot.writeI32(struct.viewcount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACTIVE_FIELD_DESC);
      oprot.writeI32(struct.active);
      oprot.writeFieldEnd();
      if (struct.categories != null) {
        oprot.writeFieldBegin(CATEGORIES_FIELD_DESC);
        oprot.writeString(struct.categories);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        oprot.writeString(struct.tags);
        oprot.writeFieldEnd();
      }
      if (struct.replybody != null) {
        oprot.writeFieldBegin(REPLYBODY_FIELD_DESC);
        oprot.writeString(struct.replybody);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LASTREPLYUSERTYPE_FIELD_DESC);
      oprot.writeI32(struct.lastreplyusertype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LASTREPLYUSERID_FIELD_DESC);
      oprot.writeI32(struct.lastreplyuserid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MASTERBRANDID_FIELD_DESC);
      oprot.writeI32(struct.masterbrandid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRANDID_FIELD_DESC);
      oprot.writeI32(struct.brandid);
      oprot.writeFieldEnd();
      if (struct.brandname != null) {
        oprot.writeFieldBegin(BRANDNAME_FIELD_DESC);
        oprot.writeString(struct.brandname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PVCID_FIELD_DESC);
      oprot.writeI32(struct.pvcid);
      oprot.writeFieldEnd();
      if (struct.pvcname != null) {
        oprot.writeFieldBegin(PVCNAME_FIELD_DESC);
        oprot.writeString(struct.pvcname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CITYID_FIELD_DESC);
      oprot.writeI32(struct.cityid);
      oprot.writeFieldEnd();
      if (struct.cityname != null) {
        oprot.writeFieldBegin(CITYNAME_FIELD_DESC);
        oprot.writeString(struct.cityname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USERID_FIELD_DESC);
      oprot.writeI32(struct.userid);
      oprot.writeFieldEnd();
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USERTYPE_FIELD_DESC);
      oprot.writeI32(struct.usertype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISSOLVE_FIELD_DESC);
      oprot.writeI32(struct.issolve);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.brandspell != null) {
        oprot.writeFieldBegin(BRANDSPELL_FIELD_DESC);
        oprot.writeString(struct.brandspell);
        oprot.writeFieldEnd();
      }
      if (struct.catespell != null) {
        oprot.writeFieldBegin(CATESPELL_FIELD_DESC);
        oprot.writeString(struct.catespell);
        oprot.writeFieldEnd();
      }
      if (struct.categroup != null) {
        oprot.writeFieldBegin(CATEGROUP_FIELD_DESC);
        oprot.writeString(struct.categroup);
        oprot.writeFieldEnd();
      }
      if (struct.createtime != null) {
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeString(struct.createtime);
        oprot.writeFieldEnd();
      }
      if (struct.lastmodifytime != null) {
        oprot.writeFieldBegin(LASTMODIFYTIME_FIELD_DESC);
        oprot.writeString(struct.lastmodifytime);
        oprot.writeFieldEnd();
      }
      if (struct.lastreplytime != null) {
        oprot.writeFieldBegin(LASTREPLYTIME_FIELD_DESC);
        oprot.writeString(struct.lastreplytime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.fullinfo != null) {
        oprot.writeFieldBegin(FULLINFO_FIELD_DESC);
        oprot.writeString(struct.fullinfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DTOQuestionIndexFieldTupleSchemeFactory implements SchemeFactory {
    public DTOQuestionIndexFieldTupleScheme getScheme() {
      return new DTOQuestionIndexFieldTupleScheme();
    }
  }

  private static class DTOQuestionIndexFieldTupleScheme extends TupleScheme<DTOQuestionIndexField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DTOQuestionIndexField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetQoid()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetBody()) {
        optionals.set(2);
      }
      if (struct.isSetAreaid()) {
        optionals.set(3);
      }
      if (struct.isSetAreatype()) {
        optionals.set(4);
      }
      if (struct.isSetAreaname()) {
        optionals.set(5);
      }
      if (struct.isSetReplycount()) {
        optionals.set(6);
      }
      if (struct.isSetViewcount()) {
        optionals.set(7);
      }
      if (struct.isSetActive()) {
        optionals.set(8);
      }
      if (struct.isSetCategories()) {
        optionals.set(9);
      }
      if (struct.isSetTags()) {
        optionals.set(10);
      }
      if (struct.isSetReplybody()) {
        optionals.set(11);
      }
      if (struct.isSetLastreplyusertype()) {
        optionals.set(12);
      }
      if (struct.isSetLastreplyuserid()) {
        optionals.set(13);
      }
      if (struct.isSetMasterbrandid()) {
        optionals.set(14);
      }
      if (struct.isSetBrandid()) {
        optionals.set(15);
      }
      if (struct.isSetBrandname()) {
        optionals.set(16);
      }
      if (struct.isSetPvcid()) {
        optionals.set(17);
      }
      if (struct.isSetPvcname()) {
        optionals.set(18);
      }
      if (struct.isSetCityid()) {
        optionals.set(19);
      }
      if (struct.isSetCityname()) {
        optionals.set(20);
      }
      if (struct.isSetUserid()) {
        optionals.set(21);
      }
      if (struct.isSetUsername()) {
        optionals.set(22);
      }
      if (struct.isSetUsertype()) {
        optionals.set(23);
      }
      if (struct.isSetIssolve()) {
        optionals.set(24);
      }
      if (struct.isSetStatus()) {
        optionals.set(25);
      }
      if (struct.isSetBrandspell()) {
        optionals.set(26);
      }
      if (struct.isSetCatespell()) {
        optionals.set(27);
      }
      if (struct.isSetCategroup()) {
        optionals.set(28);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(29);
      }
      if (struct.isSetLastmodifytime()) {
        optionals.set(30);
      }
      if (struct.isSetLastreplytime()) {
        optionals.set(31);
      }
      if (struct.isSetId()) {
        optionals.set(32);
      }
      if (struct.isSetFullinfo()) {
        optionals.set(33);
      }
      oprot.writeBitSet(optionals, 34);
      if (struct.isSetQoid()) {
        oprot.writeI32(struct.qoid);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
      if (struct.isSetAreaid()) {
        oprot.writeI32(struct.areaid);
      }
      if (struct.isSetAreatype()) {
        oprot.writeString(struct.areatype);
      }
      if (struct.isSetAreaname()) {
        oprot.writeString(struct.areaname);
      }
      if (struct.isSetReplycount()) {
        oprot.writeI32(struct.replycount);
      }
      if (struct.isSetViewcount()) {
        oprot.writeI32(struct.viewcount);
      }
      if (struct.isSetActive()) {
        oprot.writeI32(struct.active);
      }
      if (struct.isSetCategories()) {
        oprot.writeString(struct.categories);
      }
      if (struct.isSetTags()) {
        oprot.writeString(struct.tags);
      }
      if (struct.isSetReplybody()) {
        oprot.writeString(struct.replybody);
      }
      if (struct.isSetLastreplyusertype()) {
        oprot.writeI32(struct.lastreplyusertype);
      }
      if (struct.isSetLastreplyuserid()) {
        oprot.writeI32(struct.lastreplyuserid);
      }
      if (struct.isSetMasterbrandid()) {
        oprot.writeI32(struct.masterbrandid);
      }
      if (struct.isSetBrandid()) {
        oprot.writeI32(struct.brandid);
      }
      if (struct.isSetBrandname()) {
        oprot.writeString(struct.brandname);
      }
      if (struct.isSetPvcid()) {
        oprot.writeI32(struct.pvcid);
      }
      if (struct.isSetPvcname()) {
        oprot.writeString(struct.pvcname);
      }
      if (struct.isSetCityid()) {
        oprot.writeI32(struct.cityid);
      }
      if (struct.isSetCityname()) {
        oprot.writeString(struct.cityname);
      }
      if (struct.isSetUserid()) {
        oprot.writeI32(struct.userid);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetUsertype()) {
        oprot.writeI32(struct.usertype);
      }
      if (struct.isSetIssolve()) {
        oprot.writeI32(struct.issolve);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetBrandspell()) {
        oprot.writeString(struct.brandspell);
      }
      if (struct.isSetCatespell()) {
        oprot.writeString(struct.catespell);
      }
      if (struct.isSetCategroup()) {
        oprot.writeString(struct.categroup);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeString(struct.createtime);
      }
      if (struct.isSetLastmodifytime()) {
        oprot.writeString(struct.lastmodifytime);
      }
      if (struct.isSetLastreplytime()) {
        oprot.writeString(struct.lastreplytime);
      }
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetFullinfo()) {
        oprot.writeString(struct.fullinfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DTOQuestionIndexField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(34);
      if (incoming.get(0)) {
        struct.qoid = iprot.readI32();
        struct.setQoidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.areaid = iprot.readI32();
        struct.setAreaidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.areatype = iprot.readString();
        struct.setAreatypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.areaname = iprot.readString();
        struct.setAreanameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.replycount = iprot.readI32();
        struct.setReplycountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.viewcount = iprot.readI32();
        struct.setViewcountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.active = iprot.readI32();
        struct.setActiveIsSet(true);
      }
      if (incoming.get(9)) {
        struct.categories = iprot.readString();
        struct.setCategoriesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.tags = iprot.readString();
        struct.setTagsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.replybody = iprot.readString();
        struct.setReplybodyIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastreplyusertype = iprot.readI32();
        struct.setLastreplyusertypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastreplyuserid = iprot.readI32();
        struct.setLastreplyuseridIsSet(true);
      }
      if (incoming.get(14)) {
        struct.masterbrandid = iprot.readI32();
        struct.setMasterbrandidIsSet(true);
      }
      if (incoming.get(15)) {
        struct.brandid = iprot.readI32();
        struct.setBrandidIsSet(true);
      }
      if (incoming.get(16)) {
        struct.brandname = iprot.readString();
        struct.setBrandnameIsSet(true);
      }
      if (incoming.get(17)) {
        struct.pvcid = iprot.readI32();
        struct.setPvcidIsSet(true);
      }
      if (incoming.get(18)) {
        struct.pvcname = iprot.readString();
        struct.setPvcnameIsSet(true);
      }
      if (incoming.get(19)) {
        struct.cityid = iprot.readI32();
        struct.setCityidIsSet(true);
      }
      if (incoming.get(20)) {
        struct.cityname = iprot.readString();
        struct.setCitynameIsSet(true);
      }
      if (incoming.get(21)) {
        struct.userid = iprot.readI32();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(22)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.usertype = iprot.readI32();
        struct.setUsertypeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.issolve = iprot.readI32();
        struct.setIssolveIsSet(true);
      }
      if (incoming.get(25)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(26)) {
        struct.brandspell = iprot.readString();
        struct.setBrandspellIsSet(true);
      }
      if (incoming.get(27)) {
        struct.catespell = iprot.readString();
        struct.setCatespellIsSet(true);
      }
      if (incoming.get(28)) {
        struct.categroup = iprot.readString();
        struct.setCategroupIsSet(true);
      }
      if (incoming.get(29)) {
        struct.createtime = iprot.readString();
        struct.setCreatetimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.lastmodifytime = iprot.readString();
        struct.setLastmodifytimeIsSet(true);
      }
      if (incoming.get(31)) {
        struct.lastreplytime = iprot.readString();
        struct.setLastreplytimeIsSet(true);
      }
      if (incoming.get(32)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(33)) {
        struct.fullinfo = iprot.readString();
        struct.setFullinfoIsSet(true);
      }
    }
  }

}

