/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class AggrFieldResult implements org.apache.thrift.TBase<AggrFieldResult, AggrFieldResult._Fields>, java.io.Serializable, Cloneable, Comparable<AggrFieldResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AggrFieldResult");

  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("FieldName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField AGGR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("AggrType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AGGR_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("AggrValue", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AggrFieldResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AggrFieldResultTupleSchemeFactory());
  }

  public String FieldName; // required
  public int AggrType; // required
  public List<AggrFieldResultItem> AggrValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_NAME((short)1, "FieldName"),
    AGGR_TYPE((short)2, "AggrType"),
    AGGR_VALUE((short)3, "AggrValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_NAME
          return FIELD_NAME;
        case 2: // AGGR_TYPE
          return AGGR_TYPE;
        case 3: // AGGR_VALUE
          return AGGR_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AGGRTYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("FieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGGR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("AggrType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGGR_VALUE, new org.apache.thrift.meta_data.FieldMetaData("AggrValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AggrFieldResultItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AggrFieldResult.class, metaDataMap);
  }

  public AggrFieldResult() {
  }

  public AggrFieldResult(
    String FieldName,
    int AggrType,
    List<AggrFieldResultItem> AggrValue)
  {
    this();
    this.FieldName = FieldName;
    this.AggrType = AggrType;
    setAggrTypeIsSet(true);
    this.AggrValue = AggrValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AggrFieldResult(AggrFieldResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFieldName()) {
      this.FieldName = other.FieldName;
    }
    this.AggrType = other.AggrType;
    if (other.isSetAggrValue()) {
      List<AggrFieldResultItem> __this__AggrValue = new ArrayList<AggrFieldResultItem>(other.AggrValue.size());
      for (AggrFieldResultItem other_element : other.AggrValue) {
        __this__AggrValue.add(new AggrFieldResultItem(other_element));
      }
      this.AggrValue = __this__AggrValue;
    }
  }

  public AggrFieldResult deepCopy() {
    return new AggrFieldResult(this);
  }

  @Override
  public void clear() {
    this.FieldName = null;
    setAggrTypeIsSet(false);
    this.AggrType = 0;
    this.AggrValue = null;
  }

  public String getFieldName() {
    return this.FieldName;
  }

  public AggrFieldResult setFieldName(String FieldName) {
    this.FieldName = FieldName;
    return this;
  }

  public void unsetFieldName() {
    this.FieldName = null;
  }

  /** Returns true if field FieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.FieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.FieldName = null;
    }
  }

  public int getAggrType() {
    return this.AggrType;
  }

  public AggrFieldResult setAggrType(int AggrType) {
    this.AggrType = AggrType;
    setAggrTypeIsSet(true);
    return this;
  }

  public void unsetAggrType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGRTYPE_ISSET_ID);
  }

  /** Returns true if field AggrType is set (has been assigned a value) and false otherwise */
  public boolean isSetAggrType() {
    return EncodingUtils.testBit(__isset_bitfield, __AGGRTYPE_ISSET_ID);
  }

  public void setAggrTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGRTYPE_ISSET_ID, value);
  }

  public int getAggrValueSize() {
    return (this.AggrValue == null) ? 0 : this.AggrValue.size();
  }

  public java.util.Iterator<AggrFieldResultItem> getAggrValueIterator() {
    return (this.AggrValue == null) ? null : this.AggrValue.iterator();
  }

  public void addToAggrValue(AggrFieldResultItem elem) {
    if (this.AggrValue == null) {
      this.AggrValue = new ArrayList<AggrFieldResultItem>();
    }
    this.AggrValue.add(elem);
  }

  public List<AggrFieldResultItem> getAggrValue() {
    return this.AggrValue;
  }

  public AggrFieldResult setAggrValue(List<AggrFieldResultItem> AggrValue) {
    this.AggrValue = AggrValue;
    return this;
  }

  public void unsetAggrValue() {
    this.AggrValue = null;
  }

  /** Returns true if field AggrValue is set (has been assigned a value) and false otherwise */
  public boolean isSetAggrValue() {
    return this.AggrValue != null;
  }

  public void setAggrValueIsSet(boolean value) {
    if (!value) {
      this.AggrValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((String)value);
      }
      break;

    case AGGR_TYPE:
      if (value == null) {
        unsetAggrType();
      } else {
        setAggrType((Integer)value);
      }
      break;

    case AGGR_VALUE:
      if (value == null) {
        unsetAggrValue();
      } else {
        setAggrValue((List<AggrFieldResultItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_NAME:
      return getFieldName();

    case AGGR_TYPE:
      return getAggrType();

    case AGGR_VALUE:
      return getAggrValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_NAME:
      return isSetFieldName();
    case AGGR_TYPE:
      return isSetAggrType();
    case AGGR_VALUE:
      return isSetAggrValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AggrFieldResult)
      return this.equals((AggrFieldResult)that);
    return false;
  }

  public boolean equals(AggrFieldResult that) {
    if (that == null)
      return false;

    boolean this_present_FieldName = true && this.isSetFieldName();
    boolean that_present_FieldName = true && that.isSetFieldName();
    if (this_present_FieldName || that_present_FieldName) {
      if (!(this_present_FieldName && that_present_FieldName))
        return false;
      if (!this.FieldName.equals(that.FieldName))
        return false;
    }

    boolean this_present_AggrType = true;
    boolean that_present_AggrType = true;
    if (this_present_AggrType || that_present_AggrType) {
      if (!(this_present_AggrType && that_present_AggrType))
        return false;
      if (this.AggrType != that.AggrType)
        return false;
    }

    boolean this_present_AggrValue = true && this.isSetAggrValue();
    boolean that_present_AggrValue = true && that.isSetAggrValue();
    if (this_present_AggrValue || that_present_AggrValue) {
      if (!(this_present_AggrValue && that_present_AggrValue))
        return false;
      if (!this.AggrValue.equals(that.AggrValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_FieldName = true && (isSetFieldName());
    list.add(present_FieldName);
    if (present_FieldName)
      list.add(FieldName);

    boolean present_AggrType = true;
    list.add(present_AggrType);
    if (present_AggrType)
      list.add(AggrType);

    boolean present_AggrValue = true && (isSetAggrValue());
    list.add(present_AggrValue);
    if (present_AggrValue)
      list.add(AggrValue);

    return list.hashCode();
  }

  @Override
  public int compareTo(AggrFieldResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FieldName, other.FieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggrType()).compareTo(other.isSetAggrType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggrType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AggrType, other.AggrType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggrValue()).compareTo(other.isSetAggrValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggrValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AggrValue, other.AggrValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AggrFieldResult(");
    boolean first = true;

    sb.append("FieldName:");
    if (this.FieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.FieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AggrType:");
    sb.append(this.AggrType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("AggrValue:");
    if (this.AggrValue == null) {
      sb.append("null");
    } else {
      sb.append(this.AggrValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AggrFieldResultStandardSchemeFactory implements SchemeFactory {
    public AggrFieldResultStandardScheme getScheme() {
      return new AggrFieldResultStandardScheme();
    }
  }

  private static class AggrFieldResultStandardScheme extends StandardScheme<AggrFieldResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AggrFieldResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGGR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.AggrType = iprot.readI32();
              struct.setAggrTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGGR_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list608 = iprot.readListBegin();
                struct.AggrValue = new ArrayList<AggrFieldResultItem>(_list608.size);
                AggrFieldResultItem _elem609;
                for (int _i610 = 0; _i610 < _list608.size; ++_i610)
                {
                  _elem609 = new AggrFieldResultItem();
                  _elem609.read(iprot);
                  struct.AggrValue.add(_elem609);
                }
                iprot.readListEnd();
              }
              struct.setAggrValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AggrFieldResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.FieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.FieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AGGR_TYPE_FIELD_DESC);
      oprot.writeI32(struct.AggrType);
      oprot.writeFieldEnd();
      if (struct.AggrValue != null) {
        oprot.writeFieldBegin(AGGR_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AggrValue.size()));
          for (AggrFieldResultItem _iter611 : struct.AggrValue)
          {
            _iter611.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AggrFieldResultTupleSchemeFactory implements SchemeFactory {
    public AggrFieldResultTupleScheme getScheme() {
      return new AggrFieldResultTupleScheme();
    }
  }

  private static class AggrFieldResultTupleScheme extends TupleScheme<AggrFieldResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AggrFieldResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFieldName()) {
        optionals.set(0);
      }
      if (struct.isSetAggrType()) {
        optionals.set(1);
      }
      if (struct.isSetAggrValue()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.FieldName);
      }
      if (struct.isSetAggrType()) {
        oprot.writeI32(struct.AggrType);
      }
      if (struct.isSetAggrValue()) {
        {
          oprot.writeI32(struct.AggrValue.size());
          for (AggrFieldResultItem _iter612 : struct.AggrValue)
          {
            _iter612.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AggrFieldResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.FieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.AggrType = iprot.readI32();
        struct.setAggrTypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list613 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AggrValue = new ArrayList<AggrFieldResultItem>(_list613.size);
          AggrFieldResultItem _elem614;
          for (int _i615 = 0; _i615 < _list613.size; ++_i615)
          {
            _elem614 = new AggrFieldResultItem();
            _elem614.read(iprot);
            struct.AggrValue.add(_elem614);
          }
        }
        struct.setAggrValueIsSet(true);
      }
    }
  }

}

