/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class SearchQuestionCondition implements org.apache.thrift.TBase<SearchQuestionCondition, SearchQuestionCondition._Fields>, java.io.Serializable, Cloneable, Comparable<SearchQuestionCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchQuestionCondition");

  private static final org.apache.thrift.protocol.TField COMMON_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("CommonFlag", org.apache.thrift.protocol.TType.I32, (short)101);
  private static final org.apache.thrift.protocol.TField REQUEST_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("RequestSource", org.apache.thrift.protocol.TType.I32, (short)102);
  private static final org.apache.thrift.protocol.TField RETURN_FIELD_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ReturnFieldArray", org.apache.thrift.protocol.TType.LIST, (short)103);
  private static final org.apache.thrift.protocol.TField ORDER_BY_FIELD_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("OrderByFieldArray", org.apache.thrift.protocol.TType.LIST, (short)104);
  private static final org.apache.thrift.protocol.TField ORDER_BY_IS_DESCARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("OrderByIsDESCArray", org.apache.thrift.protocol.TType.LIST, (short)105);
  private static final org.apache.thrift.protocol.TField SORT_BOOST_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("SortBoostFlag", org.apache.thrift.protocol.TType.I32, (short)106);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("PageSize", org.apache.thrift.protocol.TType.I32, (short)107);
  private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("PageIndex", org.apache.thrift.protocol.TType.I32, (short)108);
  private static final org.apache.thrift.protocol.TField IS_HIGHT_LIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsHightLight", org.apache.thrift.protocol.TType.BOOL, (short)109);
  private static final org.apache.thrift.protocol.TField IS_COUNT_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCountSearch", org.apache.thrift.protocol.TType.BOOL, (short)112);
  private static final org.apache.thrift.protocol.TField REQUEST_PARAMETERS_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("RequestParametersLog", org.apache.thrift.protocol.TType.STRING, (short)113);
  private static final org.apache.thrift.protocol.TField AGGR_FIELD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("AggrFieldList", org.apache.thrift.protocol.TType.LIST, (short)114);
  private static final org.apache.thrift.protocol.TField QO_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("QoIdArray", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NO_QO_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("NoQoIdArray", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyWord", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("Title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("Body", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REPLY_BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("ReplyBody", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TAGS_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("TagsArray", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField MAIN_BRAND_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("MainBrandIdArray", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField BRAND_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BrandIdArray", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CATEGORIES_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CategoriesArray", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField CATEGORIES_GROUP_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CategoriesGroupArray", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField AREA_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("AreaIdArray", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField MAX_REPLY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("MaxReplyCount", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField MIN_REPLY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("MinReplyCount", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField MIN_VIEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("MinViewCount", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField MAX_VIEW_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("MaxViewCount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PROVINCE_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ProvinceIdArray", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField CITY_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CityIdArray", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField IS_SOLVE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("IsSolveArray", org.apache.thrift.protocol.TType.LIST, (short)19);
  private static final org.apache.thrift.protocol.TField CUT_LENGTH_FIELD_NAME_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CutLengthFieldNameArray", org.apache.thrift.protocol.TType.LIST, (short)51);
  private static final org.apache.thrift.protocol.TField CUT_LENGTH_FIELD_VALUE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CutLengthFieldValueArray", org.apache.thrift.protocol.TType.LIST, (short)52);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchQuestionConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchQuestionConditionTupleSchemeFactory());
  }

  public int CommonFlag; // required
  public int RequestSource; // required
  public List<String> ReturnFieldArray; // required
  public List<String> OrderByFieldArray; // required
  public List<Boolean> OrderByIsDESCArray; // required
  public int SortBoostFlag; // required
  public int PageSize; // required
  public int PageIndex; // required
  public boolean IsHightLight; // required
  public boolean IsCountSearch; // required
  public String RequestParametersLog; // required
  public List<AggrCondition> AggrFieldList; // required
  public List<Integer> QoIdArray; // required
  public List<Integer> NoQoIdArray; // required
  public String KeyWord; // required
  public String Title; // required
  public String Body; // required
  public String ReplyBody; // required
  public List<String> TagsArray; // required
  public List<Integer> MainBrandIdArray; // required
  public List<Integer> BrandIdArray; // required
  public List<String> CategoriesArray; // required
  public List<String> CategoriesGroupArray; // required
  public List<Integer> AreaIdArray; // required
  public int MaxReplyCount; // required
  public int MinReplyCount; // required
  public int MinViewCount; // required
  public int MaxViewCount; // required
  public List<Integer> ProvinceIdArray; // required
  public List<Integer> CityIdArray; // required
  public List<Integer> IsSolveArray; // required
  public List<String> CutLengthFieldNameArray; // required
  public List<Integer> CutLengthFieldValueArray; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_FLAG((short)101, "CommonFlag"),
    REQUEST_SOURCE((short)102, "RequestSource"),
    RETURN_FIELD_ARRAY((short)103, "ReturnFieldArray"),
    ORDER_BY_FIELD_ARRAY((short)104, "OrderByFieldArray"),
    ORDER_BY_IS_DESCARRAY((short)105, "OrderByIsDESCArray"),
    SORT_BOOST_FLAG((short)106, "SortBoostFlag"),
    PAGE_SIZE((short)107, "PageSize"),
    PAGE_INDEX((short)108, "PageIndex"),
    IS_HIGHT_LIGHT((short)109, "IsHightLight"),
    IS_COUNT_SEARCH((short)112, "IsCountSearch"),
    REQUEST_PARAMETERS_LOG((short)113, "RequestParametersLog"),
    AGGR_FIELD_LIST((short)114, "AggrFieldList"),
    QO_ID_ARRAY((short)1, "QoIdArray"),
    NO_QO_ID_ARRAY((short)2, "NoQoIdArray"),
    KEY_WORD((short)3, "KeyWord"),
    TITLE((short)4, "Title"),
    BODY((short)5, "Body"),
    REPLY_BODY((short)6, "ReplyBody"),
    TAGS_ARRAY((short)7, "TagsArray"),
    MAIN_BRAND_ID_ARRAY((short)8, "MainBrandIdArray"),
    BRAND_ID_ARRAY((short)9, "BrandIdArray"),
    CATEGORIES_ARRAY((short)10, "CategoriesArray"),
    CATEGORIES_GROUP_ARRAY((short)11, "CategoriesGroupArray"),
    AREA_ID_ARRAY((short)12, "AreaIdArray"),
    MAX_REPLY_COUNT((short)13, "MaxReplyCount"),
    MIN_REPLY_COUNT((short)14, "MinReplyCount"),
    MIN_VIEW_COUNT((short)15, "MinViewCount"),
    MAX_VIEW_COUNT((short)16, "MaxViewCount"),
    PROVINCE_ID_ARRAY((short)17, "ProvinceIdArray"),
    CITY_ID_ARRAY((short)18, "CityIdArray"),
    IS_SOLVE_ARRAY((short)19, "IsSolveArray"),
    CUT_LENGTH_FIELD_NAME_ARRAY((short)51, "CutLengthFieldNameArray"),
    CUT_LENGTH_FIELD_VALUE_ARRAY((short)52, "CutLengthFieldValueArray");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 101: // COMMON_FLAG
          return COMMON_FLAG;
        case 102: // REQUEST_SOURCE
          return REQUEST_SOURCE;
        case 103: // RETURN_FIELD_ARRAY
          return RETURN_FIELD_ARRAY;
        case 104: // ORDER_BY_FIELD_ARRAY
          return ORDER_BY_FIELD_ARRAY;
        case 105: // ORDER_BY_IS_DESCARRAY
          return ORDER_BY_IS_DESCARRAY;
        case 106: // SORT_BOOST_FLAG
          return SORT_BOOST_FLAG;
        case 107: // PAGE_SIZE
          return PAGE_SIZE;
        case 108: // PAGE_INDEX
          return PAGE_INDEX;
        case 109: // IS_HIGHT_LIGHT
          return IS_HIGHT_LIGHT;
        case 112: // IS_COUNT_SEARCH
          return IS_COUNT_SEARCH;
        case 113: // REQUEST_PARAMETERS_LOG
          return REQUEST_PARAMETERS_LOG;
        case 114: // AGGR_FIELD_LIST
          return AGGR_FIELD_LIST;
        case 1: // QO_ID_ARRAY
          return QO_ID_ARRAY;
        case 2: // NO_QO_ID_ARRAY
          return NO_QO_ID_ARRAY;
        case 3: // KEY_WORD
          return KEY_WORD;
        case 4: // TITLE
          return TITLE;
        case 5: // BODY
          return BODY;
        case 6: // REPLY_BODY
          return REPLY_BODY;
        case 7: // TAGS_ARRAY
          return TAGS_ARRAY;
        case 8: // MAIN_BRAND_ID_ARRAY
          return MAIN_BRAND_ID_ARRAY;
        case 9: // BRAND_ID_ARRAY
          return BRAND_ID_ARRAY;
        case 10: // CATEGORIES_ARRAY
          return CATEGORIES_ARRAY;
        case 11: // CATEGORIES_GROUP_ARRAY
          return CATEGORIES_GROUP_ARRAY;
        case 12: // AREA_ID_ARRAY
          return AREA_ID_ARRAY;
        case 13: // MAX_REPLY_COUNT
          return MAX_REPLY_COUNT;
        case 14: // MIN_REPLY_COUNT
          return MIN_REPLY_COUNT;
        case 15: // MIN_VIEW_COUNT
          return MIN_VIEW_COUNT;
        case 16: // MAX_VIEW_COUNT
          return MAX_VIEW_COUNT;
        case 17: // PROVINCE_ID_ARRAY
          return PROVINCE_ID_ARRAY;
        case 18: // CITY_ID_ARRAY
          return CITY_ID_ARRAY;
        case 19: // IS_SOLVE_ARRAY
          return IS_SOLVE_ARRAY;
        case 51: // CUT_LENGTH_FIELD_NAME_ARRAY
          return CUT_LENGTH_FIELD_NAME_ARRAY;
        case 52: // CUT_LENGTH_FIELD_VALUE_ARRAY
          return CUT_LENGTH_FIELD_VALUE_ARRAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMONFLAG_ISSET_ID = 0;
  private static final int __REQUESTSOURCE_ISSET_ID = 1;
  private static final int __SORTBOOSTFLAG_ISSET_ID = 2;
  private static final int __PAGESIZE_ISSET_ID = 3;
  private static final int __PAGEINDEX_ISSET_ID = 4;
  private static final int __ISHIGHTLIGHT_ISSET_ID = 5;
  private static final int __ISCOUNTSEARCH_ISSET_ID = 6;
  private static final int __MAXREPLYCOUNT_ISSET_ID = 7;
  private static final int __MINREPLYCOUNT_ISSET_ID = 8;
  private static final int __MINVIEWCOUNT_ISSET_ID = 9;
  private static final int __MAXVIEWCOUNT_ISSET_ID = 10;
  private short __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_FLAG, new org.apache.thrift.meta_data.FieldMetaData("CommonFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("RequestSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_FIELD_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ReturnFieldArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ORDER_BY_FIELD_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("OrderByFieldArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ORDER_BY_IS_DESCARRAY, new org.apache.thrift.meta_data.FieldMetaData("OrderByIsDESCArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SORT_BOOST_FLAG, new org.apache.thrift.meta_data.FieldMetaData("SortBoostFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("PageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("PageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_HIGHT_LIGHT, new org.apache.thrift.meta_data.FieldMetaData("IsHightLight", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_COUNT_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("IsCountSearch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUEST_PARAMETERS_LOG, new org.apache.thrift.meta_data.FieldMetaData("RequestParametersLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGGR_FIELD_LIST, new org.apache.thrift.meta_data.FieldMetaData("AggrFieldList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "AggrCondition"))));
    tmpMap.put(_Fields.QO_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("QoIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NO_QO_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("NoQoIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("KeyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("Title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("Body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REPLY_BODY, new org.apache.thrift.meta_data.FieldMetaData("ReplyBody", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("TagsArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAIN_BRAND_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("MainBrandIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BRAND_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("BrandIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CATEGORIES_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CategoriesArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CATEGORIES_GROUP_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CategoriesGroupArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.AREA_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("AreaIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.MAX_REPLY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("MaxReplyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_REPLY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("MinReplyCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_VIEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("MinViewCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_VIEW_COUNT, new org.apache.thrift.meta_data.FieldMetaData("MaxViewCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROVINCE_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ProvinceIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CITY_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CityIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_SOLVE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("IsSolveArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CUT_LENGTH_FIELD_NAME_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CutLengthFieldNameArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CUT_LENGTH_FIELD_VALUE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CutLengthFieldValueArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchQuestionCondition.class, metaDataMap);
  }

  public SearchQuestionCondition() {
  }

  public SearchQuestionCondition(
    int CommonFlag,
    int RequestSource,
    List<String> ReturnFieldArray,
    List<String> OrderByFieldArray,
    List<Boolean> OrderByIsDESCArray,
    int SortBoostFlag,
    int PageSize,
    int PageIndex,
    boolean IsHightLight,
    boolean IsCountSearch,
    String RequestParametersLog,
    List<AggrCondition> AggrFieldList,
    List<Integer> QoIdArray,
    List<Integer> NoQoIdArray,
    String KeyWord,
    String Title,
    String Body,
    String ReplyBody,
    List<String> TagsArray,
    List<Integer> MainBrandIdArray,
    List<Integer> BrandIdArray,
    List<String> CategoriesArray,
    List<String> CategoriesGroupArray,
    List<Integer> AreaIdArray,
    int MaxReplyCount,
    int MinReplyCount,
    int MinViewCount,
    int MaxViewCount,
    List<Integer> ProvinceIdArray,
    List<Integer> CityIdArray,
    List<Integer> IsSolveArray,
    List<String> CutLengthFieldNameArray,
    List<Integer> CutLengthFieldValueArray)
  {
    this();
    this.CommonFlag = CommonFlag;
    setCommonFlagIsSet(true);
    this.RequestSource = RequestSource;
    setRequestSourceIsSet(true);
    this.ReturnFieldArray = ReturnFieldArray;
    this.OrderByFieldArray = OrderByFieldArray;
    this.OrderByIsDESCArray = OrderByIsDESCArray;
    this.SortBoostFlag = SortBoostFlag;
    setSortBoostFlagIsSet(true);
    this.PageSize = PageSize;
    setPageSizeIsSet(true);
    this.PageIndex = PageIndex;
    setPageIndexIsSet(true);
    this.IsHightLight = IsHightLight;
    setIsHightLightIsSet(true);
    this.IsCountSearch = IsCountSearch;
    setIsCountSearchIsSet(true);
    this.RequestParametersLog = RequestParametersLog;
    this.AggrFieldList = AggrFieldList;
    this.QoIdArray = QoIdArray;
    this.NoQoIdArray = NoQoIdArray;
    this.KeyWord = KeyWord;
    this.Title = Title;
    this.Body = Body;
    this.ReplyBody = ReplyBody;
    this.TagsArray = TagsArray;
    this.MainBrandIdArray = MainBrandIdArray;
    this.BrandIdArray = BrandIdArray;
    this.CategoriesArray = CategoriesArray;
    this.CategoriesGroupArray = CategoriesGroupArray;
    this.AreaIdArray = AreaIdArray;
    this.MaxReplyCount = MaxReplyCount;
    setMaxReplyCountIsSet(true);
    this.MinReplyCount = MinReplyCount;
    setMinReplyCountIsSet(true);
    this.MinViewCount = MinViewCount;
    setMinViewCountIsSet(true);
    this.MaxViewCount = MaxViewCount;
    setMaxViewCountIsSet(true);
    this.ProvinceIdArray = ProvinceIdArray;
    this.CityIdArray = CityIdArray;
    this.IsSolveArray = IsSolveArray;
    this.CutLengthFieldNameArray = CutLengthFieldNameArray;
    this.CutLengthFieldValueArray = CutLengthFieldValueArray;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchQuestionCondition(SearchQuestionCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.CommonFlag = other.CommonFlag;
    this.RequestSource = other.RequestSource;
    if (other.isSetReturnFieldArray()) {
      List<String> __this__ReturnFieldArray = new ArrayList<String>(other.ReturnFieldArray);
      this.ReturnFieldArray = __this__ReturnFieldArray;
    }
    if (other.isSetOrderByFieldArray()) {
      List<String> __this__OrderByFieldArray = new ArrayList<String>(other.OrderByFieldArray);
      this.OrderByFieldArray = __this__OrderByFieldArray;
    }
    if (other.isSetOrderByIsDESCArray()) {
      List<Boolean> __this__OrderByIsDESCArray = new ArrayList<Boolean>(other.OrderByIsDESCArray);
      this.OrderByIsDESCArray = __this__OrderByIsDESCArray;
    }
    this.SortBoostFlag = other.SortBoostFlag;
    this.PageSize = other.PageSize;
    this.PageIndex = other.PageIndex;
    this.IsHightLight = other.IsHightLight;
    this.IsCountSearch = other.IsCountSearch;
    if (other.isSetRequestParametersLog()) {
      this.RequestParametersLog = other.RequestParametersLog;
    }
    if (other.isSetAggrFieldList()) {
      List<AggrCondition> __this__AggrFieldList = new ArrayList<AggrCondition>(other.AggrFieldList.size());
      for (AggrCondition other_element : other.AggrFieldList) {
        __this__AggrFieldList.add(other_element);
      }
      this.AggrFieldList = __this__AggrFieldList;
    }
    if (other.isSetQoIdArray()) {
      List<Integer> __this__QoIdArray = new ArrayList<Integer>(other.QoIdArray);
      this.QoIdArray = __this__QoIdArray;
    }
    if (other.isSetNoQoIdArray()) {
      List<Integer> __this__NoQoIdArray = new ArrayList<Integer>(other.NoQoIdArray);
      this.NoQoIdArray = __this__NoQoIdArray;
    }
    if (other.isSetKeyWord()) {
      this.KeyWord = other.KeyWord;
    }
    if (other.isSetTitle()) {
      this.Title = other.Title;
    }
    if (other.isSetBody()) {
      this.Body = other.Body;
    }
    if (other.isSetReplyBody()) {
      this.ReplyBody = other.ReplyBody;
    }
    if (other.isSetTagsArray()) {
      List<String> __this__TagsArray = new ArrayList<String>(other.TagsArray);
      this.TagsArray = __this__TagsArray;
    }
    if (other.isSetMainBrandIdArray()) {
      List<Integer> __this__MainBrandIdArray = new ArrayList<Integer>(other.MainBrandIdArray);
      this.MainBrandIdArray = __this__MainBrandIdArray;
    }
    if (other.isSetBrandIdArray()) {
      List<Integer> __this__BrandIdArray = new ArrayList<Integer>(other.BrandIdArray);
      this.BrandIdArray = __this__BrandIdArray;
    }
    if (other.isSetCategoriesArray()) {
      List<String> __this__CategoriesArray = new ArrayList<String>(other.CategoriesArray);
      this.CategoriesArray = __this__CategoriesArray;
    }
    if (other.isSetCategoriesGroupArray()) {
      List<String> __this__CategoriesGroupArray = new ArrayList<String>(other.CategoriesGroupArray);
      this.CategoriesGroupArray = __this__CategoriesGroupArray;
    }
    if (other.isSetAreaIdArray()) {
      List<Integer> __this__AreaIdArray = new ArrayList<Integer>(other.AreaIdArray);
      this.AreaIdArray = __this__AreaIdArray;
    }
    this.MaxReplyCount = other.MaxReplyCount;
    this.MinReplyCount = other.MinReplyCount;
    this.MinViewCount = other.MinViewCount;
    this.MaxViewCount = other.MaxViewCount;
    if (other.isSetProvinceIdArray()) {
      List<Integer> __this__ProvinceIdArray = new ArrayList<Integer>(other.ProvinceIdArray);
      this.ProvinceIdArray = __this__ProvinceIdArray;
    }
    if (other.isSetCityIdArray()) {
      List<Integer> __this__CityIdArray = new ArrayList<Integer>(other.CityIdArray);
      this.CityIdArray = __this__CityIdArray;
    }
    if (other.isSetIsSolveArray()) {
      List<Integer> __this__IsSolveArray = new ArrayList<Integer>(other.IsSolveArray);
      this.IsSolveArray = __this__IsSolveArray;
    }
    if (other.isSetCutLengthFieldNameArray()) {
      List<String> __this__CutLengthFieldNameArray = new ArrayList<String>(other.CutLengthFieldNameArray);
      this.CutLengthFieldNameArray = __this__CutLengthFieldNameArray;
    }
    if (other.isSetCutLengthFieldValueArray()) {
      List<Integer> __this__CutLengthFieldValueArray = new ArrayList<Integer>(other.CutLengthFieldValueArray);
      this.CutLengthFieldValueArray = __this__CutLengthFieldValueArray;
    }
  }

  public SearchQuestionCondition deepCopy() {
    return new SearchQuestionCondition(this);
  }

  @Override
  public void clear() {
    setCommonFlagIsSet(false);
    this.CommonFlag = 0;
    setRequestSourceIsSet(false);
    this.RequestSource = 0;
    this.ReturnFieldArray = null;
    this.OrderByFieldArray = null;
    this.OrderByIsDESCArray = null;
    setSortBoostFlagIsSet(false);
    this.SortBoostFlag = 0;
    setPageSizeIsSet(false);
    this.PageSize = 0;
    setPageIndexIsSet(false);
    this.PageIndex = 0;
    setIsHightLightIsSet(false);
    this.IsHightLight = false;
    setIsCountSearchIsSet(false);
    this.IsCountSearch = false;
    this.RequestParametersLog = null;
    this.AggrFieldList = null;
    this.QoIdArray = null;
    this.NoQoIdArray = null;
    this.KeyWord = null;
    this.Title = null;
    this.Body = null;
    this.ReplyBody = null;
    this.TagsArray = null;
    this.MainBrandIdArray = null;
    this.BrandIdArray = null;
    this.CategoriesArray = null;
    this.CategoriesGroupArray = null;
    this.AreaIdArray = null;
    setMaxReplyCountIsSet(false);
    this.MaxReplyCount = 0;
    setMinReplyCountIsSet(false);
    this.MinReplyCount = 0;
    setMinViewCountIsSet(false);
    this.MinViewCount = 0;
    setMaxViewCountIsSet(false);
    this.MaxViewCount = 0;
    this.ProvinceIdArray = null;
    this.CityIdArray = null;
    this.IsSolveArray = null;
    this.CutLengthFieldNameArray = null;
    this.CutLengthFieldValueArray = null;
  }

  public int getCommonFlag() {
    return this.CommonFlag;
  }

  public SearchQuestionCondition setCommonFlag(int CommonFlag) {
    this.CommonFlag = CommonFlag;
    setCommonFlagIsSet(true);
    return this;
  }

  public void unsetCommonFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMONFLAG_ISSET_ID);
  }

  /** Returns true if field CommonFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMONFLAG_ISSET_ID);
  }

  public void setCommonFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMONFLAG_ISSET_ID, value);
  }

  public int getRequestSource() {
    return this.RequestSource;
  }

  public SearchQuestionCondition setRequestSource(int RequestSource) {
    this.RequestSource = RequestSource;
    setRequestSourceIsSet(true);
    return this;
  }

  public void unsetRequestSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSOURCE_ISSET_ID);
  }

  /** Returns true if field RequestSource is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSource() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSOURCE_ISSET_ID);
  }

  public void setRequestSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSOURCE_ISSET_ID, value);
  }

  public int getReturnFieldArraySize() {
    return (this.ReturnFieldArray == null) ? 0 : this.ReturnFieldArray.size();
  }

  public java.util.Iterator<String> getReturnFieldArrayIterator() {
    return (this.ReturnFieldArray == null) ? null : this.ReturnFieldArray.iterator();
  }

  public void addToReturnFieldArray(String elem) {
    if (this.ReturnFieldArray == null) {
      this.ReturnFieldArray = new ArrayList<String>();
    }
    this.ReturnFieldArray.add(elem);
  }

  public List<String> getReturnFieldArray() {
    return this.ReturnFieldArray;
  }

  public SearchQuestionCondition setReturnFieldArray(List<String> ReturnFieldArray) {
    this.ReturnFieldArray = ReturnFieldArray;
    return this;
  }

  public void unsetReturnFieldArray() {
    this.ReturnFieldArray = null;
  }

  /** Returns true if field ReturnFieldArray is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFieldArray() {
    return this.ReturnFieldArray != null;
  }

  public void setReturnFieldArrayIsSet(boolean value) {
    if (!value) {
      this.ReturnFieldArray = null;
    }
  }

  public int getOrderByFieldArraySize() {
    return (this.OrderByFieldArray == null) ? 0 : this.OrderByFieldArray.size();
  }

  public java.util.Iterator<String> getOrderByFieldArrayIterator() {
    return (this.OrderByFieldArray == null) ? null : this.OrderByFieldArray.iterator();
  }

  public void addToOrderByFieldArray(String elem) {
    if (this.OrderByFieldArray == null) {
      this.OrderByFieldArray = new ArrayList<String>();
    }
    this.OrderByFieldArray.add(elem);
  }

  public List<String> getOrderByFieldArray() {
    return this.OrderByFieldArray;
  }

  public SearchQuestionCondition setOrderByFieldArray(List<String> OrderByFieldArray) {
    this.OrderByFieldArray = OrderByFieldArray;
    return this;
  }

  public void unsetOrderByFieldArray() {
    this.OrderByFieldArray = null;
  }

  /** Returns true if field OrderByFieldArray is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderByFieldArray() {
    return this.OrderByFieldArray != null;
  }

  public void setOrderByFieldArrayIsSet(boolean value) {
    if (!value) {
      this.OrderByFieldArray = null;
    }
  }

  public int getOrderByIsDESCArraySize() {
    return (this.OrderByIsDESCArray == null) ? 0 : this.OrderByIsDESCArray.size();
  }

  public java.util.Iterator<Boolean> getOrderByIsDESCArrayIterator() {
    return (this.OrderByIsDESCArray == null) ? null : this.OrderByIsDESCArray.iterator();
  }

  public void addToOrderByIsDESCArray(boolean elem) {
    if (this.OrderByIsDESCArray == null) {
      this.OrderByIsDESCArray = new ArrayList<Boolean>();
    }
    this.OrderByIsDESCArray.add(elem);
  }

  public List<Boolean> getOrderByIsDESCArray() {
    return this.OrderByIsDESCArray;
  }

  public SearchQuestionCondition setOrderByIsDESCArray(List<Boolean> OrderByIsDESCArray) {
    this.OrderByIsDESCArray = OrderByIsDESCArray;
    return this;
  }

  public void unsetOrderByIsDESCArray() {
    this.OrderByIsDESCArray = null;
  }

  /** Returns true if field OrderByIsDESCArray is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderByIsDESCArray() {
    return this.OrderByIsDESCArray != null;
  }

  public void setOrderByIsDESCArrayIsSet(boolean value) {
    if (!value) {
      this.OrderByIsDESCArray = null;
    }
  }

  public int getSortBoostFlag() {
    return this.SortBoostFlag;
  }

  public SearchQuestionCondition setSortBoostFlag(int SortBoostFlag) {
    this.SortBoostFlag = SortBoostFlag;
    setSortBoostFlagIsSet(true);
    return this;
  }

  public void unsetSortBoostFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTBOOSTFLAG_ISSET_ID);
  }

  /** Returns true if field SortBoostFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetSortBoostFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTBOOSTFLAG_ISSET_ID);
  }

  public void setSortBoostFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTBOOSTFLAG_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.PageSize;
  }

  public SearchQuestionCondition setPageSize(int PageSize) {
    this.PageSize = PageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field PageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageIndex() {
    return this.PageIndex;
  }

  public SearchQuestionCondition setPageIndex(int PageIndex) {
    this.PageIndex = PageIndex;
    setPageIndexIsSet(true);
    return this;
  }

  public void unsetPageIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  /** Returns true if field PageIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  public void setPageIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
  }

  public boolean isIsHightLight() {
    return this.IsHightLight;
  }

  public SearchQuestionCondition setIsHightLight(boolean IsHightLight) {
    this.IsHightLight = IsHightLight;
    setIsHightLightIsSet(true);
    return this;
  }

  public void unsetIsHightLight() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISHIGHTLIGHT_ISSET_ID);
  }

  /** Returns true if field IsHightLight is set (has been assigned a value) and false otherwise */
  public boolean isSetIsHightLight() {
    return EncodingUtils.testBit(__isset_bitfield, __ISHIGHTLIGHT_ISSET_ID);
  }

  public void setIsHightLightIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISHIGHTLIGHT_ISSET_ID, value);
  }

  public boolean isIsCountSearch() {
    return this.IsCountSearch;
  }

  public SearchQuestionCondition setIsCountSearch(boolean IsCountSearch) {
    this.IsCountSearch = IsCountSearch;
    setIsCountSearchIsSet(true);
    return this;
  }

  public void unsetIsCountSearch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOUNTSEARCH_ISSET_ID);
  }

  /** Returns true if field IsCountSearch is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCountSearch() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOUNTSEARCH_ISSET_ID);
  }

  public void setIsCountSearchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOUNTSEARCH_ISSET_ID, value);
  }

  public String getRequestParametersLog() {
    return this.RequestParametersLog;
  }

  public SearchQuestionCondition setRequestParametersLog(String RequestParametersLog) {
    this.RequestParametersLog = RequestParametersLog;
    return this;
  }

  public void unsetRequestParametersLog() {
    this.RequestParametersLog = null;
  }

  /** Returns true if field RequestParametersLog is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestParametersLog() {
    return this.RequestParametersLog != null;
  }

  public void setRequestParametersLogIsSet(boolean value) {
    if (!value) {
      this.RequestParametersLog = null;
    }
  }

  public int getAggrFieldListSize() {
    return (this.AggrFieldList == null) ? 0 : this.AggrFieldList.size();
  }

  public java.util.Iterator<AggrCondition> getAggrFieldListIterator() {
    return (this.AggrFieldList == null) ? null : this.AggrFieldList.iterator();
  }

  public void addToAggrFieldList(AggrCondition elem) {
    if (this.AggrFieldList == null) {
      this.AggrFieldList = new ArrayList<AggrCondition>();
    }
    this.AggrFieldList.add(elem);
  }

  public List<AggrCondition> getAggrFieldList() {
    return this.AggrFieldList;
  }

  public SearchQuestionCondition setAggrFieldList(List<AggrCondition> AggrFieldList) {
    this.AggrFieldList = AggrFieldList;
    return this;
  }

  public void unsetAggrFieldList() {
    this.AggrFieldList = null;
  }

  /** Returns true if field AggrFieldList is set (has been assigned a value) and false otherwise */
  public boolean isSetAggrFieldList() {
    return this.AggrFieldList != null;
  }

  public void setAggrFieldListIsSet(boolean value) {
    if (!value) {
      this.AggrFieldList = null;
    }
  }

  public int getQoIdArraySize() {
    return (this.QoIdArray == null) ? 0 : this.QoIdArray.size();
  }

  public java.util.Iterator<Integer> getQoIdArrayIterator() {
    return (this.QoIdArray == null) ? null : this.QoIdArray.iterator();
  }

  public void addToQoIdArray(int elem) {
    if (this.QoIdArray == null) {
      this.QoIdArray = new ArrayList<Integer>();
    }
    this.QoIdArray.add(elem);
  }

  public List<Integer> getQoIdArray() {
    return this.QoIdArray;
  }

  public SearchQuestionCondition setQoIdArray(List<Integer> QoIdArray) {
    this.QoIdArray = QoIdArray;
    return this;
  }

  public void unsetQoIdArray() {
    this.QoIdArray = null;
  }

  /** Returns true if field QoIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetQoIdArray() {
    return this.QoIdArray != null;
  }

  public void setQoIdArrayIsSet(boolean value) {
    if (!value) {
      this.QoIdArray = null;
    }
  }

  public int getNoQoIdArraySize() {
    return (this.NoQoIdArray == null) ? 0 : this.NoQoIdArray.size();
  }

  public java.util.Iterator<Integer> getNoQoIdArrayIterator() {
    return (this.NoQoIdArray == null) ? null : this.NoQoIdArray.iterator();
  }

  public void addToNoQoIdArray(int elem) {
    if (this.NoQoIdArray == null) {
      this.NoQoIdArray = new ArrayList<Integer>();
    }
    this.NoQoIdArray.add(elem);
  }

  public List<Integer> getNoQoIdArray() {
    return this.NoQoIdArray;
  }

  public SearchQuestionCondition setNoQoIdArray(List<Integer> NoQoIdArray) {
    this.NoQoIdArray = NoQoIdArray;
    return this;
  }

  public void unsetNoQoIdArray() {
    this.NoQoIdArray = null;
  }

  /** Returns true if field NoQoIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetNoQoIdArray() {
    return this.NoQoIdArray != null;
  }

  public void setNoQoIdArrayIsSet(boolean value) {
    if (!value) {
      this.NoQoIdArray = null;
    }
  }

  public String getKeyWord() {
    return this.KeyWord;
  }

  public SearchQuestionCondition setKeyWord(String KeyWord) {
    this.KeyWord = KeyWord;
    return this;
  }

  public void unsetKeyWord() {
    this.KeyWord = null;
  }

  /** Returns true if field KeyWord is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyWord() {
    return this.KeyWord != null;
  }

  public void setKeyWordIsSet(boolean value) {
    if (!value) {
      this.KeyWord = null;
    }
  }

  public String getTitle() {
    return this.Title;
  }

  public SearchQuestionCondition setTitle(String Title) {
    this.Title = Title;
    return this;
  }

  public void unsetTitle() {
    this.Title = null;
  }

  /** Returns true if field Title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.Title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.Title = null;
    }
  }

  public String getBody() {
    return this.Body;
  }

  public SearchQuestionCondition setBody(String Body) {
    this.Body = Body;
    return this;
  }

  public void unsetBody() {
    this.Body = null;
  }

  /** Returns true if field Body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.Body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.Body = null;
    }
  }

  public String getReplyBody() {
    return this.ReplyBody;
  }

  public SearchQuestionCondition setReplyBody(String ReplyBody) {
    this.ReplyBody = ReplyBody;
    return this;
  }

  public void unsetReplyBody() {
    this.ReplyBody = null;
  }

  /** Returns true if field ReplyBody is set (has been assigned a value) and false otherwise */
  public boolean isSetReplyBody() {
    return this.ReplyBody != null;
  }

  public void setReplyBodyIsSet(boolean value) {
    if (!value) {
      this.ReplyBody = null;
    }
  }

  public int getTagsArraySize() {
    return (this.TagsArray == null) ? 0 : this.TagsArray.size();
  }

  public java.util.Iterator<String> getTagsArrayIterator() {
    return (this.TagsArray == null) ? null : this.TagsArray.iterator();
  }

  public void addToTagsArray(String elem) {
    if (this.TagsArray == null) {
      this.TagsArray = new ArrayList<String>();
    }
    this.TagsArray.add(elem);
  }

  public List<String> getTagsArray() {
    return this.TagsArray;
  }

  public SearchQuestionCondition setTagsArray(List<String> TagsArray) {
    this.TagsArray = TagsArray;
    return this;
  }

  public void unsetTagsArray() {
    this.TagsArray = null;
  }

  /** Returns true if field TagsArray is set (has been assigned a value) and false otherwise */
  public boolean isSetTagsArray() {
    return this.TagsArray != null;
  }

  public void setTagsArrayIsSet(boolean value) {
    if (!value) {
      this.TagsArray = null;
    }
  }

  public int getMainBrandIdArraySize() {
    return (this.MainBrandIdArray == null) ? 0 : this.MainBrandIdArray.size();
  }

  public java.util.Iterator<Integer> getMainBrandIdArrayIterator() {
    return (this.MainBrandIdArray == null) ? null : this.MainBrandIdArray.iterator();
  }

  public void addToMainBrandIdArray(int elem) {
    if (this.MainBrandIdArray == null) {
      this.MainBrandIdArray = new ArrayList<Integer>();
    }
    this.MainBrandIdArray.add(elem);
  }

  public List<Integer> getMainBrandIdArray() {
    return this.MainBrandIdArray;
  }

  public SearchQuestionCondition setMainBrandIdArray(List<Integer> MainBrandIdArray) {
    this.MainBrandIdArray = MainBrandIdArray;
    return this;
  }

  public void unsetMainBrandIdArray() {
    this.MainBrandIdArray = null;
  }

  /** Returns true if field MainBrandIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetMainBrandIdArray() {
    return this.MainBrandIdArray != null;
  }

  public void setMainBrandIdArrayIsSet(boolean value) {
    if (!value) {
      this.MainBrandIdArray = null;
    }
  }

  public int getBrandIdArraySize() {
    return (this.BrandIdArray == null) ? 0 : this.BrandIdArray.size();
  }

  public java.util.Iterator<Integer> getBrandIdArrayIterator() {
    return (this.BrandIdArray == null) ? null : this.BrandIdArray.iterator();
  }

  public void addToBrandIdArray(int elem) {
    if (this.BrandIdArray == null) {
      this.BrandIdArray = new ArrayList<Integer>();
    }
    this.BrandIdArray.add(elem);
  }

  public List<Integer> getBrandIdArray() {
    return this.BrandIdArray;
  }

  public SearchQuestionCondition setBrandIdArray(List<Integer> BrandIdArray) {
    this.BrandIdArray = BrandIdArray;
    return this;
  }

  public void unsetBrandIdArray() {
    this.BrandIdArray = null;
  }

  /** Returns true if field BrandIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandIdArray() {
    return this.BrandIdArray != null;
  }

  public void setBrandIdArrayIsSet(boolean value) {
    if (!value) {
      this.BrandIdArray = null;
    }
  }

  public int getCategoriesArraySize() {
    return (this.CategoriesArray == null) ? 0 : this.CategoriesArray.size();
  }

  public java.util.Iterator<String> getCategoriesArrayIterator() {
    return (this.CategoriesArray == null) ? null : this.CategoriesArray.iterator();
  }

  public void addToCategoriesArray(String elem) {
    if (this.CategoriesArray == null) {
      this.CategoriesArray = new ArrayList<String>();
    }
    this.CategoriesArray.add(elem);
  }

  public List<String> getCategoriesArray() {
    return this.CategoriesArray;
  }

  public SearchQuestionCondition setCategoriesArray(List<String> CategoriesArray) {
    this.CategoriesArray = CategoriesArray;
    return this;
  }

  public void unsetCategoriesArray() {
    this.CategoriesArray = null;
  }

  /** Returns true if field CategoriesArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoriesArray() {
    return this.CategoriesArray != null;
  }

  public void setCategoriesArrayIsSet(boolean value) {
    if (!value) {
      this.CategoriesArray = null;
    }
  }

  public int getCategoriesGroupArraySize() {
    return (this.CategoriesGroupArray == null) ? 0 : this.CategoriesGroupArray.size();
  }

  public java.util.Iterator<String> getCategoriesGroupArrayIterator() {
    return (this.CategoriesGroupArray == null) ? null : this.CategoriesGroupArray.iterator();
  }

  public void addToCategoriesGroupArray(String elem) {
    if (this.CategoriesGroupArray == null) {
      this.CategoriesGroupArray = new ArrayList<String>();
    }
    this.CategoriesGroupArray.add(elem);
  }

  public List<String> getCategoriesGroupArray() {
    return this.CategoriesGroupArray;
  }

  public SearchQuestionCondition setCategoriesGroupArray(List<String> CategoriesGroupArray) {
    this.CategoriesGroupArray = CategoriesGroupArray;
    return this;
  }

  public void unsetCategoriesGroupArray() {
    this.CategoriesGroupArray = null;
  }

  /** Returns true if field CategoriesGroupArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoriesGroupArray() {
    return this.CategoriesGroupArray != null;
  }

  public void setCategoriesGroupArrayIsSet(boolean value) {
    if (!value) {
      this.CategoriesGroupArray = null;
    }
  }

  public int getAreaIdArraySize() {
    return (this.AreaIdArray == null) ? 0 : this.AreaIdArray.size();
  }

  public java.util.Iterator<Integer> getAreaIdArrayIterator() {
    return (this.AreaIdArray == null) ? null : this.AreaIdArray.iterator();
  }

  public void addToAreaIdArray(int elem) {
    if (this.AreaIdArray == null) {
      this.AreaIdArray = new ArrayList<Integer>();
    }
    this.AreaIdArray.add(elem);
  }

  public List<Integer> getAreaIdArray() {
    return this.AreaIdArray;
  }

  public SearchQuestionCondition setAreaIdArray(List<Integer> AreaIdArray) {
    this.AreaIdArray = AreaIdArray;
    return this;
  }

  public void unsetAreaIdArray() {
    this.AreaIdArray = null;
  }

  /** Returns true if field AreaIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetAreaIdArray() {
    return this.AreaIdArray != null;
  }

  public void setAreaIdArrayIsSet(boolean value) {
    if (!value) {
      this.AreaIdArray = null;
    }
  }

  public int getMaxReplyCount() {
    return this.MaxReplyCount;
  }

  public SearchQuestionCondition setMaxReplyCount(int MaxReplyCount) {
    this.MaxReplyCount = MaxReplyCount;
    setMaxReplyCountIsSet(true);
    return this;
  }

  public void unsetMaxReplyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXREPLYCOUNT_ISSET_ID);
  }

  /** Returns true if field MaxReplyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxReplyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXREPLYCOUNT_ISSET_ID);
  }

  public void setMaxReplyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXREPLYCOUNT_ISSET_ID, value);
  }

  public int getMinReplyCount() {
    return this.MinReplyCount;
  }

  public SearchQuestionCondition setMinReplyCount(int MinReplyCount) {
    this.MinReplyCount = MinReplyCount;
    setMinReplyCountIsSet(true);
    return this;
  }

  public void unsetMinReplyCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINREPLYCOUNT_ISSET_ID);
  }

  /** Returns true if field MinReplyCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinReplyCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MINREPLYCOUNT_ISSET_ID);
  }

  public void setMinReplyCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINREPLYCOUNT_ISSET_ID, value);
  }

  public int getMinViewCount() {
    return this.MinViewCount;
  }

  public SearchQuestionCondition setMinViewCount(int MinViewCount) {
    this.MinViewCount = MinViewCount;
    setMinViewCountIsSet(true);
    return this;
  }

  public void unsetMinViewCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVIEWCOUNT_ISSET_ID);
  }

  /** Returns true if field MinViewCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMinViewCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVIEWCOUNT_ISSET_ID);
  }

  public void setMinViewCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVIEWCOUNT_ISSET_ID, value);
  }

  public int getMaxViewCount() {
    return this.MaxViewCount;
  }

  public SearchQuestionCondition setMaxViewCount(int MaxViewCount) {
    this.MaxViewCount = MaxViewCount;
    setMaxViewCountIsSet(true);
    return this;
  }

  public void unsetMaxViewCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXVIEWCOUNT_ISSET_ID);
  }

  /** Returns true if field MaxViewCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxViewCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXVIEWCOUNT_ISSET_ID);
  }

  public void setMaxViewCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXVIEWCOUNT_ISSET_ID, value);
  }

  public int getProvinceIdArraySize() {
    return (this.ProvinceIdArray == null) ? 0 : this.ProvinceIdArray.size();
  }

  public java.util.Iterator<Integer> getProvinceIdArrayIterator() {
    return (this.ProvinceIdArray == null) ? null : this.ProvinceIdArray.iterator();
  }

  public void addToProvinceIdArray(int elem) {
    if (this.ProvinceIdArray == null) {
      this.ProvinceIdArray = new ArrayList<Integer>();
    }
    this.ProvinceIdArray.add(elem);
  }

  public List<Integer> getProvinceIdArray() {
    return this.ProvinceIdArray;
  }

  public SearchQuestionCondition setProvinceIdArray(List<Integer> ProvinceIdArray) {
    this.ProvinceIdArray = ProvinceIdArray;
    return this;
  }

  public void unsetProvinceIdArray() {
    this.ProvinceIdArray = null;
  }

  /** Returns true if field ProvinceIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceIdArray() {
    return this.ProvinceIdArray != null;
  }

  public void setProvinceIdArrayIsSet(boolean value) {
    if (!value) {
      this.ProvinceIdArray = null;
    }
  }

  public int getCityIdArraySize() {
    return (this.CityIdArray == null) ? 0 : this.CityIdArray.size();
  }

  public java.util.Iterator<Integer> getCityIdArrayIterator() {
    return (this.CityIdArray == null) ? null : this.CityIdArray.iterator();
  }

  public void addToCityIdArray(int elem) {
    if (this.CityIdArray == null) {
      this.CityIdArray = new ArrayList<Integer>();
    }
    this.CityIdArray.add(elem);
  }

  public List<Integer> getCityIdArray() {
    return this.CityIdArray;
  }

  public SearchQuestionCondition setCityIdArray(List<Integer> CityIdArray) {
    this.CityIdArray = CityIdArray;
    return this;
  }

  public void unsetCityIdArray() {
    this.CityIdArray = null;
  }

  /** Returns true if field CityIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCityIdArray() {
    return this.CityIdArray != null;
  }

  public void setCityIdArrayIsSet(boolean value) {
    if (!value) {
      this.CityIdArray = null;
    }
  }

  public int getIsSolveArraySize() {
    return (this.IsSolveArray == null) ? 0 : this.IsSolveArray.size();
  }

  public java.util.Iterator<Integer> getIsSolveArrayIterator() {
    return (this.IsSolveArray == null) ? null : this.IsSolveArray.iterator();
  }

  public void addToIsSolveArray(int elem) {
    if (this.IsSolveArray == null) {
      this.IsSolveArray = new ArrayList<Integer>();
    }
    this.IsSolveArray.add(elem);
  }

  public List<Integer> getIsSolveArray() {
    return this.IsSolveArray;
  }

  public SearchQuestionCondition setIsSolveArray(List<Integer> IsSolveArray) {
    this.IsSolveArray = IsSolveArray;
    return this;
  }

  public void unsetIsSolveArray() {
    this.IsSolveArray = null;
  }

  /** Returns true if field IsSolveArray is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSolveArray() {
    return this.IsSolveArray != null;
  }

  public void setIsSolveArrayIsSet(boolean value) {
    if (!value) {
      this.IsSolveArray = null;
    }
  }

  public int getCutLengthFieldNameArraySize() {
    return (this.CutLengthFieldNameArray == null) ? 0 : this.CutLengthFieldNameArray.size();
  }

  public java.util.Iterator<String> getCutLengthFieldNameArrayIterator() {
    return (this.CutLengthFieldNameArray == null) ? null : this.CutLengthFieldNameArray.iterator();
  }

  public void addToCutLengthFieldNameArray(String elem) {
    if (this.CutLengthFieldNameArray == null) {
      this.CutLengthFieldNameArray = new ArrayList<String>();
    }
    this.CutLengthFieldNameArray.add(elem);
  }

  public List<String> getCutLengthFieldNameArray() {
    return this.CutLengthFieldNameArray;
  }

  public SearchQuestionCondition setCutLengthFieldNameArray(List<String> CutLengthFieldNameArray) {
    this.CutLengthFieldNameArray = CutLengthFieldNameArray;
    return this;
  }

  public void unsetCutLengthFieldNameArray() {
    this.CutLengthFieldNameArray = null;
  }

  /** Returns true if field CutLengthFieldNameArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCutLengthFieldNameArray() {
    return this.CutLengthFieldNameArray != null;
  }

  public void setCutLengthFieldNameArrayIsSet(boolean value) {
    if (!value) {
      this.CutLengthFieldNameArray = null;
    }
  }

  public int getCutLengthFieldValueArraySize() {
    return (this.CutLengthFieldValueArray == null) ? 0 : this.CutLengthFieldValueArray.size();
  }

  public java.util.Iterator<Integer> getCutLengthFieldValueArrayIterator() {
    return (this.CutLengthFieldValueArray == null) ? null : this.CutLengthFieldValueArray.iterator();
  }

  public void addToCutLengthFieldValueArray(int elem) {
    if (this.CutLengthFieldValueArray == null) {
      this.CutLengthFieldValueArray = new ArrayList<Integer>();
    }
    this.CutLengthFieldValueArray.add(elem);
  }

  public List<Integer> getCutLengthFieldValueArray() {
    return this.CutLengthFieldValueArray;
  }

  public SearchQuestionCondition setCutLengthFieldValueArray(List<Integer> CutLengthFieldValueArray) {
    this.CutLengthFieldValueArray = CutLengthFieldValueArray;
    return this;
  }

  public void unsetCutLengthFieldValueArray() {
    this.CutLengthFieldValueArray = null;
  }

  /** Returns true if field CutLengthFieldValueArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCutLengthFieldValueArray() {
    return this.CutLengthFieldValueArray != null;
  }

  public void setCutLengthFieldValueArrayIsSet(boolean value) {
    if (!value) {
      this.CutLengthFieldValueArray = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMON_FLAG:
      if (value == null) {
        unsetCommonFlag();
      } else {
        setCommonFlag((Integer)value);
      }
      break;

    case REQUEST_SOURCE:
      if (value == null) {
        unsetRequestSource();
      } else {
        setRequestSource((Integer)value);
      }
      break;

    case RETURN_FIELD_ARRAY:
      if (value == null) {
        unsetReturnFieldArray();
      } else {
        setReturnFieldArray((List<String>)value);
      }
      break;

    case ORDER_BY_FIELD_ARRAY:
      if (value == null) {
        unsetOrderByFieldArray();
      } else {
        setOrderByFieldArray((List<String>)value);
      }
      break;

    case ORDER_BY_IS_DESCARRAY:
      if (value == null) {
        unsetOrderByIsDESCArray();
      } else {
        setOrderByIsDESCArray((List<Boolean>)value);
      }
      break;

    case SORT_BOOST_FLAG:
      if (value == null) {
        unsetSortBoostFlag();
      } else {
        setSortBoostFlag((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_INDEX:
      if (value == null) {
        unsetPageIndex();
      } else {
        setPageIndex((Integer)value);
      }
      break;

    case IS_HIGHT_LIGHT:
      if (value == null) {
        unsetIsHightLight();
      } else {
        setIsHightLight((Boolean)value);
      }
      break;

    case IS_COUNT_SEARCH:
      if (value == null) {
        unsetIsCountSearch();
      } else {
        setIsCountSearch((Boolean)value);
      }
      break;

    case REQUEST_PARAMETERS_LOG:
      if (value == null) {
        unsetRequestParametersLog();
      } else {
        setRequestParametersLog((String)value);
      }
      break;

    case AGGR_FIELD_LIST:
      if (value == null) {
        unsetAggrFieldList();
      } else {
        setAggrFieldList((List<AggrCondition>)value);
      }
      break;

    case QO_ID_ARRAY:
      if (value == null) {
        unsetQoIdArray();
      } else {
        setQoIdArray((List<Integer>)value);
      }
      break;

    case NO_QO_ID_ARRAY:
      if (value == null) {
        unsetNoQoIdArray();
      } else {
        setNoQoIdArray((List<Integer>)value);
      }
      break;

    case KEY_WORD:
      if (value == null) {
        unsetKeyWord();
      } else {
        setKeyWord((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    case REPLY_BODY:
      if (value == null) {
        unsetReplyBody();
      } else {
        setReplyBody((String)value);
      }
      break;

    case TAGS_ARRAY:
      if (value == null) {
        unsetTagsArray();
      } else {
        setTagsArray((List<String>)value);
      }
      break;

    case MAIN_BRAND_ID_ARRAY:
      if (value == null) {
        unsetMainBrandIdArray();
      } else {
        setMainBrandIdArray((List<Integer>)value);
      }
      break;

    case BRAND_ID_ARRAY:
      if (value == null) {
        unsetBrandIdArray();
      } else {
        setBrandIdArray((List<Integer>)value);
      }
      break;

    case CATEGORIES_ARRAY:
      if (value == null) {
        unsetCategoriesArray();
      } else {
        setCategoriesArray((List<String>)value);
      }
      break;

    case CATEGORIES_GROUP_ARRAY:
      if (value == null) {
        unsetCategoriesGroupArray();
      } else {
        setCategoriesGroupArray((List<String>)value);
      }
      break;

    case AREA_ID_ARRAY:
      if (value == null) {
        unsetAreaIdArray();
      } else {
        setAreaIdArray((List<Integer>)value);
      }
      break;

    case MAX_REPLY_COUNT:
      if (value == null) {
        unsetMaxReplyCount();
      } else {
        setMaxReplyCount((Integer)value);
      }
      break;

    case MIN_REPLY_COUNT:
      if (value == null) {
        unsetMinReplyCount();
      } else {
        setMinReplyCount((Integer)value);
      }
      break;

    case MIN_VIEW_COUNT:
      if (value == null) {
        unsetMinViewCount();
      } else {
        setMinViewCount((Integer)value);
      }
      break;

    case MAX_VIEW_COUNT:
      if (value == null) {
        unsetMaxViewCount();
      } else {
        setMaxViewCount((Integer)value);
      }
      break;

    case PROVINCE_ID_ARRAY:
      if (value == null) {
        unsetProvinceIdArray();
      } else {
        setProvinceIdArray((List<Integer>)value);
      }
      break;

    case CITY_ID_ARRAY:
      if (value == null) {
        unsetCityIdArray();
      } else {
        setCityIdArray((List<Integer>)value);
      }
      break;

    case IS_SOLVE_ARRAY:
      if (value == null) {
        unsetIsSolveArray();
      } else {
        setIsSolveArray((List<Integer>)value);
      }
      break;

    case CUT_LENGTH_FIELD_NAME_ARRAY:
      if (value == null) {
        unsetCutLengthFieldNameArray();
      } else {
        setCutLengthFieldNameArray((List<String>)value);
      }
      break;

    case CUT_LENGTH_FIELD_VALUE_ARRAY:
      if (value == null) {
        unsetCutLengthFieldValueArray();
      } else {
        setCutLengthFieldValueArray((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_FLAG:
      return getCommonFlag();

    case REQUEST_SOURCE:
      return getRequestSource();

    case RETURN_FIELD_ARRAY:
      return getReturnFieldArray();

    case ORDER_BY_FIELD_ARRAY:
      return getOrderByFieldArray();

    case ORDER_BY_IS_DESCARRAY:
      return getOrderByIsDESCArray();

    case SORT_BOOST_FLAG:
      return getSortBoostFlag();

    case PAGE_SIZE:
      return getPageSize();

    case PAGE_INDEX:
      return getPageIndex();

    case IS_HIGHT_LIGHT:
      return isIsHightLight();

    case IS_COUNT_SEARCH:
      return isIsCountSearch();

    case REQUEST_PARAMETERS_LOG:
      return getRequestParametersLog();

    case AGGR_FIELD_LIST:
      return getAggrFieldList();

    case QO_ID_ARRAY:
      return getQoIdArray();

    case NO_QO_ID_ARRAY:
      return getNoQoIdArray();

    case KEY_WORD:
      return getKeyWord();

    case TITLE:
      return getTitle();

    case BODY:
      return getBody();

    case REPLY_BODY:
      return getReplyBody();

    case TAGS_ARRAY:
      return getTagsArray();

    case MAIN_BRAND_ID_ARRAY:
      return getMainBrandIdArray();

    case BRAND_ID_ARRAY:
      return getBrandIdArray();

    case CATEGORIES_ARRAY:
      return getCategoriesArray();

    case CATEGORIES_GROUP_ARRAY:
      return getCategoriesGroupArray();

    case AREA_ID_ARRAY:
      return getAreaIdArray();

    case MAX_REPLY_COUNT:
      return getMaxReplyCount();

    case MIN_REPLY_COUNT:
      return getMinReplyCount();

    case MIN_VIEW_COUNT:
      return getMinViewCount();

    case MAX_VIEW_COUNT:
      return getMaxViewCount();

    case PROVINCE_ID_ARRAY:
      return getProvinceIdArray();

    case CITY_ID_ARRAY:
      return getCityIdArray();

    case IS_SOLVE_ARRAY:
      return getIsSolveArray();

    case CUT_LENGTH_FIELD_NAME_ARRAY:
      return getCutLengthFieldNameArray();

    case CUT_LENGTH_FIELD_VALUE_ARRAY:
      return getCutLengthFieldValueArray();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMON_FLAG:
      return isSetCommonFlag();
    case REQUEST_SOURCE:
      return isSetRequestSource();
    case RETURN_FIELD_ARRAY:
      return isSetReturnFieldArray();
    case ORDER_BY_FIELD_ARRAY:
      return isSetOrderByFieldArray();
    case ORDER_BY_IS_DESCARRAY:
      return isSetOrderByIsDESCArray();
    case SORT_BOOST_FLAG:
      return isSetSortBoostFlag();
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_INDEX:
      return isSetPageIndex();
    case IS_HIGHT_LIGHT:
      return isSetIsHightLight();
    case IS_COUNT_SEARCH:
      return isSetIsCountSearch();
    case REQUEST_PARAMETERS_LOG:
      return isSetRequestParametersLog();
    case AGGR_FIELD_LIST:
      return isSetAggrFieldList();
    case QO_ID_ARRAY:
      return isSetQoIdArray();
    case NO_QO_ID_ARRAY:
      return isSetNoQoIdArray();
    case KEY_WORD:
      return isSetKeyWord();
    case TITLE:
      return isSetTitle();
    case BODY:
      return isSetBody();
    case REPLY_BODY:
      return isSetReplyBody();
    case TAGS_ARRAY:
      return isSetTagsArray();
    case MAIN_BRAND_ID_ARRAY:
      return isSetMainBrandIdArray();
    case BRAND_ID_ARRAY:
      return isSetBrandIdArray();
    case CATEGORIES_ARRAY:
      return isSetCategoriesArray();
    case CATEGORIES_GROUP_ARRAY:
      return isSetCategoriesGroupArray();
    case AREA_ID_ARRAY:
      return isSetAreaIdArray();
    case MAX_REPLY_COUNT:
      return isSetMaxReplyCount();
    case MIN_REPLY_COUNT:
      return isSetMinReplyCount();
    case MIN_VIEW_COUNT:
      return isSetMinViewCount();
    case MAX_VIEW_COUNT:
      return isSetMaxViewCount();
    case PROVINCE_ID_ARRAY:
      return isSetProvinceIdArray();
    case CITY_ID_ARRAY:
      return isSetCityIdArray();
    case IS_SOLVE_ARRAY:
      return isSetIsSolveArray();
    case CUT_LENGTH_FIELD_NAME_ARRAY:
      return isSetCutLengthFieldNameArray();
    case CUT_LENGTH_FIELD_VALUE_ARRAY:
      return isSetCutLengthFieldValueArray();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchQuestionCondition)
      return this.equals((SearchQuestionCondition)that);
    return false;
  }

  public boolean equals(SearchQuestionCondition that) {
    if (that == null)
      return false;

    boolean this_present_CommonFlag = true;
    boolean that_present_CommonFlag = true;
    if (this_present_CommonFlag || that_present_CommonFlag) {
      if (!(this_present_CommonFlag && that_present_CommonFlag))
        return false;
      if (this.CommonFlag != that.CommonFlag)
        return false;
    }

    boolean this_present_RequestSource = true;
    boolean that_present_RequestSource = true;
    if (this_present_RequestSource || that_present_RequestSource) {
      if (!(this_present_RequestSource && that_present_RequestSource))
        return false;
      if (this.RequestSource != that.RequestSource)
        return false;
    }

    boolean this_present_ReturnFieldArray = true && this.isSetReturnFieldArray();
    boolean that_present_ReturnFieldArray = true && that.isSetReturnFieldArray();
    if (this_present_ReturnFieldArray || that_present_ReturnFieldArray) {
      if (!(this_present_ReturnFieldArray && that_present_ReturnFieldArray))
        return false;
      if (!this.ReturnFieldArray.equals(that.ReturnFieldArray))
        return false;
    }

    boolean this_present_OrderByFieldArray = true && this.isSetOrderByFieldArray();
    boolean that_present_OrderByFieldArray = true && that.isSetOrderByFieldArray();
    if (this_present_OrderByFieldArray || that_present_OrderByFieldArray) {
      if (!(this_present_OrderByFieldArray && that_present_OrderByFieldArray))
        return false;
      if (!this.OrderByFieldArray.equals(that.OrderByFieldArray))
        return false;
    }

    boolean this_present_OrderByIsDESCArray = true && this.isSetOrderByIsDESCArray();
    boolean that_present_OrderByIsDESCArray = true && that.isSetOrderByIsDESCArray();
    if (this_present_OrderByIsDESCArray || that_present_OrderByIsDESCArray) {
      if (!(this_present_OrderByIsDESCArray && that_present_OrderByIsDESCArray))
        return false;
      if (!this.OrderByIsDESCArray.equals(that.OrderByIsDESCArray))
        return false;
    }

    boolean this_present_SortBoostFlag = true;
    boolean that_present_SortBoostFlag = true;
    if (this_present_SortBoostFlag || that_present_SortBoostFlag) {
      if (!(this_present_SortBoostFlag && that_present_SortBoostFlag))
        return false;
      if (this.SortBoostFlag != that.SortBoostFlag)
        return false;
    }

    boolean this_present_PageSize = true;
    boolean that_present_PageSize = true;
    if (this_present_PageSize || that_present_PageSize) {
      if (!(this_present_PageSize && that_present_PageSize))
        return false;
      if (this.PageSize != that.PageSize)
        return false;
    }

    boolean this_present_PageIndex = true;
    boolean that_present_PageIndex = true;
    if (this_present_PageIndex || that_present_PageIndex) {
      if (!(this_present_PageIndex && that_present_PageIndex))
        return false;
      if (this.PageIndex != that.PageIndex)
        return false;
    }

    boolean this_present_IsHightLight = true;
    boolean that_present_IsHightLight = true;
    if (this_present_IsHightLight || that_present_IsHightLight) {
      if (!(this_present_IsHightLight && that_present_IsHightLight))
        return false;
      if (this.IsHightLight != that.IsHightLight)
        return false;
    }

    boolean this_present_IsCountSearch = true;
    boolean that_present_IsCountSearch = true;
    if (this_present_IsCountSearch || that_present_IsCountSearch) {
      if (!(this_present_IsCountSearch && that_present_IsCountSearch))
        return false;
      if (this.IsCountSearch != that.IsCountSearch)
        return false;
    }

    boolean this_present_RequestParametersLog = true && this.isSetRequestParametersLog();
    boolean that_present_RequestParametersLog = true && that.isSetRequestParametersLog();
    if (this_present_RequestParametersLog || that_present_RequestParametersLog) {
      if (!(this_present_RequestParametersLog && that_present_RequestParametersLog))
        return false;
      if (!this.RequestParametersLog.equals(that.RequestParametersLog))
        return false;
    }

    boolean this_present_AggrFieldList = true && this.isSetAggrFieldList();
    boolean that_present_AggrFieldList = true && that.isSetAggrFieldList();
    if (this_present_AggrFieldList || that_present_AggrFieldList) {
      if (!(this_present_AggrFieldList && that_present_AggrFieldList))
        return false;
      if (!this.AggrFieldList.equals(that.AggrFieldList))
        return false;
    }

    boolean this_present_QoIdArray = true && this.isSetQoIdArray();
    boolean that_present_QoIdArray = true && that.isSetQoIdArray();
    if (this_present_QoIdArray || that_present_QoIdArray) {
      if (!(this_present_QoIdArray && that_present_QoIdArray))
        return false;
      if (!this.QoIdArray.equals(that.QoIdArray))
        return false;
    }

    boolean this_present_NoQoIdArray = true && this.isSetNoQoIdArray();
    boolean that_present_NoQoIdArray = true && that.isSetNoQoIdArray();
    if (this_present_NoQoIdArray || that_present_NoQoIdArray) {
      if (!(this_present_NoQoIdArray && that_present_NoQoIdArray))
        return false;
      if (!this.NoQoIdArray.equals(that.NoQoIdArray))
        return false;
    }

    boolean this_present_KeyWord = true && this.isSetKeyWord();
    boolean that_present_KeyWord = true && that.isSetKeyWord();
    if (this_present_KeyWord || that_present_KeyWord) {
      if (!(this_present_KeyWord && that_present_KeyWord))
        return false;
      if (!this.KeyWord.equals(that.KeyWord))
        return false;
    }

    boolean this_present_Title = true && this.isSetTitle();
    boolean that_present_Title = true && that.isSetTitle();
    if (this_present_Title || that_present_Title) {
      if (!(this_present_Title && that_present_Title))
        return false;
      if (!this.Title.equals(that.Title))
        return false;
    }

    boolean this_present_Body = true && this.isSetBody();
    boolean that_present_Body = true && that.isSetBody();
    if (this_present_Body || that_present_Body) {
      if (!(this_present_Body && that_present_Body))
        return false;
      if (!this.Body.equals(that.Body))
        return false;
    }

    boolean this_present_ReplyBody = true && this.isSetReplyBody();
    boolean that_present_ReplyBody = true && that.isSetReplyBody();
    if (this_present_ReplyBody || that_present_ReplyBody) {
      if (!(this_present_ReplyBody && that_present_ReplyBody))
        return false;
      if (!this.ReplyBody.equals(that.ReplyBody))
        return false;
    }

    boolean this_present_TagsArray = true && this.isSetTagsArray();
    boolean that_present_TagsArray = true && that.isSetTagsArray();
    if (this_present_TagsArray || that_present_TagsArray) {
      if (!(this_present_TagsArray && that_present_TagsArray))
        return false;
      if (!this.TagsArray.equals(that.TagsArray))
        return false;
    }

    boolean this_present_MainBrandIdArray = true && this.isSetMainBrandIdArray();
    boolean that_present_MainBrandIdArray = true && that.isSetMainBrandIdArray();
    if (this_present_MainBrandIdArray || that_present_MainBrandIdArray) {
      if (!(this_present_MainBrandIdArray && that_present_MainBrandIdArray))
        return false;
      if (!this.MainBrandIdArray.equals(that.MainBrandIdArray))
        return false;
    }

    boolean this_present_BrandIdArray = true && this.isSetBrandIdArray();
    boolean that_present_BrandIdArray = true && that.isSetBrandIdArray();
    if (this_present_BrandIdArray || that_present_BrandIdArray) {
      if (!(this_present_BrandIdArray && that_present_BrandIdArray))
        return false;
      if (!this.BrandIdArray.equals(that.BrandIdArray))
        return false;
    }

    boolean this_present_CategoriesArray = true && this.isSetCategoriesArray();
    boolean that_present_CategoriesArray = true && that.isSetCategoriesArray();
    if (this_present_CategoriesArray || that_present_CategoriesArray) {
      if (!(this_present_CategoriesArray && that_present_CategoriesArray))
        return false;
      if (!this.CategoriesArray.equals(that.CategoriesArray))
        return false;
    }

    boolean this_present_CategoriesGroupArray = true && this.isSetCategoriesGroupArray();
    boolean that_present_CategoriesGroupArray = true && that.isSetCategoriesGroupArray();
    if (this_present_CategoriesGroupArray || that_present_CategoriesGroupArray) {
      if (!(this_present_CategoriesGroupArray && that_present_CategoriesGroupArray))
        return false;
      if (!this.CategoriesGroupArray.equals(that.CategoriesGroupArray))
        return false;
    }

    boolean this_present_AreaIdArray = true && this.isSetAreaIdArray();
    boolean that_present_AreaIdArray = true && that.isSetAreaIdArray();
    if (this_present_AreaIdArray || that_present_AreaIdArray) {
      if (!(this_present_AreaIdArray && that_present_AreaIdArray))
        return false;
      if (!this.AreaIdArray.equals(that.AreaIdArray))
        return false;
    }

    boolean this_present_MaxReplyCount = true;
    boolean that_present_MaxReplyCount = true;
    if (this_present_MaxReplyCount || that_present_MaxReplyCount) {
      if (!(this_present_MaxReplyCount && that_present_MaxReplyCount))
        return false;
      if (this.MaxReplyCount != that.MaxReplyCount)
        return false;
    }

    boolean this_present_MinReplyCount = true;
    boolean that_present_MinReplyCount = true;
    if (this_present_MinReplyCount || that_present_MinReplyCount) {
      if (!(this_present_MinReplyCount && that_present_MinReplyCount))
        return false;
      if (this.MinReplyCount != that.MinReplyCount)
        return false;
    }

    boolean this_present_MinViewCount = true;
    boolean that_present_MinViewCount = true;
    if (this_present_MinViewCount || that_present_MinViewCount) {
      if (!(this_present_MinViewCount && that_present_MinViewCount))
        return false;
      if (this.MinViewCount != that.MinViewCount)
        return false;
    }

    boolean this_present_MaxViewCount = true;
    boolean that_present_MaxViewCount = true;
    if (this_present_MaxViewCount || that_present_MaxViewCount) {
      if (!(this_present_MaxViewCount && that_present_MaxViewCount))
        return false;
      if (this.MaxViewCount != that.MaxViewCount)
        return false;
    }

    boolean this_present_ProvinceIdArray = true && this.isSetProvinceIdArray();
    boolean that_present_ProvinceIdArray = true && that.isSetProvinceIdArray();
    if (this_present_ProvinceIdArray || that_present_ProvinceIdArray) {
      if (!(this_present_ProvinceIdArray && that_present_ProvinceIdArray))
        return false;
      if (!this.ProvinceIdArray.equals(that.ProvinceIdArray))
        return false;
    }

    boolean this_present_CityIdArray = true && this.isSetCityIdArray();
    boolean that_present_CityIdArray = true && that.isSetCityIdArray();
    if (this_present_CityIdArray || that_present_CityIdArray) {
      if (!(this_present_CityIdArray && that_present_CityIdArray))
        return false;
      if (!this.CityIdArray.equals(that.CityIdArray))
        return false;
    }

    boolean this_present_IsSolveArray = true && this.isSetIsSolveArray();
    boolean that_present_IsSolveArray = true && that.isSetIsSolveArray();
    if (this_present_IsSolveArray || that_present_IsSolveArray) {
      if (!(this_present_IsSolveArray && that_present_IsSolveArray))
        return false;
      if (!this.IsSolveArray.equals(that.IsSolveArray))
        return false;
    }

    boolean this_present_CutLengthFieldNameArray = true && this.isSetCutLengthFieldNameArray();
    boolean that_present_CutLengthFieldNameArray = true && that.isSetCutLengthFieldNameArray();
    if (this_present_CutLengthFieldNameArray || that_present_CutLengthFieldNameArray) {
      if (!(this_present_CutLengthFieldNameArray && that_present_CutLengthFieldNameArray))
        return false;
      if (!this.CutLengthFieldNameArray.equals(that.CutLengthFieldNameArray))
        return false;
    }

    boolean this_present_CutLengthFieldValueArray = true && this.isSetCutLengthFieldValueArray();
    boolean that_present_CutLengthFieldValueArray = true && that.isSetCutLengthFieldValueArray();
    if (this_present_CutLengthFieldValueArray || that_present_CutLengthFieldValueArray) {
      if (!(this_present_CutLengthFieldValueArray && that_present_CutLengthFieldValueArray))
        return false;
      if (!this.CutLengthFieldValueArray.equals(that.CutLengthFieldValueArray))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_CommonFlag = true;
    list.add(present_CommonFlag);
    if (present_CommonFlag)
      list.add(CommonFlag);

    boolean present_RequestSource = true;
    list.add(present_RequestSource);
    if (present_RequestSource)
      list.add(RequestSource);

    boolean present_ReturnFieldArray = true && (isSetReturnFieldArray());
    list.add(present_ReturnFieldArray);
    if (present_ReturnFieldArray)
      list.add(ReturnFieldArray);

    boolean present_OrderByFieldArray = true && (isSetOrderByFieldArray());
    list.add(present_OrderByFieldArray);
    if (present_OrderByFieldArray)
      list.add(OrderByFieldArray);

    boolean present_OrderByIsDESCArray = true && (isSetOrderByIsDESCArray());
    list.add(present_OrderByIsDESCArray);
    if (present_OrderByIsDESCArray)
      list.add(OrderByIsDESCArray);

    boolean present_SortBoostFlag = true;
    list.add(present_SortBoostFlag);
    if (present_SortBoostFlag)
      list.add(SortBoostFlag);

    boolean present_PageSize = true;
    list.add(present_PageSize);
    if (present_PageSize)
      list.add(PageSize);

    boolean present_PageIndex = true;
    list.add(present_PageIndex);
    if (present_PageIndex)
      list.add(PageIndex);

    boolean present_IsHightLight = true;
    list.add(present_IsHightLight);
    if (present_IsHightLight)
      list.add(IsHightLight);

    boolean present_IsCountSearch = true;
    list.add(present_IsCountSearch);
    if (present_IsCountSearch)
      list.add(IsCountSearch);

    boolean present_RequestParametersLog = true && (isSetRequestParametersLog());
    list.add(present_RequestParametersLog);
    if (present_RequestParametersLog)
      list.add(RequestParametersLog);

    boolean present_AggrFieldList = true && (isSetAggrFieldList());
    list.add(present_AggrFieldList);
    if (present_AggrFieldList)
      list.add(AggrFieldList);

    boolean present_QoIdArray = true && (isSetQoIdArray());
    list.add(present_QoIdArray);
    if (present_QoIdArray)
      list.add(QoIdArray);

    boolean present_NoQoIdArray = true && (isSetNoQoIdArray());
    list.add(present_NoQoIdArray);
    if (present_NoQoIdArray)
      list.add(NoQoIdArray);

    boolean present_KeyWord = true && (isSetKeyWord());
    list.add(present_KeyWord);
    if (present_KeyWord)
      list.add(KeyWord);

    boolean present_Title = true && (isSetTitle());
    list.add(present_Title);
    if (present_Title)
      list.add(Title);

    boolean present_Body = true && (isSetBody());
    list.add(present_Body);
    if (present_Body)
      list.add(Body);

    boolean present_ReplyBody = true && (isSetReplyBody());
    list.add(present_ReplyBody);
    if (present_ReplyBody)
      list.add(ReplyBody);

    boolean present_TagsArray = true && (isSetTagsArray());
    list.add(present_TagsArray);
    if (present_TagsArray)
      list.add(TagsArray);

    boolean present_MainBrandIdArray = true && (isSetMainBrandIdArray());
    list.add(present_MainBrandIdArray);
    if (present_MainBrandIdArray)
      list.add(MainBrandIdArray);

    boolean present_BrandIdArray = true && (isSetBrandIdArray());
    list.add(present_BrandIdArray);
    if (present_BrandIdArray)
      list.add(BrandIdArray);

    boolean present_CategoriesArray = true && (isSetCategoriesArray());
    list.add(present_CategoriesArray);
    if (present_CategoriesArray)
      list.add(CategoriesArray);

    boolean present_CategoriesGroupArray = true && (isSetCategoriesGroupArray());
    list.add(present_CategoriesGroupArray);
    if (present_CategoriesGroupArray)
      list.add(CategoriesGroupArray);

    boolean present_AreaIdArray = true && (isSetAreaIdArray());
    list.add(present_AreaIdArray);
    if (present_AreaIdArray)
      list.add(AreaIdArray);

    boolean present_MaxReplyCount = true;
    list.add(present_MaxReplyCount);
    if (present_MaxReplyCount)
      list.add(MaxReplyCount);

    boolean present_MinReplyCount = true;
    list.add(present_MinReplyCount);
    if (present_MinReplyCount)
      list.add(MinReplyCount);

    boolean present_MinViewCount = true;
    list.add(present_MinViewCount);
    if (present_MinViewCount)
      list.add(MinViewCount);

    boolean present_MaxViewCount = true;
    list.add(present_MaxViewCount);
    if (present_MaxViewCount)
      list.add(MaxViewCount);

    boolean present_ProvinceIdArray = true && (isSetProvinceIdArray());
    list.add(present_ProvinceIdArray);
    if (present_ProvinceIdArray)
      list.add(ProvinceIdArray);

    boolean present_CityIdArray = true && (isSetCityIdArray());
    list.add(present_CityIdArray);
    if (present_CityIdArray)
      list.add(CityIdArray);

    boolean present_IsSolveArray = true && (isSetIsSolveArray());
    list.add(present_IsSolveArray);
    if (present_IsSolveArray)
      list.add(IsSolveArray);

    boolean present_CutLengthFieldNameArray = true && (isSetCutLengthFieldNameArray());
    list.add(present_CutLengthFieldNameArray);
    if (present_CutLengthFieldNameArray)
      list.add(CutLengthFieldNameArray);

    boolean present_CutLengthFieldValueArray = true && (isSetCutLengthFieldValueArray());
    list.add(present_CutLengthFieldValueArray);
    if (present_CutLengthFieldValueArray)
      list.add(CutLengthFieldValueArray);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchQuestionCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommonFlag()).compareTo(other.isSetCommonFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CommonFlag, other.CommonFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSource()).compareTo(other.isSetRequestSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequestSource, other.RequestSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFieldArray()).compareTo(other.isSetReturnFieldArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFieldArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReturnFieldArray, other.ReturnFieldArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderByFieldArray()).compareTo(other.isSetOrderByFieldArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderByFieldArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OrderByFieldArray, other.OrderByFieldArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderByIsDESCArray()).compareTo(other.isSetOrderByIsDESCArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderByIsDESCArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OrderByIsDESCArray, other.OrderByIsDESCArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortBoostFlag()).compareTo(other.isSetSortBoostFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortBoostFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SortBoostFlag, other.SortBoostFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PageSize, other.PageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PageIndex, other.PageIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsHightLight()).compareTo(other.isSetIsHightLight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsHightLight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsHightLight, other.IsHightLight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCountSearch()).compareTo(other.isSetIsCountSearch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCountSearch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCountSearch, other.IsCountSearch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestParametersLog()).compareTo(other.isSetRequestParametersLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestParametersLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequestParametersLog, other.RequestParametersLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggrFieldList()).compareTo(other.isSetAggrFieldList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggrFieldList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AggrFieldList, other.AggrFieldList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQoIdArray()).compareTo(other.isSetQoIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQoIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.QoIdArray, other.QoIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoQoIdArray()).compareTo(other.isSetNoQoIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoQoIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NoQoIdArray, other.NoQoIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyWord, other.KeyWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Title, other.Title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Body, other.Body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReplyBody()).compareTo(other.isSetReplyBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReplyBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReplyBody, other.ReplyBody);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTagsArray()).compareTo(other.isSetTagsArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagsArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TagsArray, other.TagsArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainBrandIdArray()).compareTo(other.isSetMainBrandIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainBrandIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MainBrandIdArray, other.MainBrandIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandIdArray()).compareTo(other.isSetBrandIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BrandIdArray, other.BrandIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoriesArray()).compareTo(other.isSetCategoriesArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoriesArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CategoriesArray, other.CategoriesArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategoriesGroupArray()).compareTo(other.isSetCategoriesGroupArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoriesGroupArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CategoriesGroupArray, other.CategoriesGroupArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAreaIdArray()).compareTo(other.isSetAreaIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAreaIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AreaIdArray, other.AreaIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxReplyCount()).compareTo(other.isSetMaxReplyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxReplyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MaxReplyCount, other.MaxReplyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinReplyCount()).compareTo(other.isSetMinReplyCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinReplyCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MinReplyCount, other.MinReplyCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinViewCount()).compareTo(other.isSetMinViewCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinViewCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MinViewCount, other.MinViewCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxViewCount()).compareTo(other.isSetMaxViewCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxViewCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MaxViewCount, other.MaxViewCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceIdArray()).compareTo(other.isSetProvinceIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProvinceIdArray, other.ProvinceIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityIdArray()).compareTo(other.isSetCityIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CityIdArray, other.CityIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSolveArray()).compareTo(other.isSetIsSolveArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSolveArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsSolveArray, other.IsSolveArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutLengthFieldNameArray()).compareTo(other.isSetCutLengthFieldNameArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutLengthFieldNameArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CutLengthFieldNameArray, other.CutLengthFieldNameArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCutLengthFieldValueArray()).compareTo(other.isSetCutLengthFieldValueArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCutLengthFieldValueArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CutLengthFieldValueArray, other.CutLengthFieldValueArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchQuestionCondition(");
    boolean first = true;

    sb.append("CommonFlag:");
    sb.append(this.CommonFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequestSource:");
    sb.append(this.RequestSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ReturnFieldArray:");
    if (this.ReturnFieldArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ReturnFieldArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OrderByFieldArray:");
    if (this.OrderByFieldArray == null) {
      sb.append("null");
    } else {
      sb.append(this.OrderByFieldArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OrderByIsDESCArray:");
    if (this.OrderByIsDESCArray == null) {
      sb.append("null");
    } else {
      sb.append(this.OrderByIsDESCArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SortBoostFlag:");
    sb.append(this.SortBoostFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PageSize:");
    sb.append(this.PageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PageIndex:");
    sb.append(this.PageIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsHightLight:");
    sb.append(this.IsHightLight);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCountSearch:");
    sb.append(this.IsCountSearch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequestParametersLog:");
    if (this.RequestParametersLog == null) {
      sb.append("null");
    } else {
      sb.append(this.RequestParametersLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AggrFieldList:");
    if (this.AggrFieldList == null) {
      sb.append("null");
    } else {
      sb.append(this.AggrFieldList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("QoIdArray:");
    if (this.QoIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.QoIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NoQoIdArray:");
    if (this.NoQoIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.NoQoIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyWord:");
    if (this.KeyWord == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Title:");
    if (this.Title == null) {
      sb.append("null");
    } else {
      sb.append(this.Title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Body:");
    if (this.Body == null) {
      sb.append("null");
    } else {
      sb.append(this.Body);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ReplyBody:");
    if (this.ReplyBody == null) {
      sb.append("null");
    } else {
      sb.append(this.ReplyBody);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TagsArray:");
    if (this.TagsArray == null) {
      sb.append("null");
    } else {
      sb.append(this.TagsArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MainBrandIdArray:");
    if (this.MainBrandIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.MainBrandIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BrandIdArray:");
    if (this.BrandIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.BrandIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CategoriesArray:");
    if (this.CategoriesArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CategoriesArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CategoriesGroupArray:");
    if (this.CategoriesGroupArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CategoriesGroupArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AreaIdArray:");
    if (this.AreaIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.AreaIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MaxReplyCount:");
    sb.append(this.MaxReplyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MinReplyCount:");
    sb.append(this.MinReplyCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MinViewCount:");
    sb.append(this.MinViewCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("MaxViewCount:");
    sb.append(this.MaxViewCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProvinceIdArray:");
    if (this.ProvinceIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ProvinceIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CityIdArray:");
    if (this.CityIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CityIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsSolveArray:");
    if (this.IsSolveArray == null) {
      sb.append("null");
    } else {
      sb.append(this.IsSolveArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CutLengthFieldNameArray:");
    if (this.CutLengthFieldNameArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CutLengthFieldNameArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CutLengthFieldValueArray:");
    if (this.CutLengthFieldValueArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CutLengthFieldValueArray);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchQuestionConditionStandardSchemeFactory implements SchemeFactory {
    public SearchQuestionConditionStandardScheme getScheme() {
      return new SearchQuestionConditionStandardScheme();
    }
  }

  private static class SearchQuestionConditionStandardScheme extends StandardScheme<SearchQuestionCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchQuestionCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 101: // COMMON_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.CommonFlag = iprot.readI32();
              struct.setCommonFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // REQUEST_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.RequestSource = iprot.readI32();
              struct.setRequestSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // RETURN_FIELD_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.ReturnFieldArray = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.ReturnFieldArray.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setReturnFieldArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // ORDER_BY_FIELD_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.OrderByFieldArray = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.OrderByFieldArray.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setOrderByFieldArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // ORDER_BY_IS_DESCARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.OrderByIsDESCArray = new ArrayList<Boolean>(_list6.size);
                boolean _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readBool();
                  struct.OrderByIsDESCArray.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setOrderByIsDESCArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // SORT_BOOST_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SortBoostFlag = iprot.readI32();
              struct.setSortBoostFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PageIndex = iprot.readI32();
              struct.setPageIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 109: // IS_HIGHT_LIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsHightLight = iprot.readBool();
              struct.setIsHightLightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // IS_COUNT_SEARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCountSearch = iprot.readBool();
              struct.setIsCountSearchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // REQUEST_PARAMETERS_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RequestParametersLog = iprot.readString();
              struct.setRequestParametersLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // AGGR_FIELD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.AggrFieldList = new ArrayList<AggrCondition>(_list9.size);
                AggrCondition _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  _elem10 = new AggrCondition();
                  _elem10.read(iprot);
                  struct.AggrFieldList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setAggrFieldListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // QO_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                struct.QoIdArray = new ArrayList<Integer>(_list12.size);
                int _elem13;
                for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                {
                  _elem13 = iprot.readI32();
                  struct.QoIdArray.add(_elem13);
                }
                iprot.readListEnd();
              }
              struct.setQoIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NO_QO_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.NoQoIdArray = new ArrayList<Integer>(_list15.size);
                int _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readI32();
                  struct.NoQoIdArray.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setNoQoIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KeyWord = iprot.readString();
              struct.setKeyWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPLY_BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ReplyBody = iprot.readString();
              struct.setReplyBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAGS_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.TagsArray = new ArrayList<String>(_list18.size);
                String _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = iprot.readString();
                  struct.TagsArray.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setTagsArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAIN_BRAND_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.MainBrandIdArray = new ArrayList<Integer>(_list21.size);
                int _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = iprot.readI32();
                  struct.MainBrandIdArray.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setMainBrandIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BRAND_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.BrandIdArray = new ArrayList<Integer>(_list24.size);
                int _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readI32();
                  struct.BrandIdArray.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setBrandIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CATEGORIES_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.CategoriesArray = new ArrayList<String>(_list27.size);
                String _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readString();
                  struct.CategoriesArray.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setCategoriesArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CATEGORIES_GROUP_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.CategoriesGroupArray = new ArrayList<String>(_list30.size);
                String _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readString();
                  struct.CategoriesGroupArray.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setCategoriesGroupArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // AREA_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.AreaIdArray = new ArrayList<Integer>(_list33.size);
                int _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readI32();
                  struct.AreaIdArray.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setAreaIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MAX_REPLY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MaxReplyCount = iprot.readI32();
              struct.setMaxReplyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MIN_REPLY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MinReplyCount = iprot.readI32();
              struct.setMinReplyCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // MIN_VIEW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MinViewCount = iprot.readI32();
              struct.setMinViewCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // MAX_VIEW_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.MaxViewCount = iprot.readI32();
              struct.setMaxViewCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PROVINCE_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.ProvinceIdArray = new ArrayList<Integer>(_list36.size);
                int _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = iprot.readI32();
                  struct.ProvinceIdArray.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setProvinceIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CITY_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.CityIdArray = new ArrayList<Integer>(_list39.size);
                int _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = iprot.readI32();
                  struct.CityIdArray.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setCityIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // IS_SOLVE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
                struct.IsSolveArray = new ArrayList<Integer>(_list42.size);
                int _elem43;
                for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                {
                  _elem43 = iprot.readI32();
                  struct.IsSolveArray.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setIsSolveArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // CUT_LENGTH_FIELD_NAME_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list45 = iprot.readListBegin();
                struct.CutLengthFieldNameArray = new ArrayList<String>(_list45.size);
                String _elem46;
                for (int _i47 = 0; _i47 < _list45.size; ++_i47)
                {
                  _elem46 = iprot.readString();
                  struct.CutLengthFieldNameArray.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setCutLengthFieldNameArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // CUT_LENGTH_FIELD_VALUE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.CutLengthFieldValueArray = new ArrayList<Integer>(_list48.size);
                int _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = iprot.readI32();
                  struct.CutLengthFieldValueArray.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setCutLengthFieldValueArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchQuestionCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.QoIdArray != null) {
        oprot.writeFieldBegin(QO_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.QoIdArray.size()));
          for (int _iter51 : struct.QoIdArray)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.NoQoIdArray != null) {
        oprot.writeFieldBegin(NO_QO_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.NoQoIdArray.size()));
          for (int _iter52 : struct.NoQoIdArray)
          {
            oprot.writeI32(_iter52);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.KeyWord != null) {
        oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
        oprot.writeString(struct.KeyWord);
        oprot.writeFieldEnd();
      }
      if (struct.Title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.Title);
        oprot.writeFieldEnd();
      }
      if (struct.Body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.Body);
        oprot.writeFieldEnd();
      }
      if (struct.ReplyBody != null) {
        oprot.writeFieldBegin(REPLY_BODY_FIELD_DESC);
        oprot.writeString(struct.ReplyBody);
        oprot.writeFieldEnd();
      }
      if (struct.TagsArray != null) {
        oprot.writeFieldBegin(TAGS_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.TagsArray.size()));
          for (String _iter53 : struct.TagsArray)
          {
            oprot.writeString(_iter53);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MainBrandIdArray != null) {
        oprot.writeFieldBegin(MAIN_BRAND_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.MainBrandIdArray.size()));
          for (int _iter54 : struct.MainBrandIdArray)
          {
            oprot.writeI32(_iter54);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BrandIdArray != null) {
        oprot.writeFieldBegin(BRAND_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.BrandIdArray.size()));
          for (int _iter55 : struct.BrandIdArray)
          {
            oprot.writeI32(_iter55);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CategoriesArray != null) {
        oprot.writeFieldBegin(CATEGORIES_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.CategoriesArray.size()));
          for (String _iter56 : struct.CategoriesArray)
          {
            oprot.writeString(_iter56);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CategoriesGroupArray != null) {
        oprot.writeFieldBegin(CATEGORIES_GROUP_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.CategoriesGroupArray.size()));
          for (String _iter57 : struct.CategoriesGroupArray)
          {
            oprot.writeString(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.AreaIdArray != null) {
        oprot.writeFieldBegin(AREA_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.AreaIdArray.size()));
          for (int _iter58 : struct.AreaIdArray)
          {
            oprot.writeI32(_iter58);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_REPLY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.MaxReplyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_REPLY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.MinReplyCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_VIEW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.MinViewCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_VIEW_COUNT_FIELD_DESC);
      oprot.writeI32(struct.MaxViewCount);
      oprot.writeFieldEnd();
      if (struct.ProvinceIdArray != null) {
        oprot.writeFieldBegin(PROVINCE_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ProvinceIdArray.size()));
          for (int _iter59 : struct.ProvinceIdArray)
          {
            oprot.writeI32(_iter59);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CityIdArray != null) {
        oprot.writeFieldBegin(CITY_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CityIdArray.size()));
          for (int _iter60 : struct.CityIdArray)
          {
            oprot.writeI32(_iter60);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.IsSolveArray != null) {
        oprot.writeFieldBegin(IS_SOLVE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.IsSolveArray.size()));
          for (int _iter61 : struct.IsSolveArray)
          {
            oprot.writeI32(_iter61);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CutLengthFieldNameArray != null) {
        oprot.writeFieldBegin(CUT_LENGTH_FIELD_NAME_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.CutLengthFieldNameArray.size()));
          for (String _iter62 : struct.CutLengthFieldNameArray)
          {
            oprot.writeString(_iter62);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CutLengthFieldValueArray != null) {
        oprot.writeFieldBegin(CUT_LENGTH_FIELD_VALUE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CutLengthFieldValueArray.size()));
          for (int _iter63 : struct.CutLengthFieldValueArray)
          {
            oprot.writeI32(_iter63);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMMON_FLAG_FIELD_DESC);
      oprot.writeI32(struct.CommonFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.RequestSource);
      oprot.writeFieldEnd();
      if (struct.ReturnFieldArray != null) {
        oprot.writeFieldBegin(RETURN_FIELD_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ReturnFieldArray.size()));
          for (String _iter64 : struct.ReturnFieldArray)
          {
            oprot.writeString(_iter64);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OrderByFieldArray != null) {
        oprot.writeFieldBegin(ORDER_BY_FIELD_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.OrderByFieldArray.size()));
          for (String _iter65 : struct.OrderByFieldArray)
          {
            oprot.writeString(_iter65);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OrderByIsDESCArray != null) {
        oprot.writeFieldBegin(ORDER_BY_IS_DESCARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.OrderByIsDESCArray.size()));
          for (boolean _iter66 : struct.OrderByIsDESCArray)
          {
            oprot.writeBool(_iter66);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SORT_BOOST_FLAG_FIELD_DESC);
      oprot.writeI32(struct.SortBoostFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.PageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.PageIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_HIGHT_LIGHT_FIELD_DESC);
      oprot.writeBool(struct.IsHightLight);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_COUNT_SEARCH_FIELD_DESC);
      oprot.writeBool(struct.IsCountSearch);
      oprot.writeFieldEnd();
      if (struct.RequestParametersLog != null) {
        oprot.writeFieldBegin(REQUEST_PARAMETERS_LOG_FIELD_DESC);
        oprot.writeString(struct.RequestParametersLog);
        oprot.writeFieldEnd();
      }
      if (struct.AggrFieldList != null) {
        oprot.writeFieldBegin(AGGR_FIELD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AggrFieldList.size()));
          for (AggrCondition _iter67 : struct.AggrFieldList)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchQuestionConditionTupleSchemeFactory implements SchemeFactory {
    public SearchQuestionConditionTupleScheme getScheme() {
      return new SearchQuestionConditionTupleScheme();
    }
  }

  private static class SearchQuestionConditionTupleScheme extends TupleScheme<SearchQuestionCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchQuestionCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommonFlag()) {
        optionals.set(0);
      }
      if (struct.isSetRequestSource()) {
        optionals.set(1);
      }
      if (struct.isSetReturnFieldArray()) {
        optionals.set(2);
      }
      if (struct.isSetOrderByFieldArray()) {
        optionals.set(3);
      }
      if (struct.isSetOrderByIsDESCArray()) {
        optionals.set(4);
      }
      if (struct.isSetSortBoostFlag()) {
        optionals.set(5);
      }
      if (struct.isSetPageSize()) {
        optionals.set(6);
      }
      if (struct.isSetPageIndex()) {
        optionals.set(7);
      }
      if (struct.isSetIsHightLight()) {
        optionals.set(8);
      }
      if (struct.isSetIsCountSearch()) {
        optionals.set(9);
      }
      if (struct.isSetRequestParametersLog()) {
        optionals.set(10);
      }
      if (struct.isSetAggrFieldList()) {
        optionals.set(11);
      }
      if (struct.isSetQoIdArray()) {
        optionals.set(12);
      }
      if (struct.isSetNoQoIdArray()) {
        optionals.set(13);
      }
      if (struct.isSetKeyWord()) {
        optionals.set(14);
      }
      if (struct.isSetTitle()) {
        optionals.set(15);
      }
      if (struct.isSetBody()) {
        optionals.set(16);
      }
      if (struct.isSetReplyBody()) {
        optionals.set(17);
      }
      if (struct.isSetTagsArray()) {
        optionals.set(18);
      }
      if (struct.isSetMainBrandIdArray()) {
        optionals.set(19);
      }
      if (struct.isSetBrandIdArray()) {
        optionals.set(20);
      }
      if (struct.isSetCategoriesArray()) {
        optionals.set(21);
      }
      if (struct.isSetCategoriesGroupArray()) {
        optionals.set(22);
      }
      if (struct.isSetAreaIdArray()) {
        optionals.set(23);
      }
      if (struct.isSetMaxReplyCount()) {
        optionals.set(24);
      }
      if (struct.isSetMinReplyCount()) {
        optionals.set(25);
      }
      if (struct.isSetMinViewCount()) {
        optionals.set(26);
      }
      if (struct.isSetMaxViewCount()) {
        optionals.set(27);
      }
      if (struct.isSetProvinceIdArray()) {
        optionals.set(28);
      }
      if (struct.isSetCityIdArray()) {
        optionals.set(29);
      }
      if (struct.isSetIsSolveArray()) {
        optionals.set(30);
      }
      if (struct.isSetCutLengthFieldNameArray()) {
        optionals.set(31);
      }
      if (struct.isSetCutLengthFieldValueArray()) {
        optionals.set(32);
      }
      oprot.writeBitSet(optionals, 33);
      if (struct.isSetCommonFlag()) {
        oprot.writeI32(struct.CommonFlag);
      }
      if (struct.isSetRequestSource()) {
        oprot.writeI32(struct.RequestSource);
      }
      if (struct.isSetReturnFieldArray()) {
        {
          oprot.writeI32(struct.ReturnFieldArray.size());
          for (String _iter68 : struct.ReturnFieldArray)
          {
            oprot.writeString(_iter68);
          }
        }
      }
      if (struct.isSetOrderByFieldArray()) {
        {
          oprot.writeI32(struct.OrderByFieldArray.size());
          for (String _iter69 : struct.OrderByFieldArray)
          {
            oprot.writeString(_iter69);
          }
        }
      }
      if (struct.isSetOrderByIsDESCArray()) {
        {
          oprot.writeI32(struct.OrderByIsDESCArray.size());
          for (boolean _iter70 : struct.OrderByIsDESCArray)
          {
            oprot.writeBool(_iter70);
          }
        }
      }
      if (struct.isSetSortBoostFlag()) {
        oprot.writeI32(struct.SortBoostFlag);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.PageSize);
      }
      if (struct.isSetPageIndex()) {
        oprot.writeI32(struct.PageIndex);
      }
      if (struct.isSetIsHightLight()) {
        oprot.writeBool(struct.IsHightLight);
      }
      if (struct.isSetIsCountSearch()) {
        oprot.writeBool(struct.IsCountSearch);
      }
      if (struct.isSetRequestParametersLog()) {
        oprot.writeString(struct.RequestParametersLog);
      }
      if (struct.isSetAggrFieldList()) {
        {
          oprot.writeI32(struct.AggrFieldList.size());
          for (AggrCondition _iter71 : struct.AggrFieldList)
          {
            _iter71.write(oprot);
          }
        }
      }
      if (struct.isSetQoIdArray()) {
        {
          oprot.writeI32(struct.QoIdArray.size());
          for (int _iter72 : struct.QoIdArray)
          {
            oprot.writeI32(_iter72);
          }
        }
      }
      if (struct.isSetNoQoIdArray()) {
        {
          oprot.writeI32(struct.NoQoIdArray.size());
          for (int _iter73 : struct.NoQoIdArray)
          {
            oprot.writeI32(_iter73);
          }
        }
      }
      if (struct.isSetKeyWord()) {
        oprot.writeString(struct.KeyWord);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.Title);
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.Body);
      }
      if (struct.isSetReplyBody()) {
        oprot.writeString(struct.ReplyBody);
      }
      if (struct.isSetTagsArray()) {
        {
          oprot.writeI32(struct.TagsArray.size());
          for (String _iter74 : struct.TagsArray)
          {
            oprot.writeString(_iter74);
          }
        }
      }
      if (struct.isSetMainBrandIdArray()) {
        {
          oprot.writeI32(struct.MainBrandIdArray.size());
          for (int _iter75 : struct.MainBrandIdArray)
          {
            oprot.writeI32(_iter75);
          }
        }
      }
      if (struct.isSetBrandIdArray()) {
        {
          oprot.writeI32(struct.BrandIdArray.size());
          for (int _iter76 : struct.BrandIdArray)
          {
            oprot.writeI32(_iter76);
          }
        }
      }
      if (struct.isSetCategoriesArray()) {
        {
          oprot.writeI32(struct.CategoriesArray.size());
          for (String _iter77 : struct.CategoriesArray)
          {
            oprot.writeString(_iter77);
          }
        }
      }
      if (struct.isSetCategoriesGroupArray()) {
        {
          oprot.writeI32(struct.CategoriesGroupArray.size());
          for (String _iter78 : struct.CategoriesGroupArray)
          {
            oprot.writeString(_iter78);
          }
        }
      }
      if (struct.isSetAreaIdArray()) {
        {
          oprot.writeI32(struct.AreaIdArray.size());
          for (int _iter79 : struct.AreaIdArray)
          {
            oprot.writeI32(_iter79);
          }
        }
      }
      if (struct.isSetMaxReplyCount()) {
        oprot.writeI32(struct.MaxReplyCount);
      }
      if (struct.isSetMinReplyCount()) {
        oprot.writeI32(struct.MinReplyCount);
      }
      if (struct.isSetMinViewCount()) {
        oprot.writeI32(struct.MinViewCount);
      }
      if (struct.isSetMaxViewCount()) {
        oprot.writeI32(struct.MaxViewCount);
      }
      if (struct.isSetProvinceIdArray()) {
        {
          oprot.writeI32(struct.ProvinceIdArray.size());
          for (int _iter80 : struct.ProvinceIdArray)
          {
            oprot.writeI32(_iter80);
          }
        }
      }
      if (struct.isSetCityIdArray()) {
        {
          oprot.writeI32(struct.CityIdArray.size());
          for (int _iter81 : struct.CityIdArray)
          {
            oprot.writeI32(_iter81);
          }
        }
      }
      if (struct.isSetIsSolveArray()) {
        {
          oprot.writeI32(struct.IsSolveArray.size());
          for (int _iter82 : struct.IsSolveArray)
          {
            oprot.writeI32(_iter82);
          }
        }
      }
      if (struct.isSetCutLengthFieldNameArray()) {
        {
          oprot.writeI32(struct.CutLengthFieldNameArray.size());
          for (String _iter83 : struct.CutLengthFieldNameArray)
          {
            oprot.writeString(_iter83);
          }
        }
      }
      if (struct.isSetCutLengthFieldValueArray()) {
        {
          oprot.writeI32(struct.CutLengthFieldValueArray.size());
          for (int _iter84 : struct.CutLengthFieldValueArray)
          {
            oprot.writeI32(_iter84);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchQuestionCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(33);
      if (incoming.get(0)) {
        struct.CommonFlag = iprot.readI32();
        struct.setCommonFlagIsSet(true);
      }
      if (incoming.get(1)) {
        struct.RequestSource = iprot.readI32();
        struct.setRequestSourceIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ReturnFieldArray = new ArrayList<String>(_list85.size);
          String _elem86;
          for (int _i87 = 0; _i87 < _list85.size; ++_i87)
          {
            _elem86 = iprot.readString();
            struct.ReturnFieldArray.add(_elem86);
          }
        }
        struct.setReturnFieldArrayIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list88 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.OrderByFieldArray = new ArrayList<String>(_list88.size);
          String _elem89;
          for (int _i90 = 0; _i90 < _list88.size; ++_i90)
          {
            _elem89 = iprot.readString();
            struct.OrderByFieldArray.add(_elem89);
          }
        }
        struct.setOrderByFieldArrayIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.OrderByIsDESCArray = new ArrayList<Boolean>(_list91.size);
          boolean _elem92;
          for (int _i93 = 0; _i93 < _list91.size; ++_i93)
          {
            _elem92 = iprot.readBool();
            struct.OrderByIsDESCArray.add(_elem92);
          }
        }
        struct.setOrderByIsDESCArrayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.SortBoostFlag = iprot.readI32();
        struct.setSortBoostFlagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.PageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.PageIndex = iprot.readI32();
        struct.setPageIndexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.IsHightLight = iprot.readBool();
        struct.setIsHightLightIsSet(true);
      }
      if (incoming.get(9)) {
        struct.IsCountSearch = iprot.readBool();
        struct.setIsCountSearchIsSet(true);
      }
      if (incoming.get(10)) {
        struct.RequestParametersLog = iprot.readString();
        struct.setRequestParametersLogIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list94 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AggrFieldList = new ArrayList<AggrCondition>(_list94.size);
          AggrCondition _elem95;
          for (int _i96 = 0; _i96 < _list94.size; ++_i96)
          {
            _elem95 = new AggrCondition();
            _elem95.read(iprot);
            struct.AggrFieldList.add(_elem95);
          }
        }
        struct.setAggrFieldListIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list97 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.QoIdArray = new ArrayList<Integer>(_list97.size);
          int _elem98;
          for (int _i99 = 0; _i99 < _list97.size; ++_i99)
          {
            _elem98 = iprot.readI32();
            struct.QoIdArray.add(_elem98);
          }
        }
        struct.setQoIdArrayIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list100 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.NoQoIdArray = new ArrayList<Integer>(_list100.size);
          int _elem101;
          for (int _i102 = 0; _i102 < _list100.size; ++_i102)
          {
            _elem101 = iprot.readI32();
            struct.NoQoIdArray.add(_elem101);
          }
        }
        struct.setNoQoIdArrayIsSet(true);
      }
      if (incoming.get(14)) {
        struct.KeyWord = iprot.readString();
        struct.setKeyWordIsSet(true);
      }
      if (incoming.get(15)) {
        struct.Title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(16)) {
        struct.Body = iprot.readString();
        struct.setBodyIsSet(true);
      }
      if (incoming.get(17)) {
        struct.ReplyBody = iprot.readString();
        struct.setReplyBodyIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.TagsArray = new ArrayList<String>(_list103.size);
          String _elem104;
          for (int _i105 = 0; _i105 < _list103.size; ++_i105)
          {
            _elem104 = iprot.readString();
            struct.TagsArray.add(_elem104);
          }
        }
        struct.setTagsArrayIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.MainBrandIdArray = new ArrayList<Integer>(_list106.size);
          int _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = iprot.readI32();
            struct.MainBrandIdArray.add(_elem107);
          }
        }
        struct.setMainBrandIdArrayIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.BrandIdArray = new ArrayList<Integer>(_list109.size);
          int _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = iprot.readI32();
            struct.BrandIdArray.add(_elem110);
          }
        }
        struct.setBrandIdArrayIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list112 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.CategoriesArray = new ArrayList<String>(_list112.size);
          String _elem113;
          for (int _i114 = 0; _i114 < _list112.size; ++_i114)
          {
            _elem113 = iprot.readString();
            struct.CategoriesArray.add(_elem113);
          }
        }
        struct.setCategoriesArrayIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.CategoriesGroupArray = new ArrayList<String>(_list115.size);
          String _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = iprot.readString();
            struct.CategoriesGroupArray.add(_elem116);
          }
        }
        struct.setCategoriesGroupArrayIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list118 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.AreaIdArray = new ArrayList<Integer>(_list118.size);
          int _elem119;
          for (int _i120 = 0; _i120 < _list118.size; ++_i120)
          {
            _elem119 = iprot.readI32();
            struct.AreaIdArray.add(_elem119);
          }
        }
        struct.setAreaIdArrayIsSet(true);
      }
      if (incoming.get(24)) {
        struct.MaxReplyCount = iprot.readI32();
        struct.setMaxReplyCountIsSet(true);
      }
      if (incoming.get(25)) {
        struct.MinReplyCount = iprot.readI32();
        struct.setMinReplyCountIsSet(true);
      }
      if (incoming.get(26)) {
        struct.MinViewCount = iprot.readI32();
        struct.setMinViewCountIsSet(true);
      }
      if (incoming.get(27)) {
        struct.MaxViewCount = iprot.readI32();
        struct.setMaxViewCountIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.ProvinceIdArray = new ArrayList<Integer>(_list121.size);
          int _elem122;
          for (int _i123 = 0; _i123 < _list121.size; ++_i123)
          {
            _elem122 = iprot.readI32();
            struct.ProvinceIdArray.add(_elem122);
          }
        }
        struct.setProvinceIdArrayIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CityIdArray = new ArrayList<Integer>(_list124.size);
          int _elem125;
          for (int _i126 = 0; _i126 < _list124.size; ++_i126)
          {
            _elem125 = iprot.readI32();
            struct.CityIdArray.add(_elem125);
          }
        }
        struct.setCityIdArrayIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.IsSolveArray = new ArrayList<Integer>(_list127.size);
          int _elem128;
          for (int _i129 = 0; _i129 < _list127.size; ++_i129)
          {
            _elem128 = iprot.readI32();
            struct.IsSolveArray.add(_elem128);
          }
        }
        struct.setIsSolveArrayIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list130 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.CutLengthFieldNameArray = new ArrayList<String>(_list130.size);
          String _elem131;
          for (int _i132 = 0; _i132 < _list130.size; ++_i132)
          {
            _elem131 = iprot.readString();
            struct.CutLengthFieldNameArray.add(_elem131);
          }
        }
        struct.setCutLengthFieldNameArrayIsSet(true);
      }
      if (incoming.get(32)) {
        {
          org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CutLengthFieldValueArray = new ArrayList<Integer>(_list133.size);
          int _elem134;
          for (int _i135 = 0; _i135 < _list133.size; ++_i135)
          {
            _elem134 = iprot.readI32();
            struct.CutLengthFieldValueArray.add(_elem134);
          }
        }
        struct.setCutLengthFieldValueArrayIsSet(true);
      }
    }
  }

}

