/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class AggrFieldResultItem implements org.apache.thrift.TBase<AggrFieldResultItem, AggrFieldResultItem._Fields>, java.io.Serializable, Cloneable, Comparable<AggrFieldResultItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AggrFieldResultItem");

  private static final org.apache.thrift.protocol.TField TERM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("TermName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("Count", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("Min", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("Max", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("Total", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("Mean", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AggrFieldResultItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AggrFieldResultItemTupleSchemeFactory());
  }

  public String TermName; // required
  public int Count; // required
  public double Min; // required
  public double Max; // required
  public double Total; // required
  public double Mean; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TERM_NAME((short)1, "TermName"),
    COUNT((short)2, "Count"),
    MIN((short)3, "Min"),
    MAX((short)4, "Max"),
    TOTAL((short)5, "Total"),
    MEAN((short)6, "Mean");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERM_NAME
          return TERM_NAME;
        case 2: // COUNT
          return COUNT;
        case 3: // MIN
          return MIN;
        case 4: // MAX
          return MAX;
        case 5: // TOTAL
          return TOTAL;
        case 6: // MEAN
          return MEAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __MIN_ISSET_ID = 1;
  private static final int __MAX_ISSET_ID = 2;
  private static final int __TOTAL_ISSET_ID = 3;
  private static final int __MEAN_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERM_NAME, new org.apache.thrift.meta_data.FieldMetaData("TermName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("Count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("Min", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX, new org.apache.thrift.meta_data.FieldMetaData("Max", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("Total", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MEAN, new org.apache.thrift.meta_data.FieldMetaData("Mean", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AggrFieldResultItem.class, metaDataMap);
  }

  public AggrFieldResultItem() {
  }

  public AggrFieldResultItem(
    String TermName,
    int Count,
    double Min,
    double Max,
    double Total,
    double Mean)
  {
    this();
    this.TermName = TermName;
    this.Count = Count;
    setCountIsSet(true);
    this.Min = Min;
    setMinIsSet(true);
    this.Max = Max;
    setMaxIsSet(true);
    this.Total = Total;
    setTotalIsSet(true);
    this.Mean = Mean;
    setMeanIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AggrFieldResultItem(AggrFieldResultItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTermName()) {
      this.TermName = other.TermName;
    }
    this.Count = other.Count;
    this.Min = other.Min;
    this.Max = other.Max;
    this.Total = other.Total;
    this.Mean = other.Mean;
  }

  public AggrFieldResultItem deepCopy() {
    return new AggrFieldResultItem(this);
  }

  @Override
  public void clear() {
    this.TermName = null;
    setCountIsSet(false);
    this.Count = 0;
    setMinIsSet(false);
    this.Min = 0.0;
    setMaxIsSet(false);
    this.Max = 0.0;
    setTotalIsSet(false);
    this.Total = 0.0;
    setMeanIsSet(false);
    this.Mean = 0.0;
  }

  public String getTermName() {
    return this.TermName;
  }

  public AggrFieldResultItem setTermName(String TermName) {
    this.TermName = TermName;
    return this;
  }

  public void unsetTermName() {
    this.TermName = null;
  }

  /** Returns true if field TermName is set (has been assigned a value) and false otherwise */
  public boolean isSetTermName() {
    return this.TermName != null;
  }

  public void setTermNameIsSet(boolean value) {
    if (!value) {
      this.TermName = null;
    }
  }

  public int getCount() {
    return this.Count;
  }

  public AggrFieldResultItem setCount(int Count) {
    this.Count = Count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field Count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public double getMin() {
    return this.Min;
  }

  public AggrFieldResultItem setMin(double Min) {
    this.Min = Min;
    setMinIsSet(true);
    return this;
  }

  public void unsetMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field Min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public double getMax() {
    return this.Max;
  }

  public AggrFieldResultItem setMax(double Max) {
    this.Max = Max;
    setMaxIsSet(true);
    return this;
  }

  public void unsetMax() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  /** Returns true if field Max is set (has been assigned a value) and false otherwise */
  public boolean isSetMax() {
    return EncodingUtils.testBit(__isset_bitfield, __MAX_ISSET_ID);
  }

  public void setMaxIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_ISSET_ID, value);
  }

  public double getTotal() {
    return this.Total;
  }

  public AggrFieldResultItem setTotal(double Total) {
    this.Total = Total;
    setTotalIsSet(true);
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field Total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public double getMean() {
    return this.Mean;
  }

  public AggrFieldResultItem setMean(double Mean) {
    this.Mean = Mean;
    setMeanIsSet(true);
    return this;
  }

  public void unsetMean() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEAN_ISSET_ID);
  }

  /** Returns true if field Mean is set (has been assigned a value) and false otherwise */
  public boolean isSetMean() {
    return EncodingUtils.testBit(__isset_bitfield, __MEAN_ISSET_ID);
  }

  public void setMeanIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEAN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TERM_NAME:
      if (value == null) {
        unsetTermName();
      } else {
        setTermName((String)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Integer)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Double)value);
      }
      break;

    case MAX:
      if (value == null) {
        unsetMax();
      } else {
        setMax((Double)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Double)value);
      }
      break;

    case MEAN:
      if (value == null) {
        unsetMean();
      } else {
        setMean((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TERM_NAME:
      return getTermName();

    case COUNT:
      return getCount();

    case MIN:
      return getMin();

    case MAX:
      return getMax();

    case TOTAL:
      return getTotal();

    case MEAN:
      return getMean();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TERM_NAME:
      return isSetTermName();
    case COUNT:
      return isSetCount();
    case MIN:
      return isSetMin();
    case MAX:
      return isSetMax();
    case TOTAL:
      return isSetTotal();
    case MEAN:
      return isSetMean();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AggrFieldResultItem)
      return this.equals((AggrFieldResultItem)that);
    return false;
  }

  public boolean equals(AggrFieldResultItem that) {
    if (that == null)
      return false;

    boolean this_present_TermName = true && this.isSetTermName();
    boolean that_present_TermName = true && that.isSetTermName();
    if (this_present_TermName || that_present_TermName) {
      if (!(this_present_TermName && that_present_TermName))
        return false;
      if (!this.TermName.equals(that.TermName))
        return false;
    }

    boolean this_present_Count = true;
    boolean that_present_Count = true;
    if (this_present_Count || that_present_Count) {
      if (!(this_present_Count && that_present_Count))
        return false;
      if (this.Count != that.Count)
        return false;
    }

    boolean this_present_Min = true;
    boolean that_present_Min = true;
    if (this_present_Min || that_present_Min) {
      if (!(this_present_Min && that_present_Min))
        return false;
      if (this.Min != that.Min)
        return false;
    }

    boolean this_present_Max = true;
    boolean that_present_Max = true;
    if (this_present_Max || that_present_Max) {
      if (!(this_present_Max && that_present_Max))
        return false;
      if (this.Max != that.Max)
        return false;
    }

    boolean this_present_Total = true;
    boolean that_present_Total = true;
    if (this_present_Total || that_present_Total) {
      if (!(this_present_Total && that_present_Total))
        return false;
      if (this.Total != that.Total)
        return false;
    }

    boolean this_present_Mean = true;
    boolean that_present_Mean = true;
    if (this_present_Mean || that_present_Mean) {
      if (!(this_present_Mean && that_present_Mean))
        return false;
      if (this.Mean != that.Mean)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_TermName = true && (isSetTermName());
    list.add(present_TermName);
    if (present_TermName)
      list.add(TermName);

    boolean present_Count = true;
    list.add(present_Count);
    if (present_Count)
      list.add(Count);

    boolean present_Min = true;
    list.add(present_Min);
    if (present_Min)
      list.add(Min);

    boolean present_Max = true;
    list.add(present_Max);
    if (present_Max)
      list.add(Max);

    boolean present_Total = true;
    list.add(present_Total);
    if (present_Total)
      list.add(Total);

    boolean present_Mean = true;
    list.add(present_Mean);
    if (present_Mean)
      list.add(Mean);

    return list.hashCode();
  }

  @Override
  public int compareTo(AggrFieldResultItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTermName()).compareTo(other.isSetTermName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTermName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TermName, other.TermName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Count, other.Count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Min, other.Min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMax()).compareTo(other.isSetMax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Max, other.Max);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Total, other.Total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMean()).compareTo(other.isSetMean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Mean, other.Mean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AggrFieldResultItem(");
    boolean first = true;

    sb.append("TermName:");
    if (this.TermName == null) {
      sb.append("null");
    } else {
      sb.append(this.TermName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Count:");
    sb.append(this.Count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Min:");
    sb.append(this.Min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Max:");
    sb.append(this.Max);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Total:");
    sb.append(this.Total);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Mean:");
    sb.append(this.Mean);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AggrFieldResultItemStandardSchemeFactory implements SchemeFactory {
    public AggrFieldResultItemStandardScheme getScheme() {
      return new AggrFieldResultItemStandardScheme();
    }
  }

  private static class AggrFieldResultItemStandardScheme extends StandardScheme<AggrFieldResultItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AggrFieldResultItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TERM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.TermName = iprot.readString();
              struct.setTermNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Min = iprot.readDouble();
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Max = iprot.readDouble();
              struct.setMaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Total = iprot.readDouble();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.Mean = iprot.readDouble();
              struct.setMeanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AggrFieldResultItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.TermName != null) {
        oprot.writeFieldBegin(TERM_NAME_FIELD_DESC);
        oprot.writeString(struct.TermName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.Count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      oprot.writeDouble(struct.Min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FIELD_DESC);
      oprot.writeDouble(struct.Max);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_FIELD_DESC);
      oprot.writeDouble(struct.Total);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEAN_FIELD_DESC);
      oprot.writeDouble(struct.Mean);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AggrFieldResultItemTupleSchemeFactory implements SchemeFactory {
    public AggrFieldResultItemTupleScheme getScheme() {
      return new AggrFieldResultItemTupleScheme();
    }
  }

  private static class AggrFieldResultItemTupleScheme extends TupleScheme<AggrFieldResultItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AggrFieldResultItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTermName()) {
        optionals.set(0);
      }
      if (struct.isSetCount()) {
        optionals.set(1);
      }
      if (struct.isSetMin()) {
        optionals.set(2);
      }
      if (struct.isSetMax()) {
        optionals.set(3);
      }
      if (struct.isSetTotal()) {
        optionals.set(4);
      }
      if (struct.isSetMean()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTermName()) {
        oprot.writeString(struct.TermName);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.Count);
      }
      if (struct.isSetMin()) {
        oprot.writeDouble(struct.Min);
      }
      if (struct.isSetMax()) {
        oprot.writeDouble(struct.Max);
      }
      if (struct.isSetTotal()) {
        oprot.writeDouble(struct.Total);
      }
      if (struct.isSetMean()) {
        oprot.writeDouble(struct.Mean);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AggrFieldResultItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.TermName = iprot.readString();
        struct.setTermNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Min = iprot.readDouble();
        struct.setMinIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Max = iprot.readDouble();
        struct.setMaxIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Total = iprot.readDouble();
        struct.setTotalIsSet(true);
      }
      if (incoming.get(5)) {
        struct.Mean = iprot.readDouble();
        struct.setMeanIsSet(true);
      }
    }
  }

}

