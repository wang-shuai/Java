/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class AggrCondition implements org.apache.thrift.TBase<AggrCondition, AggrCondition._Fields>, java.io.Serializable, Cloneable, Comparable<AggrCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AggrCondition");

  private static final org.apache.thrift.protocol.TField FIELD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("FieldName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOP_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("TopNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField AGGREGATION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("AggregationType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RANGE_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("RangeConfig", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_KEY_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("SubKeyField", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_VALUE_FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("SubValueField", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AggrConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AggrConditionTupleSchemeFactory());
  }

  public String FieldName; // required
  public int TopNumber; // required
  public int AggregationType; // required
  public String RangeConfig; // required
  public String SubKeyField; // required
  public String SubValueField; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD_NAME((short)1, "FieldName"),
    TOP_NUMBER((short)2, "TopNumber"),
    AGGREGATION_TYPE((short)3, "AggregationType"),
    RANGE_CONFIG((short)4, "RangeConfig"),
    SUB_KEY_FIELD((short)5, "SubKeyField"),
    SUB_VALUE_FIELD((short)6, "SubValueField");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD_NAME
          return FIELD_NAME;
        case 2: // TOP_NUMBER
          return TOP_NUMBER;
        case 3: // AGGREGATION_TYPE
          return AGGREGATION_TYPE;
        case 4: // RANGE_CONFIG
          return RANGE_CONFIG;
        case 5: // SUB_KEY_FIELD
          return SUB_KEY_FIELD;
        case 6: // SUB_VALUE_FIELD
          return SUB_VALUE_FIELD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOPNUMBER_ISSET_ID = 0;
  private static final int __AGGREGATIONTYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD_NAME, new org.apache.thrift.meta_data.FieldMetaData("FieldName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOP_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("TopNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGGREGATION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("AggregationType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANGE_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("RangeConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_KEY_FIELD, new org.apache.thrift.meta_data.FieldMetaData("SubKeyField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_VALUE_FIELD, new org.apache.thrift.meta_data.FieldMetaData("SubValueField", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AggrCondition.class, metaDataMap);
  }

  public AggrCondition() {
  }

  public AggrCondition(
    String FieldName,
    int TopNumber,
    int AggregationType,
    String RangeConfig,
    String SubKeyField,
    String SubValueField)
  {
    this();
    this.FieldName = FieldName;
    this.TopNumber = TopNumber;
    setTopNumberIsSet(true);
    this.AggregationType = AggregationType;
    setAggregationTypeIsSet(true);
    this.RangeConfig = RangeConfig;
    this.SubKeyField = SubKeyField;
    this.SubValueField = SubValueField;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AggrCondition(AggrCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFieldName()) {
      this.FieldName = other.FieldName;
    }
    this.TopNumber = other.TopNumber;
    this.AggregationType = other.AggregationType;
    if (other.isSetRangeConfig()) {
      this.RangeConfig = other.RangeConfig;
    }
    if (other.isSetSubKeyField()) {
      this.SubKeyField = other.SubKeyField;
    }
    if (other.isSetSubValueField()) {
      this.SubValueField = other.SubValueField;
    }
  }

  public AggrCondition deepCopy() {
    return new AggrCondition(this);
  }

  @Override
  public void clear() {
    this.FieldName = null;
    setTopNumberIsSet(false);
    this.TopNumber = 0;
    setAggregationTypeIsSet(false);
    this.AggregationType = 0;
    this.RangeConfig = null;
    this.SubKeyField = null;
    this.SubValueField = null;
  }

  public String getFieldName() {
    return this.FieldName;
  }

  public AggrCondition setFieldName(String FieldName) {
    this.FieldName = FieldName;
    return this;
  }

  public void unsetFieldName() {
    this.FieldName = null;
  }

  /** Returns true if field FieldName is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldName() {
    return this.FieldName != null;
  }

  public void setFieldNameIsSet(boolean value) {
    if (!value) {
      this.FieldName = null;
    }
  }

  public int getTopNumber() {
    return this.TopNumber;
  }

  public AggrCondition setTopNumber(int TopNumber) {
    this.TopNumber = TopNumber;
    setTopNumberIsSet(true);
    return this;
  }

  public void unsetTopNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPNUMBER_ISSET_ID);
  }

  /** Returns true if field TopNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTopNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOPNUMBER_ISSET_ID);
  }

  public void setTopNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPNUMBER_ISSET_ID, value);
  }

  public int getAggregationType() {
    return this.AggregationType;
  }

  public AggrCondition setAggregationType(int AggregationType) {
    this.AggregationType = AggregationType;
    setAggregationTypeIsSet(true);
    return this;
  }

  public void unsetAggregationType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
  }

  /** Returns true if field AggregationType is set (has been assigned a value) and false otherwise */
  public boolean isSetAggregationType() {
    return EncodingUtils.testBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID);
  }

  public void setAggregationTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGGREGATIONTYPE_ISSET_ID, value);
  }

  public String getRangeConfig() {
    return this.RangeConfig;
  }

  public AggrCondition setRangeConfig(String RangeConfig) {
    this.RangeConfig = RangeConfig;
    return this;
  }

  public void unsetRangeConfig() {
    this.RangeConfig = null;
  }

  /** Returns true if field RangeConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetRangeConfig() {
    return this.RangeConfig != null;
  }

  public void setRangeConfigIsSet(boolean value) {
    if (!value) {
      this.RangeConfig = null;
    }
  }

  public String getSubKeyField() {
    return this.SubKeyField;
  }

  public AggrCondition setSubKeyField(String SubKeyField) {
    this.SubKeyField = SubKeyField;
    return this;
  }

  public void unsetSubKeyField() {
    this.SubKeyField = null;
  }

  /** Returns true if field SubKeyField is set (has been assigned a value) and false otherwise */
  public boolean isSetSubKeyField() {
    return this.SubKeyField != null;
  }

  public void setSubKeyFieldIsSet(boolean value) {
    if (!value) {
      this.SubKeyField = null;
    }
  }

  public String getSubValueField() {
    return this.SubValueField;
  }

  public AggrCondition setSubValueField(String SubValueField) {
    this.SubValueField = SubValueField;
    return this;
  }

  public void unsetSubValueField() {
    this.SubValueField = null;
  }

  /** Returns true if field SubValueField is set (has been assigned a value) and false otherwise */
  public boolean isSetSubValueField() {
    return this.SubValueField != null;
  }

  public void setSubValueFieldIsSet(boolean value) {
    if (!value) {
      this.SubValueField = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FIELD_NAME:
      if (value == null) {
        unsetFieldName();
      } else {
        setFieldName((String)value);
      }
      break;

    case TOP_NUMBER:
      if (value == null) {
        unsetTopNumber();
      } else {
        setTopNumber((Integer)value);
      }
      break;

    case AGGREGATION_TYPE:
      if (value == null) {
        unsetAggregationType();
      } else {
        setAggregationType((Integer)value);
      }
      break;

    case RANGE_CONFIG:
      if (value == null) {
        unsetRangeConfig();
      } else {
        setRangeConfig((String)value);
      }
      break;

    case SUB_KEY_FIELD:
      if (value == null) {
        unsetSubKeyField();
      } else {
        setSubKeyField((String)value);
      }
      break;

    case SUB_VALUE_FIELD:
      if (value == null) {
        unsetSubValueField();
      } else {
        setSubValueField((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD_NAME:
      return getFieldName();

    case TOP_NUMBER:
      return getTopNumber();

    case AGGREGATION_TYPE:
      return getAggregationType();

    case RANGE_CONFIG:
      return getRangeConfig();

    case SUB_KEY_FIELD:
      return getSubKeyField();

    case SUB_VALUE_FIELD:
      return getSubValueField();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FIELD_NAME:
      return isSetFieldName();
    case TOP_NUMBER:
      return isSetTopNumber();
    case AGGREGATION_TYPE:
      return isSetAggregationType();
    case RANGE_CONFIG:
      return isSetRangeConfig();
    case SUB_KEY_FIELD:
      return isSetSubKeyField();
    case SUB_VALUE_FIELD:
      return isSetSubValueField();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AggrCondition)
      return this.equals((AggrCondition)that);
    return false;
  }

  public boolean equals(AggrCondition that) {
    if (that == null)
      return false;

    boolean this_present_FieldName = true && this.isSetFieldName();
    boolean that_present_FieldName = true && that.isSetFieldName();
    if (this_present_FieldName || that_present_FieldName) {
      if (!(this_present_FieldName && that_present_FieldName))
        return false;
      if (!this.FieldName.equals(that.FieldName))
        return false;
    }

    boolean this_present_TopNumber = true;
    boolean that_present_TopNumber = true;
    if (this_present_TopNumber || that_present_TopNumber) {
      if (!(this_present_TopNumber && that_present_TopNumber))
        return false;
      if (this.TopNumber != that.TopNumber)
        return false;
    }

    boolean this_present_AggregationType = true;
    boolean that_present_AggregationType = true;
    if (this_present_AggregationType || that_present_AggregationType) {
      if (!(this_present_AggregationType && that_present_AggregationType))
        return false;
      if (this.AggregationType != that.AggregationType)
        return false;
    }

    boolean this_present_RangeConfig = true && this.isSetRangeConfig();
    boolean that_present_RangeConfig = true && that.isSetRangeConfig();
    if (this_present_RangeConfig || that_present_RangeConfig) {
      if (!(this_present_RangeConfig && that_present_RangeConfig))
        return false;
      if (!this.RangeConfig.equals(that.RangeConfig))
        return false;
    }

    boolean this_present_SubKeyField = true && this.isSetSubKeyField();
    boolean that_present_SubKeyField = true && that.isSetSubKeyField();
    if (this_present_SubKeyField || that_present_SubKeyField) {
      if (!(this_present_SubKeyField && that_present_SubKeyField))
        return false;
      if (!this.SubKeyField.equals(that.SubKeyField))
        return false;
    }

    boolean this_present_SubValueField = true && this.isSetSubValueField();
    boolean that_present_SubValueField = true && that.isSetSubValueField();
    if (this_present_SubValueField || that_present_SubValueField) {
      if (!(this_present_SubValueField && that_present_SubValueField))
        return false;
      if (!this.SubValueField.equals(that.SubValueField))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_FieldName = true && (isSetFieldName());
    list.add(present_FieldName);
    if (present_FieldName)
      list.add(FieldName);

    boolean present_TopNumber = true;
    list.add(present_TopNumber);
    if (present_TopNumber)
      list.add(TopNumber);

    boolean present_AggregationType = true;
    list.add(present_AggregationType);
    if (present_AggregationType)
      list.add(AggregationType);

    boolean present_RangeConfig = true && (isSetRangeConfig());
    list.add(present_RangeConfig);
    if (present_RangeConfig)
      list.add(RangeConfig);

    boolean present_SubKeyField = true && (isSetSubKeyField());
    list.add(present_SubKeyField);
    if (present_SubKeyField)
      list.add(SubKeyField);

    boolean present_SubValueField = true && (isSetSubValueField());
    list.add(present_SubValueField);
    if (present_SubValueField)
      list.add(SubValueField);

    return list.hashCode();
  }

  @Override
  public int compareTo(AggrCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFieldName()).compareTo(other.isSetFieldName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.FieldName, other.FieldName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopNumber()).compareTo(other.isSetTopNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TopNumber, other.TopNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggregationType()).compareTo(other.isSetAggregationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggregationType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AggregationType, other.AggregationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRangeConfig()).compareTo(other.isSetRangeConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRangeConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RangeConfig, other.RangeConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubKeyField()).compareTo(other.isSetSubKeyField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubKeyField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubKeyField, other.SubKeyField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubValueField()).compareTo(other.isSetSubValueField());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubValueField()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SubValueField, other.SubValueField);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AggrCondition(");
    boolean first = true;

    sb.append("FieldName:");
    if (this.FieldName == null) {
      sb.append("null");
    } else {
      sb.append(this.FieldName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TopNumber:");
    sb.append(this.TopNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("AggregationType:");
    sb.append(this.AggregationType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RangeConfig:");
    if (this.RangeConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.RangeConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubKeyField:");
    if (this.SubKeyField == null) {
      sb.append("null");
    } else {
      sb.append(this.SubKeyField);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SubValueField:");
    if (this.SubValueField == null) {
      sb.append("null");
    } else {
      sb.append(this.SubValueField);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AggrConditionStandardSchemeFactory implements SchemeFactory {
    public AggrConditionStandardScheme getScheme() {
      return new AggrConditionStandardScheme();
    }
  }

  private static class AggrConditionStandardScheme extends StandardScheme<AggrCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AggrCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.FieldName = iprot.readString();
              struct.setFieldNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOP_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.TopNumber = iprot.readI32();
              struct.setTopNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGGREGATION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.AggregationType = iprot.readI32();
              struct.setAggregationTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANGE_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RangeConfig = iprot.readString();
              struct.setRangeConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_KEY_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SubKeyField = iprot.readString();
              struct.setSubKeyFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_VALUE_FIELD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.SubValueField = iprot.readString();
              struct.setSubValueFieldIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AggrCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.FieldName != null) {
        oprot.writeFieldBegin(FIELD_NAME_FIELD_DESC);
        oprot.writeString(struct.FieldName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOP_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.TopNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGGREGATION_TYPE_FIELD_DESC);
      oprot.writeI32(struct.AggregationType);
      oprot.writeFieldEnd();
      if (struct.RangeConfig != null) {
        oprot.writeFieldBegin(RANGE_CONFIG_FIELD_DESC);
        oprot.writeString(struct.RangeConfig);
        oprot.writeFieldEnd();
      }
      if (struct.SubKeyField != null) {
        oprot.writeFieldBegin(SUB_KEY_FIELD_FIELD_DESC);
        oprot.writeString(struct.SubKeyField);
        oprot.writeFieldEnd();
      }
      if (struct.SubValueField != null) {
        oprot.writeFieldBegin(SUB_VALUE_FIELD_FIELD_DESC);
        oprot.writeString(struct.SubValueField);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AggrConditionTupleSchemeFactory implements SchemeFactory {
    public AggrConditionTupleScheme getScheme() {
      return new AggrConditionTupleScheme();
    }
  }

  private static class AggrConditionTupleScheme extends TupleScheme<AggrCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AggrCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFieldName()) {
        optionals.set(0);
      }
      if (struct.isSetTopNumber()) {
        optionals.set(1);
      }
      if (struct.isSetAggregationType()) {
        optionals.set(2);
      }
      if (struct.isSetRangeConfig()) {
        optionals.set(3);
      }
      if (struct.isSetSubKeyField()) {
        optionals.set(4);
      }
      if (struct.isSetSubValueField()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetFieldName()) {
        oprot.writeString(struct.FieldName);
      }
      if (struct.isSetTopNumber()) {
        oprot.writeI32(struct.TopNumber);
      }
      if (struct.isSetAggregationType()) {
        oprot.writeI32(struct.AggregationType);
      }
      if (struct.isSetRangeConfig()) {
        oprot.writeString(struct.RangeConfig);
      }
      if (struct.isSetSubKeyField()) {
        oprot.writeString(struct.SubKeyField);
      }
      if (struct.isSetSubValueField()) {
        oprot.writeString(struct.SubValueField);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AggrCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.FieldName = iprot.readString();
        struct.setFieldNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.TopNumber = iprot.readI32();
        struct.setTopNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.AggregationType = iprot.readI32();
        struct.setAggregationTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.RangeConfig = iprot.readString();
        struct.setRangeConfigIsSet(true);
      }
      if (incoming.get(4)) {
        struct.SubKeyField = iprot.readString();
        struct.setSubKeyFieldIsSet(true);
      }
      if (incoming.get(5)) {
        struct.SubValueField = iprot.readString();
        struct.setSubValueFieldIsSet(true);
      }
    }
  }

}

