/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class DTOCarInfoIndexField implements org.apache.thrift.TBase<DTOCarInfoIndexField, DTOCarInfoIndexField._Fields>, java.io.Serializable, Cloneable, Comparable<DTOCarInfoIndexField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DTOCarInfoIndexField");

  private static final org.apache.thrift.protocol.TField UCARID_FIELD_DESC = new org.apache.thrift.protocol.TField("ucarid", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UCARSERIALNUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ucarserialnumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UCARSTATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("ucarstatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CARPROVICEID_FIELD_DESC = new org.apache.thrift.protocol.TField("carproviceid", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CARCITYID_FIELD_DESC = new org.apache.thrift.protocol.TField("carcityid", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("color", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DRIVINGMILEAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("drivingmileage", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField COMPLETERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("completerate", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CARSOURCE1L_FIELD_DESC = new org.apache.thrift.protocol.TField("carsource1l", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ISVIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("isvideo", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FIRSTPICTRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("firstpictrue", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CARTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cartype", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField ISNEGLECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isneglect", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PICTURECOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("picturecount", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField PICTURENUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("picturenumber", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField DISPLAYPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayprice", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField STATUSMODIFYTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("statusmodifytime", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CREATETIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createtime", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField BUYCARDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("buycardate", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CARPUBLISHTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("carpublishtime", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField UCARPICWHOLEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("ucarpicwholepath", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField ISDEALERRECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isdealerrecommend", org.apache.thrift.protocol.TType.I32, (short)24);
  private static final org.apache.thrift.protocol.TField ISAUTHENTICATED_FIELD_DESC = new org.apache.thrift.protocol.TField("isauthenticated", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField ISRECOMMENDGL_FIELD_DESC = new org.apache.thrift.protocol.TField("isrecommendgl", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField ISOWNCAR_FIELD_DESC = new org.apache.thrift.protocol.TField("isowncar", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField C2BPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("c2bprice", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField ISTOP_FIELD_DESC = new org.apache.thrift.protocol.TField("istop", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField STATEDESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("statedescription", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField ISWARRANTY_FIELD_DESC = new org.apache.thrift.protocol.TField("iswarranty", org.apache.thrift.protocol.TType.I32, (short)31);
  private static final org.apache.thrift.protocol.TField WARRANTYTYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("warrantytypes", org.apache.thrift.protocol.TType.STRING, (short)32);
  private static final org.apache.thrift.protocol.TField ISSHOWMR_FIELD_DESC = new org.apache.thrift.protocol.TField("isshowmr", org.apache.thrift.protocol.TType.I32, (short)33);
  private static final org.apache.thrift.protocol.TField CARPROVINCENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("carprovincename", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CARCITYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("carcityname", org.apache.thrift.protocol.TType.STRING, (short)35);
  private static final org.apache.thrift.protocol.TField CARDISTRICTID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardistrictid", org.apache.thrift.protocol.TType.I32, (short)36);
  private static final org.apache.thrift.protocol.TField CARDISTRICTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cardistrictname", org.apache.thrift.protocol.TType.STRING, (short)37);
  private static final org.apache.thrift.protocol.TField SLOGAN_FIELD_DESC = new org.apache.thrift.protocol.TField("slogan", org.apache.thrift.protocol.TType.STRING, (short)38);
  private static final org.apache.thrift.protocol.TField B2BPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("b2bprice", org.apache.thrift.protocol.TType.DOUBLE, (short)39);
  private static final org.apache.thrift.protocol.TField ISB2B_FIELD_DESC = new org.apache.thrift.protocol.TField("isb2b", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField MAINBRANDID_FIELD_DESC = new org.apache.thrift.protocol.TField("mainbrandid", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField PRODUCERID_FIELD_DESC = new org.apache.thrift.protocol.TField("producerid", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)43);
  private static final org.apache.thrift.protocol.TField BRANDID_FIELD_DESC = new org.apache.thrift.protocol.TField("brandid", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField CARLEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("carlevel", org.apache.thrift.protocol.TType.STRING, (short)45);
  private static final org.apache.thrift.protocol.TField CARLEVELVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("carlevelvalue", org.apache.thrift.protocol.TType.I32, (short)46);
  private static final org.apache.thrift.protocol.TField CARID_FIELD_DESC = new org.apache.thrift.protocol.TField("carid", org.apache.thrift.protocol.TType.I64, (short)47);
  private static final org.apache.thrift.protocol.TField GEARBOXTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("gearboxtype", org.apache.thrift.protocol.TType.I32, (short)48);
  private static final org.apache.thrift.protocol.TField GEARBOXTYPESTRING_FIELD_DESC = new org.apache.thrift.protocol.TField("gearboxtypestring", org.apache.thrift.protocol.TType.STRING, (short)49);
  private static final org.apache.thrift.protocol.TField EXHAUSTVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("exhaustvalue", org.apache.thrift.protocol.TType.DOUBLE, (short)50);
  private static final org.apache.thrift.protocol.TField CARYEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("caryear", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField CARREFERPRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("carreferprice", org.apache.thrift.protocol.TType.DOUBLE, (short)52);
  private static final org.apache.thrift.protocol.TField ENVIRSTANDARD_FIELD_DESC = new org.apache.thrift.protocol.TField("envirstandard", org.apache.thrift.protocol.TType.STRING, (short)53);
  private static final org.apache.thrift.protocol.TField CONSUMPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("consumption", org.apache.thrift.protocol.TType.DOUBLE, (short)54);
  private static final org.apache.thrift.protocol.TField OILTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("oiltype", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField ENGINELOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("enginelocation", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField BODYDOORS_FIELD_DESC = new org.apache.thrift.protocol.TField("bodydoors", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField SEATNUMMIN_FIELD_DESC = new org.apache.thrift.protocol.TField("seatnummin", org.apache.thrift.protocol.TType.I32, (short)58);
  private static final org.apache.thrift.protocol.TField SEATNUMMAX_FIELD_DESC = new org.apache.thrift.protocol.TField("seatnummax", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField ISWAGON_FIELD_DESC = new org.apache.thrift.protocol.TField("iswagon", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField DRIVETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("drivetype", org.apache.thrift.protocol.TType.I32, (short)61);
  private static final org.apache.thrift.protocol.TField ISAGENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("isagency", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField CSBODYFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("csbodyform", org.apache.thrift.protocol.TType.I32, (short)63);
  private static final org.apache.thrift.protocol.TField BRANDATTR_FIELD_DESC = new org.apache.thrift.protocol.TField("brandattr", org.apache.thrift.protocol.TType.I32, (short)64);
  private static final org.apache.thrift.protocol.TField ISMARKINGVENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("ismarkingvendor", org.apache.thrift.protocol.TType.I32, (short)65);
  private static final org.apache.thrift.protocol.TField COUNTRYVALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryvalue", org.apache.thrift.protocol.TType.I32, (short)66);
  private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)67);
  private static final org.apache.thrift.protocol.TField SUPERIORID_FIELD_DESC = new org.apache.thrift.protocol.TField("superiorid", org.apache.thrift.protocol.TType.I32, (short)68);
  private static final org.apache.thrift.protocol.TField VENDORNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("vendorname", org.apache.thrift.protocol.TType.STRING, (short)69);
  private static final org.apache.thrift.protocol.TField VENDORTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("vendortype", org.apache.thrift.protocol.TType.I32, (short)70);
  private static final org.apache.thrift.protocol.TField CONTACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contact", org.apache.thrift.protocol.TType.STRING, (short)71);
  private static final org.apache.thrift.protocol.TField ISJDVENDOR_FIELD_DESC = new org.apache.thrift.protocol.TField("isjdvendor", org.apache.thrift.protocol.TType.I32, (short)72);
  private static final org.apache.thrift.protocol.TField ISINCTRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("isinctransfer", org.apache.thrift.protocol.TType.I32, (short)73);
  private static final org.apache.thrift.protocol.TField USERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("usertype", org.apache.thrift.protocol.TType.I32, (short)74);
  private static final org.apache.thrift.protocol.TField ISACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("isactivity", org.apache.thrift.protocol.TType.I32, (short)75);
  private static final org.apache.thrift.protocol.TField MEMBERTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("membertype", org.apache.thrift.protocol.TType.I32, (short)76);
  private static final org.apache.thrift.protocol.TField ISBANGMAI_FIELD_DESC = new org.apache.thrift.protocol.TField("isbangmai", org.apache.thrift.protocol.TType.I32, (short)77);
  private static final org.apache.thrift.protocol.TField DVQFLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("dvqflag", org.apache.thrift.protocol.TType.I32, (short)78);
  private static final org.apache.thrift.protocol.TField ISBANGMAICHE_FIELD_DESC = new org.apache.thrift.protocol.TField("isbangmaiche", org.apache.thrift.protocol.TType.I32, (short)79);
  private static final org.apache.thrift.protocol.TField BAIDUMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("baidumap", org.apache.thrift.protocol.TType.STRING, (short)80);
  private static final org.apache.thrift.protocol.TField DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("distance", org.apache.thrift.protocol.TType.DOUBLE, (short)81);
  private static final org.apache.thrift.protocol.TField LINKMAN_FIELD_DESC = new org.apache.thrift.protocol.TField("linkman", org.apache.thrift.protocol.TType.STRING, (short)82);
  private static final org.apache.thrift.protocol.TField CARTYPECONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("cartypeconfig", org.apache.thrift.protocol.TType.STRING, (short)83);
  private static final org.apache.thrift.protocol.TField SITEID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteid", org.apache.thrift.protocol.TType.I32, (short)84);
  private static final org.apache.thrift.protocol.TField CARTITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("cartitle", org.apache.thrift.protocol.TType.STRING, (short)85);
  private static final org.apache.thrift.protocol.TField CARLEVELSECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("carlevelsecond", org.apache.thrift.protocol.TType.I32, (short)86);
  private static final org.apache.thrift.protocol.TField ISCHECKREPORTJSON_FIELD_DESC = new org.apache.thrift.protocol.TField("ischeckreportjson", org.apache.thrift.protocol.TType.I32, (short)87);
  private static final org.apache.thrift.protocol.TField CLICKCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("clickcount", org.apache.thrift.protocol.TType.I64, (short)88);
  private static final org.apache.thrift.protocol.TField CRMCUSTOMERID_FIELD_DESC = new org.apache.thrift.protocol.TField("crmcustomerid", org.apache.thrift.protocol.TType.I32, (short)89);
  private static final org.apache.thrift.protocol.TField BOOST_FIELD_DESC = new org.apache.thrift.protocol.TField("boost", org.apache.thrift.protocol.TType.DOUBLE, (short)100);
  private static final org.apache.thrift.protocol.TField BOOSTC_FIELD_DESC = new org.apache.thrift.protocol.TField("boostc", org.apache.thrift.protocol.TType.DOUBLE, (short)101);
  private static final org.apache.thrift.protocol.TField BOOSTAPP_FIELD_DESC = new org.apache.thrift.protocol.TField("boostapp", org.apache.thrift.protocol.TType.DOUBLE, (short)102);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)103);
  private static final org.apache.thrift.protocol.TField COSTRATE_FIELD_DESC = new org.apache.thrift.protocol.TField("costrate", org.apache.thrift.protocol.TType.DOUBLE, (short)104);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DTOCarInfoIndexFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DTOCarInfoIndexFieldTupleSchemeFactory());
  }

  public int ucarid; // required
  public String ucarserialnumber; // required
  public int ucarstatus; // required
  public int carproviceid; // required
  public int carcityid; // required
  public String color; // required
  public int drivingmileage; // required
  public int completerate; // required
  public int carsource1l; // required
  public int isvideo; // required
  public int firstpictrue; // required
  public int cartype; // required
  public int source; // required
  public int isneglect; // required
  public int picturecount; // required
  public int picturenumber; // required
  public double displayprice; // required
  public String statusmodifytime; // required
  public String createtime; // required
  public String buycardate; // required
  public String carpublishtime; // required
  public String ucarpicwholepath; // required
  public int isdealerrecommend; // required
  public int isauthenticated; // required
  public int isrecommendgl; // required
  public int isowncar; // required
  public double c2bprice; // required
  public int istop; // required
  public String statedescription; // required
  public int iswarranty; // required
  public String warrantytypes; // required
  public int isshowmr; // required
  public String carprovincename; // required
  public String carcityname; // required
  public int cardistrictid; // required
  public String cardistrictname; // required
  public String slogan; // required
  public double b2bprice; // required
  public int isb2b; // required
  public int mainbrandid; // required
  public int producerid; // required
  public String country; // required
  public int brandid; // required
  public String carlevel; // required
  public int carlevelvalue; // required
  public long carid; // required
  public int gearboxtype; // required
  public String gearboxtypestring; // required
  public double exhaustvalue; // required
  public int caryear; // required
  public double carreferprice; // required
  public String envirstandard; // required
  public double consumption; // required
  public int oiltype; // required
  public int enginelocation; // required
  public int bodydoors; // required
  public int seatnummin; // required
  public int seatnummax; // required
  public int iswagon; // required
  public int drivetype; // required
  public int isagency; // required
  public int csbodyform; // required
  public int brandattr; // required
  public int ismarkingvendor; // required
  public int countryvalue; // required
  public int userid; // required
  public int superiorid; // required
  public String vendorname; // required
  public int vendortype; // required
  public String contact; // required
  public int isjdvendor; // required
  public int isinctransfer; // required
  public int usertype; // required
  public int isactivity; // required
  public int membertype; // required
  public int isbangmai; // required
  public int dvqflag; // required
  public int isbangmaiche; // required
  public String baidumap; // required
  public double distance; // required
  public String linkman; // required
  public String cartypeconfig; // required
  public int siteid; // required
  public String cartitle; // required
  public int carlevelsecond; // required
  public int ischeckreportjson; // required
  public long clickcount; // required
  public int crmcustomerid; // required
  public double boost; // required
  public double boostc; // required
  public double boostapp; // required
  public double score; // required
  public double costrate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UCARID((short)1, "ucarid"),
    UCARSERIALNUMBER((short)2, "ucarserialnumber"),
    UCARSTATUS((short)3, "ucarstatus"),
    CARPROVICEID((short)4, "carproviceid"),
    CARCITYID((short)5, "carcityid"),
    COLOR((short)6, "color"),
    DRIVINGMILEAGE((short)7, "drivingmileage"),
    COMPLETERATE((short)8, "completerate"),
    CARSOURCE1L((short)9, "carsource1l"),
    ISVIDEO((short)10, "isvideo"),
    FIRSTPICTRUE((short)11, "firstpictrue"),
    CARTYPE((short)12, "cartype"),
    SOURCE((short)13, "source"),
    ISNEGLECT((short)15, "isneglect"),
    PICTURECOUNT((short)16, "picturecount"),
    PICTURENUMBER((short)17, "picturenumber"),
    DISPLAYPRICE((short)18, "displayprice"),
    STATUSMODIFYTIME((short)19, "statusmodifytime"),
    CREATETIME((short)20, "createtime"),
    BUYCARDATE((short)21, "buycardate"),
    CARPUBLISHTIME((short)22, "carpublishtime"),
    UCARPICWHOLEPATH((short)23, "ucarpicwholepath"),
    ISDEALERRECOMMEND((short)24, "isdealerrecommend"),
    ISAUTHENTICATED((short)25, "isauthenticated"),
    ISRECOMMENDGL((short)26, "isrecommendgl"),
    ISOWNCAR((short)27, "isowncar"),
    C2BPRICE((short)28, "c2bprice"),
    ISTOP((short)29, "istop"),
    STATEDESCRIPTION((short)30, "statedescription"),
    ISWARRANTY((short)31, "iswarranty"),
    WARRANTYTYPES((short)32, "warrantytypes"),
    ISSHOWMR((short)33, "isshowmr"),
    CARPROVINCENAME((short)34, "carprovincename"),
    CARCITYNAME((short)35, "carcityname"),
    CARDISTRICTID((short)36, "cardistrictid"),
    CARDISTRICTNAME((short)37, "cardistrictname"),
    SLOGAN((short)38, "slogan"),
    B2BPRICE((short)39, "b2bprice"),
    ISB2B((short)40, "isb2b"),
    MAINBRANDID((short)41, "mainbrandid"),
    PRODUCERID((short)42, "producerid"),
    COUNTRY((short)43, "country"),
    BRANDID((short)44, "brandid"),
    CARLEVEL((short)45, "carlevel"),
    CARLEVELVALUE((short)46, "carlevelvalue"),
    CARID((short)47, "carid"),
    GEARBOXTYPE((short)48, "gearboxtype"),
    GEARBOXTYPESTRING((short)49, "gearboxtypestring"),
    EXHAUSTVALUE((short)50, "exhaustvalue"),
    CARYEAR((short)51, "caryear"),
    CARREFERPRICE((short)52, "carreferprice"),
    ENVIRSTANDARD((short)53, "envirstandard"),
    CONSUMPTION((short)54, "consumption"),
    OILTYPE((short)55, "oiltype"),
    ENGINELOCATION((short)56, "enginelocation"),
    BODYDOORS((short)57, "bodydoors"),
    SEATNUMMIN((short)58, "seatnummin"),
    SEATNUMMAX((short)59, "seatnummax"),
    ISWAGON((short)60, "iswagon"),
    DRIVETYPE((short)61, "drivetype"),
    ISAGENCY((short)62, "isagency"),
    CSBODYFORM((short)63, "csbodyform"),
    BRANDATTR((short)64, "brandattr"),
    ISMARKINGVENDOR((short)65, "ismarkingvendor"),
    COUNTRYVALUE((short)66, "countryvalue"),
    USERID((short)67, "userid"),
    SUPERIORID((short)68, "superiorid"),
    VENDORNAME((short)69, "vendorname"),
    VENDORTYPE((short)70, "vendortype"),
    CONTACT((short)71, "contact"),
    ISJDVENDOR((short)72, "isjdvendor"),
    ISINCTRANSFER((short)73, "isinctransfer"),
    USERTYPE((short)74, "usertype"),
    ISACTIVITY((short)75, "isactivity"),
    MEMBERTYPE((short)76, "membertype"),
    ISBANGMAI((short)77, "isbangmai"),
    DVQFLAG((short)78, "dvqflag"),
    ISBANGMAICHE((short)79, "isbangmaiche"),
    BAIDUMAP((short)80, "baidumap"),
    DISTANCE((short)81, "distance"),
    LINKMAN((short)82, "linkman"),
    CARTYPECONFIG((short)83, "cartypeconfig"),
    SITEID((short)84, "siteid"),
    CARTITLE((short)85, "cartitle"),
    CARLEVELSECOND((short)86, "carlevelsecond"),
    ISCHECKREPORTJSON((short)87, "ischeckreportjson"),
    CLICKCOUNT((short)88, "clickcount"),
    CRMCUSTOMERID((short)89, "crmcustomerid"),
    BOOST((short)100, "boost"),
    BOOSTC((short)101, "boostc"),
    BOOSTAPP((short)102, "boostapp"),
    SCORE((short)103, "score"),
    COSTRATE((short)104, "costrate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UCARID
          return UCARID;
        case 2: // UCARSERIALNUMBER
          return UCARSERIALNUMBER;
        case 3: // UCARSTATUS
          return UCARSTATUS;
        case 4: // CARPROVICEID
          return CARPROVICEID;
        case 5: // CARCITYID
          return CARCITYID;
        case 6: // COLOR
          return COLOR;
        case 7: // DRIVINGMILEAGE
          return DRIVINGMILEAGE;
        case 8: // COMPLETERATE
          return COMPLETERATE;
        case 9: // CARSOURCE1L
          return CARSOURCE1L;
        case 10: // ISVIDEO
          return ISVIDEO;
        case 11: // FIRSTPICTRUE
          return FIRSTPICTRUE;
        case 12: // CARTYPE
          return CARTYPE;
        case 13: // SOURCE
          return SOURCE;
        case 15: // ISNEGLECT
          return ISNEGLECT;
        case 16: // PICTURECOUNT
          return PICTURECOUNT;
        case 17: // PICTURENUMBER
          return PICTURENUMBER;
        case 18: // DISPLAYPRICE
          return DISPLAYPRICE;
        case 19: // STATUSMODIFYTIME
          return STATUSMODIFYTIME;
        case 20: // CREATETIME
          return CREATETIME;
        case 21: // BUYCARDATE
          return BUYCARDATE;
        case 22: // CARPUBLISHTIME
          return CARPUBLISHTIME;
        case 23: // UCARPICWHOLEPATH
          return UCARPICWHOLEPATH;
        case 24: // ISDEALERRECOMMEND
          return ISDEALERRECOMMEND;
        case 25: // ISAUTHENTICATED
          return ISAUTHENTICATED;
        case 26: // ISRECOMMENDGL
          return ISRECOMMENDGL;
        case 27: // ISOWNCAR
          return ISOWNCAR;
        case 28: // C2BPRICE
          return C2BPRICE;
        case 29: // ISTOP
          return ISTOP;
        case 30: // STATEDESCRIPTION
          return STATEDESCRIPTION;
        case 31: // ISWARRANTY
          return ISWARRANTY;
        case 32: // WARRANTYTYPES
          return WARRANTYTYPES;
        case 33: // ISSHOWMR
          return ISSHOWMR;
        case 34: // CARPROVINCENAME
          return CARPROVINCENAME;
        case 35: // CARCITYNAME
          return CARCITYNAME;
        case 36: // CARDISTRICTID
          return CARDISTRICTID;
        case 37: // CARDISTRICTNAME
          return CARDISTRICTNAME;
        case 38: // SLOGAN
          return SLOGAN;
        case 39: // B2BPRICE
          return B2BPRICE;
        case 40: // ISB2B
          return ISB2B;
        case 41: // MAINBRANDID
          return MAINBRANDID;
        case 42: // PRODUCERID
          return PRODUCERID;
        case 43: // COUNTRY
          return COUNTRY;
        case 44: // BRANDID
          return BRANDID;
        case 45: // CARLEVEL
          return CARLEVEL;
        case 46: // CARLEVELVALUE
          return CARLEVELVALUE;
        case 47: // CARID
          return CARID;
        case 48: // GEARBOXTYPE
          return GEARBOXTYPE;
        case 49: // GEARBOXTYPESTRING
          return GEARBOXTYPESTRING;
        case 50: // EXHAUSTVALUE
          return EXHAUSTVALUE;
        case 51: // CARYEAR
          return CARYEAR;
        case 52: // CARREFERPRICE
          return CARREFERPRICE;
        case 53: // ENVIRSTANDARD
          return ENVIRSTANDARD;
        case 54: // CONSUMPTION
          return CONSUMPTION;
        case 55: // OILTYPE
          return OILTYPE;
        case 56: // ENGINELOCATION
          return ENGINELOCATION;
        case 57: // BODYDOORS
          return BODYDOORS;
        case 58: // SEATNUMMIN
          return SEATNUMMIN;
        case 59: // SEATNUMMAX
          return SEATNUMMAX;
        case 60: // ISWAGON
          return ISWAGON;
        case 61: // DRIVETYPE
          return DRIVETYPE;
        case 62: // ISAGENCY
          return ISAGENCY;
        case 63: // CSBODYFORM
          return CSBODYFORM;
        case 64: // BRANDATTR
          return BRANDATTR;
        case 65: // ISMARKINGVENDOR
          return ISMARKINGVENDOR;
        case 66: // COUNTRYVALUE
          return COUNTRYVALUE;
        case 67: // USERID
          return USERID;
        case 68: // SUPERIORID
          return SUPERIORID;
        case 69: // VENDORNAME
          return VENDORNAME;
        case 70: // VENDORTYPE
          return VENDORTYPE;
        case 71: // CONTACT
          return CONTACT;
        case 72: // ISJDVENDOR
          return ISJDVENDOR;
        case 73: // ISINCTRANSFER
          return ISINCTRANSFER;
        case 74: // USERTYPE
          return USERTYPE;
        case 75: // ISACTIVITY
          return ISACTIVITY;
        case 76: // MEMBERTYPE
          return MEMBERTYPE;
        case 77: // ISBANGMAI
          return ISBANGMAI;
        case 78: // DVQFLAG
          return DVQFLAG;
        case 79: // ISBANGMAICHE
          return ISBANGMAICHE;
        case 80: // BAIDUMAP
          return BAIDUMAP;
        case 81: // DISTANCE
          return DISTANCE;
        case 82: // LINKMAN
          return LINKMAN;
        case 83: // CARTYPECONFIG
          return CARTYPECONFIG;
        case 84: // SITEID
          return SITEID;
        case 85: // CARTITLE
          return CARTITLE;
        case 86: // CARLEVELSECOND
          return CARLEVELSECOND;
        case 87: // ISCHECKREPORTJSON
          return ISCHECKREPORTJSON;
        case 88: // CLICKCOUNT
          return CLICKCOUNT;
        case 89: // CRMCUSTOMERID
          return CRMCUSTOMERID;
        case 100: // BOOST
          return BOOST;
        case 101: // BOOSTC
          return BOOSTC;
        case 102: // BOOSTAPP
          return BOOSTAPP;
        case 103: // SCORE
          return SCORE;
        case 104: // COSTRATE
          return COSTRATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UCARID_ISSET_ID = 0;
  private static final int __UCARSTATUS_ISSET_ID = 1;
  private static final int __CARPROVICEID_ISSET_ID = 2;
  private static final int __CARCITYID_ISSET_ID = 3;
  private static final int __DRIVINGMILEAGE_ISSET_ID = 4;
  private static final int __COMPLETERATE_ISSET_ID = 5;
  private static final int __CARSOURCE1L_ISSET_ID = 6;
  private static final int __ISVIDEO_ISSET_ID = 7;
  private static final int __FIRSTPICTRUE_ISSET_ID = 8;
  private static final int __CARTYPE_ISSET_ID = 9;
  private static final int __SOURCE_ISSET_ID = 10;
  private static final int __ISNEGLECT_ISSET_ID = 11;
  private static final int __PICTURECOUNT_ISSET_ID = 12;
  private static final int __PICTURENUMBER_ISSET_ID = 13;
  private static final int __DISPLAYPRICE_ISSET_ID = 14;
  private static final int __ISDEALERRECOMMEND_ISSET_ID = 15;
  private static final int __ISAUTHENTICATED_ISSET_ID = 16;
  private static final int __ISRECOMMENDGL_ISSET_ID = 17;
  private static final int __ISOWNCAR_ISSET_ID = 18;
  private static final int __C2BPRICE_ISSET_ID = 19;
  private static final int __ISTOP_ISSET_ID = 20;
  private static final int __ISWARRANTY_ISSET_ID = 21;
  private static final int __ISSHOWMR_ISSET_ID = 22;
  private static final int __CARDISTRICTID_ISSET_ID = 23;
  private static final int __B2BPRICE_ISSET_ID = 24;
  private static final int __ISB2B_ISSET_ID = 25;
  private static final int __MAINBRANDID_ISSET_ID = 26;
  private static final int __PRODUCERID_ISSET_ID = 27;
  private static final int __BRANDID_ISSET_ID = 28;
  private static final int __CARLEVELVALUE_ISSET_ID = 29;
  private static final int __CARID_ISSET_ID = 30;
  private static final int __GEARBOXTYPE_ISSET_ID = 31;
  private static final int __EXHAUSTVALUE_ISSET_ID = 32;
  private static final int __CARYEAR_ISSET_ID = 33;
  private static final int __CARREFERPRICE_ISSET_ID = 34;
  private static final int __CONSUMPTION_ISSET_ID = 35;
  private static final int __OILTYPE_ISSET_ID = 36;
  private static final int __ENGINELOCATION_ISSET_ID = 37;
  private static final int __BODYDOORS_ISSET_ID = 38;
  private static final int __SEATNUMMIN_ISSET_ID = 39;
  private static final int __SEATNUMMAX_ISSET_ID = 40;
  private static final int __ISWAGON_ISSET_ID = 41;
  private static final int __DRIVETYPE_ISSET_ID = 42;
  private static final int __ISAGENCY_ISSET_ID = 43;
  private static final int __CSBODYFORM_ISSET_ID = 44;
  private static final int __BRANDATTR_ISSET_ID = 45;
  private static final int __ISMARKINGVENDOR_ISSET_ID = 46;
  private static final int __COUNTRYVALUE_ISSET_ID = 47;
  private static final int __USERID_ISSET_ID = 48;
  private static final int __SUPERIORID_ISSET_ID = 49;
  private static final int __VENDORTYPE_ISSET_ID = 50;
  private static final int __ISJDVENDOR_ISSET_ID = 51;
  private static final int __ISINCTRANSFER_ISSET_ID = 52;
  private static final int __USERTYPE_ISSET_ID = 53;
  private static final int __ISACTIVITY_ISSET_ID = 54;
  private static final int __MEMBERTYPE_ISSET_ID = 55;
  private static final int __ISBANGMAI_ISSET_ID = 56;
  private static final int __DVQFLAG_ISSET_ID = 57;
  private static final int __ISBANGMAICHE_ISSET_ID = 58;
  private static final int __DISTANCE_ISSET_ID = 59;
  private static final int __SITEID_ISSET_ID = 60;
  private static final int __CARLEVELSECOND_ISSET_ID = 61;
  private static final int __ISCHECKREPORTJSON_ISSET_ID = 62;
  private static final int __CLICKCOUNT_ISSET_ID = 63;
  private static final int __CRMCUSTOMERID_ISSET_ID = 64;
  private static final int __BOOST_ISSET_ID = 65;
  private static final int __BOOSTC_ISSET_ID = 66;
  private static final int __BOOSTAPP_ISSET_ID = 67;
  private static final int __SCORE_ISSET_ID = 68;
  private static final int __COSTRATE_ISSET_ID = 69;
  private BitSet __isset_bit_vector = new BitSet(70);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UCARID, new org.apache.thrift.meta_data.FieldMetaData("ucarid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UCARSERIALNUMBER, new org.apache.thrift.meta_data.FieldMetaData("ucarserialnumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UCARSTATUS, new org.apache.thrift.meta_data.FieldMetaData("ucarstatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARPROVICEID, new org.apache.thrift.meta_data.FieldMetaData("carproviceid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARCITYID, new org.apache.thrift.meta_data.FieldMetaData("carcityid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COLOR, new org.apache.thrift.meta_data.FieldMetaData("color", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRIVINGMILEAGE, new org.apache.thrift.meta_data.FieldMetaData("drivingmileage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPLETERATE, new org.apache.thrift.meta_data.FieldMetaData("completerate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARSOURCE1L, new org.apache.thrift.meta_data.FieldMetaData("carsource1l", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISVIDEO, new org.apache.thrift.meta_data.FieldMetaData("isvideo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FIRSTPICTRUE, new org.apache.thrift.meta_data.FieldMetaData("firstpictrue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARTYPE, new org.apache.thrift.meta_data.FieldMetaData("cartype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISNEGLECT, new org.apache.thrift.meta_data.FieldMetaData("isneglect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PICTURECOUNT, new org.apache.thrift.meta_data.FieldMetaData("picturecount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PICTURENUMBER, new org.apache.thrift.meta_data.FieldMetaData("picturenumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISPLAYPRICE, new org.apache.thrift.meta_data.FieldMetaData("displayprice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUSMODIFYTIME, new org.apache.thrift.meta_data.FieldMetaData("statusmodifytime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATETIME, new org.apache.thrift.meta_data.FieldMetaData("createtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUYCARDATE, new org.apache.thrift.meta_data.FieldMetaData("buycardate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARPUBLISHTIME, new org.apache.thrift.meta_data.FieldMetaData("carpublishtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UCARPICWHOLEPATH, new org.apache.thrift.meta_data.FieldMetaData("ucarpicwholepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISDEALERRECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("isdealerrecommend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISAUTHENTICATED, new org.apache.thrift.meta_data.FieldMetaData("isauthenticated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISRECOMMENDGL, new org.apache.thrift.meta_data.FieldMetaData("isrecommendgl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISOWNCAR, new org.apache.thrift.meta_data.FieldMetaData("isowncar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.C2BPRICE, new org.apache.thrift.meta_data.FieldMetaData("c2bprice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ISTOP, new org.apache.thrift.meta_data.FieldMetaData("istop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATEDESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("statedescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISWARRANTY, new org.apache.thrift.meta_data.FieldMetaData("iswarranty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WARRANTYTYPES, new org.apache.thrift.meta_data.FieldMetaData("warrantytypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISSHOWMR, new org.apache.thrift.meta_data.FieldMetaData("isshowmr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARPROVINCENAME, new org.apache.thrift.meta_data.FieldMetaData("carprovincename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARCITYNAME, new org.apache.thrift.meta_data.FieldMetaData("carcityname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARDISTRICTID, new org.apache.thrift.meta_data.FieldMetaData("cardistrictid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARDISTRICTNAME, new org.apache.thrift.meta_data.FieldMetaData("cardistrictname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLOGAN, new org.apache.thrift.meta_data.FieldMetaData("slogan", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.B2BPRICE, new org.apache.thrift.meta_data.FieldMetaData("b2bprice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ISB2B, new org.apache.thrift.meta_data.FieldMetaData("isb2b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAINBRANDID, new org.apache.thrift.meta_data.FieldMetaData("mainbrandid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRODUCERID, new org.apache.thrift.meta_data.FieldMetaData("producerid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRANDID, new org.apache.thrift.meta_data.FieldMetaData("brandid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARLEVEL, new org.apache.thrift.meta_data.FieldMetaData("carlevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARLEVELVALUE, new org.apache.thrift.meta_data.FieldMetaData("carlevelvalue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARID, new org.apache.thrift.meta_data.FieldMetaData("carid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GEARBOXTYPE, new org.apache.thrift.meta_data.FieldMetaData("gearboxtype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GEARBOXTYPESTRING, new org.apache.thrift.meta_data.FieldMetaData("gearboxtypestring", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXHAUSTVALUE, new org.apache.thrift.meta_data.FieldMetaData("exhaustvalue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CARYEAR, new org.apache.thrift.meta_data.FieldMetaData("caryear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARREFERPRICE, new org.apache.thrift.meta_data.FieldMetaData("carreferprice", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ENVIRSTANDARD, new org.apache.thrift.meta_data.FieldMetaData("envirstandard", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONSUMPTION, new org.apache.thrift.meta_data.FieldMetaData("consumption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OILTYPE, new org.apache.thrift.meta_data.FieldMetaData("oiltype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENGINELOCATION, new org.apache.thrift.meta_data.FieldMetaData("enginelocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BODYDOORS, new org.apache.thrift.meta_data.FieldMetaData("bodydoors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEATNUMMIN, new org.apache.thrift.meta_data.FieldMetaData("seatnummin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEATNUMMAX, new org.apache.thrift.meta_data.FieldMetaData("seatnummax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISWAGON, new org.apache.thrift.meta_data.FieldMetaData("iswagon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DRIVETYPE, new org.apache.thrift.meta_data.FieldMetaData("drivetype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISAGENCY, new org.apache.thrift.meta_data.FieldMetaData("isagency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CSBODYFORM, new org.apache.thrift.meta_data.FieldMetaData("csbodyform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRANDATTR, new org.apache.thrift.meta_data.FieldMetaData("brandattr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISMARKINGVENDOR, new org.apache.thrift.meta_data.FieldMetaData("ismarkingvendor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTRYVALUE, new org.apache.thrift.meta_data.FieldMetaData("countryvalue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUPERIORID, new org.apache.thrift.meta_data.FieldMetaData("superiorid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VENDORNAME, new org.apache.thrift.meta_data.FieldMetaData("vendorname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENDORTYPE, new org.apache.thrift.meta_data.FieldMetaData("vendortype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONTACT, new org.apache.thrift.meta_data.FieldMetaData("contact", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISJDVENDOR, new org.apache.thrift.meta_data.FieldMetaData("isjdvendor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISINCTRANSFER, new org.apache.thrift.meta_data.FieldMetaData("isinctransfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USERTYPE, new org.apache.thrift.meta_data.FieldMetaData("usertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("isactivity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MEMBERTYPE, new org.apache.thrift.meta_data.FieldMetaData("membertype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISBANGMAI, new org.apache.thrift.meta_data.FieldMetaData("isbangmai", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DVQFLAG, new org.apache.thrift.meta_data.FieldMetaData("dvqflag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISBANGMAICHE, new org.apache.thrift.meta_data.FieldMetaData("isbangmaiche", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BAIDUMAP, new org.apache.thrift.meta_data.FieldMetaData("baidumap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LINKMAN, new org.apache.thrift.meta_data.FieldMetaData("linkman", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARTYPECONFIG, new org.apache.thrift.meta_data.FieldMetaData("cartypeconfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SITEID, new org.apache.thrift.meta_data.FieldMetaData("siteid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CARTITLE, new org.apache.thrift.meta_data.FieldMetaData("cartitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARLEVELSECOND, new org.apache.thrift.meta_data.FieldMetaData("carlevelsecond", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ISCHECKREPORTJSON, new org.apache.thrift.meta_data.FieldMetaData("ischeckreportjson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLICKCOUNT, new org.apache.thrift.meta_data.FieldMetaData("clickcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CRMCUSTOMERID, new org.apache.thrift.meta_data.FieldMetaData("crmcustomerid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOST, new org.apache.thrift.meta_data.FieldMetaData("boost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOSTC, new org.apache.thrift.meta_data.FieldMetaData("boostc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BOOSTAPP, new org.apache.thrift.meta_data.FieldMetaData("boostapp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COSTRATE, new org.apache.thrift.meta_data.FieldMetaData("costrate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DTOCarInfoIndexField.class, metaDataMap);
  }

  public DTOCarInfoIndexField() {
  }

  public DTOCarInfoIndexField(
    int ucarid,
    String ucarserialnumber,
    int ucarstatus,
    int carproviceid,
    int carcityid,
    String color,
    int drivingmileage,
    int completerate,
    int carsource1l,
    int isvideo,
    int firstpictrue,
    int cartype,
    int source,
    int isneglect,
    int picturecount,
    int picturenumber,
    double displayprice,
    String statusmodifytime,
    String createtime,
    String buycardate,
    String carpublishtime,
    String ucarpicwholepath,
    int isdealerrecommend,
    int isauthenticated,
    int isrecommendgl,
    int isowncar,
    double c2bprice,
    int istop,
    String statedescription,
    int iswarranty,
    String warrantytypes,
    int isshowmr,
    String carprovincename,
    String carcityname,
    int cardistrictid,
    String cardistrictname,
    String slogan,
    double b2bprice,
    int isb2b,
    int mainbrandid,
    int producerid,
    String country,
    int brandid,
    String carlevel,
    int carlevelvalue,
    long carid,
    int gearboxtype,
    String gearboxtypestring,
    double exhaustvalue,
    int caryear,
    double carreferprice,
    String envirstandard,
    double consumption,
    int oiltype,
    int enginelocation,
    int bodydoors,
    int seatnummin,
    int seatnummax,
    int iswagon,
    int drivetype,
    int isagency,
    int csbodyform,
    int brandattr,
    int ismarkingvendor,
    int countryvalue,
    int userid,
    int superiorid,
    String vendorname,
    int vendortype,
    String contact,
    int isjdvendor,
    int isinctransfer,
    int usertype,
    int isactivity,
    int membertype,
    int isbangmai,
    int dvqflag,
    int isbangmaiche,
    String baidumap,
    double distance,
    String linkman,
    String cartypeconfig,
    int siteid,
    String cartitle,
    int carlevelsecond,
    int ischeckreportjson,
    long clickcount,
    int crmcustomerid,
    double boost,
    double boostc,
    double boostapp,
    double score,
    double costrate)
  {
    this();
    this.ucarid = ucarid;
    setUcaridIsSet(true);
    this.ucarserialnumber = ucarserialnumber;
    this.ucarstatus = ucarstatus;
    setUcarstatusIsSet(true);
    this.carproviceid = carproviceid;
    setCarproviceidIsSet(true);
    this.carcityid = carcityid;
    setCarcityidIsSet(true);
    this.color = color;
    this.drivingmileage = drivingmileage;
    setDrivingmileageIsSet(true);
    this.completerate = completerate;
    setCompleterateIsSet(true);
    this.carsource1l = carsource1l;
    setCarsource1lIsSet(true);
    this.isvideo = isvideo;
    setIsvideoIsSet(true);
    this.firstpictrue = firstpictrue;
    setFirstpictrueIsSet(true);
    this.cartype = cartype;
    setCartypeIsSet(true);
    this.source = source;
    setSourceIsSet(true);
    this.isneglect = isneglect;
    setIsneglectIsSet(true);
    this.picturecount = picturecount;
    setPicturecountIsSet(true);
    this.picturenumber = picturenumber;
    setPicturenumberIsSet(true);
    this.displayprice = displayprice;
    setDisplaypriceIsSet(true);
    this.statusmodifytime = statusmodifytime;
    this.createtime = createtime;
    this.buycardate = buycardate;
    this.carpublishtime = carpublishtime;
    this.ucarpicwholepath = ucarpicwholepath;
    this.isdealerrecommend = isdealerrecommend;
    setIsdealerrecommendIsSet(true);
    this.isauthenticated = isauthenticated;
    setIsauthenticatedIsSet(true);
    this.isrecommendgl = isrecommendgl;
    setIsrecommendglIsSet(true);
    this.isowncar = isowncar;
    setIsowncarIsSet(true);
    this.c2bprice = c2bprice;
    setC2bpriceIsSet(true);
    this.istop = istop;
    setIstopIsSet(true);
    this.statedescription = statedescription;
    this.iswarranty = iswarranty;
    setIswarrantyIsSet(true);
    this.warrantytypes = warrantytypes;
    this.isshowmr = isshowmr;
    setIsshowmrIsSet(true);
    this.carprovincename = carprovincename;
    this.carcityname = carcityname;
    this.cardistrictid = cardistrictid;
    setCardistrictidIsSet(true);
    this.cardistrictname = cardistrictname;
    this.slogan = slogan;
    this.b2bprice = b2bprice;
    setB2bpriceIsSet(true);
    this.isb2b = isb2b;
    setIsb2bIsSet(true);
    this.mainbrandid = mainbrandid;
    setMainbrandidIsSet(true);
    this.producerid = producerid;
    setProduceridIsSet(true);
    this.country = country;
    this.brandid = brandid;
    setBrandidIsSet(true);
    this.carlevel = carlevel;
    this.carlevelvalue = carlevelvalue;
    setCarlevelvalueIsSet(true);
    this.carid = carid;
    setCaridIsSet(true);
    this.gearboxtype = gearboxtype;
    setGearboxtypeIsSet(true);
    this.gearboxtypestring = gearboxtypestring;
    this.exhaustvalue = exhaustvalue;
    setExhaustvalueIsSet(true);
    this.caryear = caryear;
    setCaryearIsSet(true);
    this.carreferprice = carreferprice;
    setCarreferpriceIsSet(true);
    this.envirstandard = envirstandard;
    this.consumption = consumption;
    setConsumptionIsSet(true);
    this.oiltype = oiltype;
    setOiltypeIsSet(true);
    this.enginelocation = enginelocation;
    setEnginelocationIsSet(true);
    this.bodydoors = bodydoors;
    setBodydoorsIsSet(true);
    this.seatnummin = seatnummin;
    setSeatnumminIsSet(true);
    this.seatnummax = seatnummax;
    setSeatnummaxIsSet(true);
    this.iswagon = iswagon;
    setIswagonIsSet(true);
    this.drivetype = drivetype;
    setDrivetypeIsSet(true);
    this.isagency = isagency;
    setIsagencyIsSet(true);
    this.csbodyform = csbodyform;
    setCsbodyformIsSet(true);
    this.brandattr = brandattr;
    setBrandattrIsSet(true);
    this.ismarkingvendor = ismarkingvendor;
    setIsmarkingvendorIsSet(true);
    this.countryvalue = countryvalue;
    setCountryvalueIsSet(true);
    this.userid = userid;
    setUseridIsSet(true);
    this.superiorid = superiorid;
    setSuperioridIsSet(true);
    this.vendorname = vendorname;
    this.vendortype = vendortype;
    setVendortypeIsSet(true);
    this.contact = contact;
    this.isjdvendor = isjdvendor;
    setIsjdvendorIsSet(true);
    this.isinctransfer = isinctransfer;
    setIsinctransferIsSet(true);
    this.usertype = usertype;
    setUsertypeIsSet(true);
    this.isactivity = isactivity;
    setIsactivityIsSet(true);
    this.membertype = membertype;
    setMembertypeIsSet(true);
    this.isbangmai = isbangmai;
    setIsbangmaiIsSet(true);
    this.dvqflag = dvqflag;
    setDvqflagIsSet(true);
    this.isbangmaiche = isbangmaiche;
    setIsbangmaicheIsSet(true);
    this.baidumap = baidumap;
    this.distance = distance;
    setDistanceIsSet(true);
    this.linkman = linkman;
    this.cartypeconfig = cartypeconfig;
    this.siteid = siteid;
    setSiteidIsSet(true);
    this.cartitle = cartitle;
    this.carlevelsecond = carlevelsecond;
    setCarlevelsecondIsSet(true);
    this.ischeckreportjson = ischeckreportjson;
    setIscheckreportjsonIsSet(true);
    this.clickcount = clickcount;
    setClickcountIsSet(true);
    this.crmcustomerid = crmcustomerid;
    setCrmcustomeridIsSet(true);
    this.boost = boost;
    setBoostIsSet(true);
    this.boostc = boostc;
    setBoostcIsSet(true);
    this.boostapp = boostapp;
    setBoostappIsSet(true);
    this.score = score;
    setScoreIsSet(true);
    this.costrate = costrate;
    setCostrateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DTOCarInfoIndexField(DTOCarInfoIndexField other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.ucarid = other.ucarid;
    if (other.isSetUcarserialnumber()) {
      this.ucarserialnumber = other.ucarserialnumber;
    }
    this.ucarstatus = other.ucarstatus;
    this.carproviceid = other.carproviceid;
    this.carcityid = other.carcityid;
    if (other.isSetColor()) {
      this.color = other.color;
    }
    this.drivingmileage = other.drivingmileage;
    this.completerate = other.completerate;
    this.carsource1l = other.carsource1l;
    this.isvideo = other.isvideo;
    this.firstpictrue = other.firstpictrue;
    this.cartype = other.cartype;
    this.source = other.source;
    this.isneglect = other.isneglect;
    this.picturecount = other.picturecount;
    this.picturenumber = other.picturenumber;
    this.displayprice = other.displayprice;
    if (other.isSetStatusmodifytime()) {
      this.statusmodifytime = other.statusmodifytime;
    }
    if (other.isSetCreatetime()) {
      this.createtime = other.createtime;
    }
    if (other.isSetBuycardate()) {
      this.buycardate = other.buycardate;
    }
    if (other.isSetCarpublishtime()) {
      this.carpublishtime = other.carpublishtime;
    }
    if (other.isSetUcarpicwholepath()) {
      this.ucarpicwholepath = other.ucarpicwholepath;
    }
    this.isdealerrecommend = other.isdealerrecommend;
    this.isauthenticated = other.isauthenticated;
    this.isrecommendgl = other.isrecommendgl;
    this.isowncar = other.isowncar;
    this.c2bprice = other.c2bprice;
    this.istop = other.istop;
    if (other.isSetStatedescription()) {
      this.statedescription = other.statedescription;
    }
    this.iswarranty = other.iswarranty;
    if (other.isSetWarrantytypes()) {
      this.warrantytypes = other.warrantytypes;
    }
    this.isshowmr = other.isshowmr;
    if (other.isSetCarprovincename()) {
      this.carprovincename = other.carprovincename;
    }
    if (other.isSetCarcityname()) {
      this.carcityname = other.carcityname;
    }
    this.cardistrictid = other.cardistrictid;
    if (other.isSetCardistrictname()) {
      this.cardistrictname = other.cardistrictname;
    }
    if (other.isSetSlogan()) {
      this.slogan = other.slogan;
    }
    this.b2bprice = other.b2bprice;
    this.isb2b = other.isb2b;
    this.mainbrandid = other.mainbrandid;
    this.producerid = other.producerid;
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    this.brandid = other.brandid;
    if (other.isSetCarlevel()) {
      this.carlevel = other.carlevel;
    }
    this.carlevelvalue = other.carlevelvalue;
    this.carid = other.carid;
    this.gearboxtype = other.gearboxtype;
    if (other.isSetGearboxtypestring()) {
      this.gearboxtypestring = other.gearboxtypestring;
    }
    this.exhaustvalue = other.exhaustvalue;
    this.caryear = other.caryear;
    this.carreferprice = other.carreferprice;
    if (other.isSetEnvirstandard()) {
      this.envirstandard = other.envirstandard;
    }
    this.consumption = other.consumption;
    this.oiltype = other.oiltype;
    this.enginelocation = other.enginelocation;
    this.bodydoors = other.bodydoors;
    this.seatnummin = other.seatnummin;
    this.seatnummax = other.seatnummax;
    this.iswagon = other.iswagon;
    this.drivetype = other.drivetype;
    this.isagency = other.isagency;
    this.csbodyform = other.csbodyform;
    this.brandattr = other.brandattr;
    this.ismarkingvendor = other.ismarkingvendor;
    this.countryvalue = other.countryvalue;
    this.userid = other.userid;
    this.superiorid = other.superiorid;
    if (other.isSetVendorname()) {
      this.vendorname = other.vendorname;
    }
    this.vendortype = other.vendortype;
    if (other.isSetContact()) {
      this.contact = other.contact;
    }
    this.isjdvendor = other.isjdvendor;
    this.isinctransfer = other.isinctransfer;
    this.usertype = other.usertype;
    this.isactivity = other.isactivity;
    this.membertype = other.membertype;
    this.isbangmai = other.isbangmai;
    this.dvqflag = other.dvqflag;
    this.isbangmaiche = other.isbangmaiche;
    if (other.isSetBaidumap()) {
      this.baidumap = other.baidumap;
    }
    this.distance = other.distance;
    if (other.isSetLinkman()) {
      this.linkman = other.linkman;
    }
    if (other.isSetCartypeconfig()) {
      this.cartypeconfig = other.cartypeconfig;
    }
    this.siteid = other.siteid;
    if (other.isSetCartitle()) {
      this.cartitle = other.cartitle;
    }
    this.carlevelsecond = other.carlevelsecond;
    this.ischeckreportjson = other.ischeckreportjson;
    this.clickcount = other.clickcount;
    this.crmcustomerid = other.crmcustomerid;
    this.boost = other.boost;
    this.boostc = other.boostc;
    this.boostapp = other.boostapp;
    this.score = other.score;
    this.costrate = other.costrate;
  }

  public DTOCarInfoIndexField deepCopy() {
    return new DTOCarInfoIndexField(this);
  }

  @Override
  public void clear() {
    setUcaridIsSet(false);
    this.ucarid = 0;
    this.ucarserialnumber = null;
    setUcarstatusIsSet(false);
    this.ucarstatus = 0;
    setCarproviceidIsSet(false);
    this.carproviceid = 0;
    setCarcityidIsSet(false);
    this.carcityid = 0;
    this.color = null;
    setDrivingmileageIsSet(false);
    this.drivingmileage = 0;
    setCompleterateIsSet(false);
    this.completerate = 0;
    setCarsource1lIsSet(false);
    this.carsource1l = 0;
    setIsvideoIsSet(false);
    this.isvideo = 0;
    setFirstpictrueIsSet(false);
    this.firstpictrue = 0;
    setCartypeIsSet(false);
    this.cartype = 0;
    setSourceIsSet(false);
    this.source = 0;
    setIsneglectIsSet(false);
    this.isneglect = 0;
    setPicturecountIsSet(false);
    this.picturecount = 0;
    setPicturenumberIsSet(false);
    this.picturenumber = 0;
    setDisplaypriceIsSet(false);
    this.displayprice = 0.0;
    this.statusmodifytime = null;
    this.createtime = null;
    this.buycardate = null;
    this.carpublishtime = null;
    this.ucarpicwholepath = null;
    setIsdealerrecommendIsSet(false);
    this.isdealerrecommend = 0;
    setIsauthenticatedIsSet(false);
    this.isauthenticated = 0;
    setIsrecommendglIsSet(false);
    this.isrecommendgl = 0;
    setIsowncarIsSet(false);
    this.isowncar = 0;
    setC2bpriceIsSet(false);
    this.c2bprice = 0.0;
    setIstopIsSet(false);
    this.istop = 0;
    this.statedescription = null;
    setIswarrantyIsSet(false);
    this.iswarranty = 0;
    this.warrantytypes = null;
    setIsshowmrIsSet(false);
    this.isshowmr = 0;
    this.carprovincename = null;
    this.carcityname = null;
    setCardistrictidIsSet(false);
    this.cardistrictid = 0;
    this.cardistrictname = null;
    this.slogan = null;
    setB2bpriceIsSet(false);
    this.b2bprice = 0.0;
    setIsb2bIsSet(false);
    this.isb2b = 0;
    setMainbrandidIsSet(false);
    this.mainbrandid = 0;
    setProduceridIsSet(false);
    this.producerid = 0;
    this.country = null;
    setBrandidIsSet(false);
    this.brandid = 0;
    this.carlevel = null;
    setCarlevelvalueIsSet(false);
    this.carlevelvalue = 0;
    setCaridIsSet(false);
    this.carid = 0;
    setGearboxtypeIsSet(false);
    this.gearboxtype = 0;
    this.gearboxtypestring = null;
    setExhaustvalueIsSet(false);
    this.exhaustvalue = 0.0;
    setCaryearIsSet(false);
    this.caryear = 0;
    setCarreferpriceIsSet(false);
    this.carreferprice = 0.0;
    this.envirstandard = null;
    setConsumptionIsSet(false);
    this.consumption = 0.0;
    setOiltypeIsSet(false);
    this.oiltype = 0;
    setEnginelocationIsSet(false);
    this.enginelocation = 0;
    setBodydoorsIsSet(false);
    this.bodydoors = 0;
    setSeatnumminIsSet(false);
    this.seatnummin = 0;
    setSeatnummaxIsSet(false);
    this.seatnummax = 0;
    setIswagonIsSet(false);
    this.iswagon = 0;
    setDrivetypeIsSet(false);
    this.drivetype = 0;
    setIsagencyIsSet(false);
    this.isagency = 0;
    setCsbodyformIsSet(false);
    this.csbodyform = 0;
    setBrandattrIsSet(false);
    this.brandattr = 0;
    setIsmarkingvendorIsSet(false);
    this.ismarkingvendor = 0;
    setCountryvalueIsSet(false);
    this.countryvalue = 0;
    setUseridIsSet(false);
    this.userid = 0;
    setSuperioridIsSet(false);
    this.superiorid = 0;
    this.vendorname = null;
    setVendortypeIsSet(false);
    this.vendortype = 0;
    this.contact = null;
    setIsjdvendorIsSet(false);
    this.isjdvendor = 0;
    setIsinctransferIsSet(false);
    this.isinctransfer = 0;
    setUsertypeIsSet(false);
    this.usertype = 0;
    setIsactivityIsSet(false);
    this.isactivity = 0;
    setMembertypeIsSet(false);
    this.membertype = 0;
    setIsbangmaiIsSet(false);
    this.isbangmai = 0;
    setDvqflagIsSet(false);
    this.dvqflag = 0;
    setIsbangmaicheIsSet(false);
    this.isbangmaiche = 0;
    this.baidumap = null;
    setDistanceIsSet(false);
    this.distance = 0.0;
    this.linkman = null;
    this.cartypeconfig = null;
    setSiteidIsSet(false);
    this.siteid = 0;
    this.cartitle = null;
    setCarlevelsecondIsSet(false);
    this.carlevelsecond = 0;
    setIscheckreportjsonIsSet(false);
    this.ischeckreportjson = 0;
    setClickcountIsSet(false);
    this.clickcount = 0;
    setCrmcustomeridIsSet(false);
    this.crmcustomerid = 0;
    setBoostIsSet(false);
    this.boost = 0.0;
    setBoostcIsSet(false);
    this.boostc = 0.0;
    setBoostappIsSet(false);
    this.boostapp = 0.0;
    setScoreIsSet(false);
    this.score = 0.0;
    setCostrateIsSet(false);
    this.costrate = 0.0;
  }

  public int getUcarid() {
    return this.ucarid;
  }

  public DTOCarInfoIndexField setUcarid(int ucarid) {
    this.ucarid = ucarid;
    setUcaridIsSet(true);
    return this;
  }

  public void unsetUcarid() {
    __isset_bit_vector.clear(__UCARID_ISSET_ID);
  }

  /** Returns true if field ucarid is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarid() {
    return __isset_bit_vector.get(__UCARID_ISSET_ID);
  }

  public void setUcaridIsSet(boolean value) {
    __isset_bit_vector.set(__UCARID_ISSET_ID, value);
  }

  public String getUcarserialnumber() {
    return this.ucarserialnumber;
  }

  public DTOCarInfoIndexField setUcarserialnumber(String ucarserialnumber) {
    this.ucarserialnumber = ucarserialnumber;
    return this;
  }

  public void unsetUcarserialnumber() {
    this.ucarserialnumber = null;
  }

  /** Returns true if field ucarserialnumber is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarserialnumber() {
    return this.ucarserialnumber != null;
  }

  public void setUcarserialnumberIsSet(boolean value) {
    if (!value) {
      this.ucarserialnumber = null;
    }
  }

  public int getUcarstatus() {
    return this.ucarstatus;
  }

  public DTOCarInfoIndexField setUcarstatus(int ucarstatus) {
    this.ucarstatus = ucarstatus;
    setUcarstatusIsSet(true);
    return this;
  }

  public void unsetUcarstatus() {
    __isset_bit_vector.clear(__UCARSTATUS_ISSET_ID);
  }

  /** Returns true if field ucarstatus is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarstatus() {
    return __isset_bit_vector.get(__UCARSTATUS_ISSET_ID);
  }

  public void setUcarstatusIsSet(boolean value) {
    __isset_bit_vector.set(__UCARSTATUS_ISSET_ID, value);
  }

  public int getCarproviceid() {
    return this.carproviceid;
  }

  public DTOCarInfoIndexField setCarproviceid(int carproviceid) {
    this.carproviceid = carproviceid;
    setCarproviceidIsSet(true);
    return this;
  }

  public void unsetCarproviceid() {
    __isset_bit_vector.clear(__CARPROVICEID_ISSET_ID);
  }

  /** Returns true if field carproviceid is set (has been assigned a value) and false otherwise */
  public boolean isSetCarproviceid() {
    return __isset_bit_vector.get(__CARPROVICEID_ISSET_ID);
  }

  public void setCarproviceidIsSet(boolean value) {
    __isset_bit_vector.set(__CARPROVICEID_ISSET_ID, value);
  }

  public int getCarcityid() {
    return this.carcityid;
  }

  public DTOCarInfoIndexField setCarcityid(int carcityid) {
    this.carcityid = carcityid;
    setCarcityidIsSet(true);
    return this;
  }

  public void unsetCarcityid() {
    __isset_bit_vector.clear(__CARCITYID_ISSET_ID);
  }

  /** Returns true if field carcityid is set (has been assigned a value) and false otherwise */
  public boolean isSetCarcityid() {
    return __isset_bit_vector.get(__CARCITYID_ISSET_ID);
  }

  public void setCarcityidIsSet(boolean value) {
    __isset_bit_vector.set(__CARCITYID_ISSET_ID, value);
  }

  public String getColor() {
    return this.color;
  }

  public DTOCarInfoIndexField setColor(String color) {
    this.color = color;
    return this;
  }

  public void unsetColor() {
    this.color = null;
  }

  /** Returns true if field color is set (has been assigned a value) and false otherwise */
  public boolean isSetColor() {
    return this.color != null;
  }

  public void setColorIsSet(boolean value) {
    if (!value) {
      this.color = null;
    }
  }

  public int getDrivingmileage() {
    return this.drivingmileage;
  }

  public DTOCarInfoIndexField setDrivingmileage(int drivingmileage) {
    this.drivingmileage = drivingmileage;
    setDrivingmileageIsSet(true);
    return this;
  }

  public void unsetDrivingmileage() {
    __isset_bit_vector.clear(__DRIVINGMILEAGE_ISSET_ID);
  }

  /** Returns true if field drivingmileage is set (has been assigned a value) and false otherwise */
  public boolean isSetDrivingmileage() {
    return __isset_bit_vector.get(__DRIVINGMILEAGE_ISSET_ID);
  }

  public void setDrivingmileageIsSet(boolean value) {
    __isset_bit_vector.set(__DRIVINGMILEAGE_ISSET_ID, value);
  }

  public int getCompleterate() {
    return this.completerate;
  }

  public DTOCarInfoIndexField setCompleterate(int completerate) {
    this.completerate = completerate;
    setCompleterateIsSet(true);
    return this;
  }

  public void unsetCompleterate() {
    __isset_bit_vector.clear(__COMPLETERATE_ISSET_ID);
  }

  /** Returns true if field completerate is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleterate() {
    return __isset_bit_vector.get(__COMPLETERATE_ISSET_ID);
  }

  public void setCompleterateIsSet(boolean value) {
    __isset_bit_vector.set(__COMPLETERATE_ISSET_ID, value);
  }

  public int getCarsource1l() {
    return this.carsource1l;
  }

  public DTOCarInfoIndexField setCarsource1l(int carsource1l) {
    this.carsource1l = carsource1l;
    setCarsource1lIsSet(true);
    return this;
  }

  public void unsetCarsource1l() {
    __isset_bit_vector.clear(__CARSOURCE1L_ISSET_ID);
  }

  /** Returns true if field carsource1l is set (has been assigned a value) and false otherwise */
  public boolean isSetCarsource1l() {
    return __isset_bit_vector.get(__CARSOURCE1L_ISSET_ID);
  }

  public void setCarsource1lIsSet(boolean value) {
    __isset_bit_vector.set(__CARSOURCE1L_ISSET_ID, value);
  }

  public int getIsvideo() {
    return this.isvideo;
  }

  public DTOCarInfoIndexField setIsvideo(int isvideo) {
    this.isvideo = isvideo;
    setIsvideoIsSet(true);
    return this;
  }

  public void unsetIsvideo() {
    __isset_bit_vector.clear(__ISVIDEO_ISSET_ID);
  }

  /** Returns true if field isvideo is set (has been assigned a value) and false otherwise */
  public boolean isSetIsvideo() {
    return __isset_bit_vector.get(__ISVIDEO_ISSET_ID);
  }

  public void setIsvideoIsSet(boolean value) {
    __isset_bit_vector.set(__ISVIDEO_ISSET_ID, value);
  }

  public int getFirstpictrue() {
    return this.firstpictrue;
  }

  public DTOCarInfoIndexField setFirstpictrue(int firstpictrue) {
    this.firstpictrue = firstpictrue;
    setFirstpictrueIsSet(true);
    return this;
  }

  public void unsetFirstpictrue() {
    __isset_bit_vector.clear(__FIRSTPICTRUE_ISSET_ID);
  }

  /** Returns true if field firstpictrue is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstpictrue() {
    return __isset_bit_vector.get(__FIRSTPICTRUE_ISSET_ID);
  }

  public void setFirstpictrueIsSet(boolean value) {
    __isset_bit_vector.set(__FIRSTPICTRUE_ISSET_ID, value);
  }

  public int getCartype() {
    return this.cartype;
  }

  public DTOCarInfoIndexField setCartype(int cartype) {
    this.cartype = cartype;
    setCartypeIsSet(true);
    return this;
  }

  public void unsetCartype() {
    __isset_bit_vector.clear(__CARTYPE_ISSET_ID);
  }

  /** Returns true if field cartype is set (has been assigned a value) and false otherwise */
  public boolean isSetCartype() {
    return __isset_bit_vector.get(__CARTYPE_ISSET_ID);
  }

  public void setCartypeIsSet(boolean value) {
    __isset_bit_vector.set(__CARTYPE_ISSET_ID, value);
  }

  public int getSource() {
    return this.source;
  }

  public DTOCarInfoIndexField setSource(int source) {
    this.source = source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bit_vector.clear(__SOURCE_ISSET_ID);
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return __isset_bit_vector.get(__SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bit_vector.set(__SOURCE_ISSET_ID, value);
  }

  public int getIsneglect() {
    return this.isneglect;
  }

  public DTOCarInfoIndexField setIsneglect(int isneglect) {
    this.isneglect = isneglect;
    setIsneglectIsSet(true);
    return this;
  }

  public void unsetIsneglect() {
    __isset_bit_vector.clear(__ISNEGLECT_ISSET_ID);
  }

  /** Returns true if field isneglect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsneglect() {
    return __isset_bit_vector.get(__ISNEGLECT_ISSET_ID);
  }

  public void setIsneglectIsSet(boolean value) {
    __isset_bit_vector.set(__ISNEGLECT_ISSET_ID, value);
  }

  public int getPicturecount() {
    return this.picturecount;
  }

  public DTOCarInfoIndexField setPicturecount(int picturecount) {
    this.picturecount = picturecount;
    setPicturecountIsSet(true);
    return this;
  }

  public void unsetPicturecount() {
    __isset_bit_vector.clear(__PICTURECOUNT_ISSET_ID);
  }

  /** Returns true if field picturecount is set (has been assigned a value) and false otherwise */
  public boolean isSetPicturecount() {
    return __isset_bit_vector.get(__PICTURECOUNT_ISSET_ID);
  }

  public void setPicturecountIsSet(boolean value) {
    __isset_bit_vector.set(__PICTURECOUNT_ISSET_ID, value);
  }

  public int getPicturenumber() {
    return this.picturenumber;
  }

  public DTOCarInfoIndexField setPicturenumber(int picturenumber) {
    this.picturenumber = picturenumber;
    setPicturenumberIsSet(true);
    return this;
  }

  public void unsetPicturenumber() {
    __isset_bit_vector.clear(__PICTURENUMBER_ISSET_ID);
  }

  /** Returns true if field picturenumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPicturenumber() {
    return __isset_bit_vector.get(__PICTURENUMBER_ISSET_ID);
  }

  public void setPicturenumberIsSet(boolean value) {
    __isset_bit_vector.set(__PICTURENUMBER_ISSET_ID, value);
  }

  public double getDisplayprice() {
    return this.displayprice;
  }

  public DTOCarInfoIndexField setDisplayprice(double displayprice) {
    this.displayprice = displayprice;
    setDisplaypriceIsSet(true);
    return this;
  }

  public void unsetDisplayprice() {
    __isset_bit_vector.clear(__DISPLAYPRICE_ISSET_ID);
  }

  /** Returns true if field displayprice is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayprice() {
    return __isset_bit_vector.get(__DISPLAYPRICE_ISSET_ID);
  }

  public void setDisplaypriceIsSet(boolean value) {
    __isset_bit_vector.set(__DISPLAYPRICE_ISSET_ID, value);
  }

  public String getStatusmodifytime() {
    return this.statusmodifytime;
  }

  public DTOCarInfoIndexField setStatusmodifytime(String statusmodifytime) {
    this.statusmodifytime = statusmodifytime;
    return this;
  }

  public void unsetStatusmodifytime() {
    this.statusmodifytime = null;
  }

  /** Returns true if field statusmodifytime is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusmodifytime() {
    return this.statusmodifytime != null;
  }

  public void setStatusmodifytimeIsSet(boolean value) {
    if (!value) {
      this.statusmodifytime = null;
    }
  }

  public String getCreatetime() {
    return this.createtime;
  }

  public DTOCarInfoIndexField setCreatetime(String createtime) {
    this.createtime = createtime;
    return this;
  }

  public void unsetCreatetime() {
    this.createtime = null;
  }

  /** Returns true if field createtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatetime() {
    return this.createtime != null;
  }

  public void setCreatetimeIsSet(boolean value) {
    if (!value) {
      this.createtime = null;
    }
  }

  public String getBuycardate() {
    return this.buycardate;
  }

  public DTOCarInfoIndexField setBuycardate(String buycardate) {
    this.buycardate = buycardate;
    return this;
  }

  public void unsetBuycardate() {
    this.buycardate = null;
  }

  /** Returns true if field buycardate is set (has been assigned a value) and false otherwise */
  public boolean isSetBuycardate() {
    return this.buycardate != null;
  }

  public void setBuycardateIsSet(boolean value) {
    if (!value) {
      this.buycardate = null;
    }
  }

  public String getCarpublishtime() {
    return this.carpublishtime;
  }

  public DTOCarInfoIndexField setCarpublishtime(String carpublishtime) {
    this.carpublishtime = carpublishtime;
    return this;
  }

  public void unsetCarpublishtime() {
    this.carpublishtime = null;
  }

  /** Returns true if field carpublishtime is set (has been assigned a value) and false otherwise */
  public boolean isSetCarpublishtime() {
    return this.carpublishtime != null;
  }

  public void setCarpublishtimeIsSet(boolean value) {
    if (!value) {
      this.carpublishtime = null;
    }
  }

  public String getUcarpicwholepath() {
    return this.ucarpicwholepath;
  }

  public DTOCarInfoIndexField setUcarpicwholepath(String ucarpicwholepath) {
    this.ucarpicwholepath = ucarpicwholepath;
    return this;
  }

  public void unsetUcarpicwholepath() {
    this.ucarpicwholepath = null;
  }

  /** Returns true if field ucarpicwholepath is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarpicwholepath() {
    return this.ucarpicwholepath != null;
  }

  public void setUcarpicwholepathIsSet(boolean value) {
    if (!value) {
      this.ucarpicwholepath = null;
    }
  }

  public int getIsdealerrecommend() {
    return this.isdealerrecommend;
  }

  public DTOCarInfoIndexField setIsdealerrecommend(int isdealerrecommend) {
    this.isdealerrecommend = isdealerrecommend;
    setIsdealerrecommendIsSet(true);
    return this;
  }

  public void unsetIsdealerrecommend() {
    __isset_bit_vector.clear(__ISDEALERRECOMMEND_ISSET_ID);
  }

  /** Returns true if field isdealerrecommend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsdealerrecommend() {
    return __isset_bit_vector.get(__ISDEALERRECOMMEND_ISSET_ID);
  }

  public void setIsdealerrecommendIsSet(boolean value) {
    __isset_bit_vector.set(__ISDEALERRECOMMEND_ISSET_ID, value);
  }

  public int getIsauthenticated() {
    return this.isauthenticated;
  }

  public DTOCarInfoIndexField setIsauthenticated(int isauthenticated) {
    this.isauthenticated = isauthenticated;
    setIsauthenticatedIsSet(true);
    return this;
  }

  public void unsetIsauthenticated() {
    __isset_bit_vector.clear(__ISAUTHENTICATED_ISSET_ID);
  }

  /** Returns true if field isauthenticated is set (has been assigned a value) and false otherwise */
  public boolean isSetIsauthenticated() {
    return __isset_bit_vector.get(__ISAUTHENTICATED_ISSET_ID);
  }

  public void setIsauthenticatedIsSet(boolean value) {
    __isset_bit_vector.set(__ISAUTHENTICATED_ISSET_ID, value);
  }

  public int getIsrecommendgl() {
    return this.isrecommendgl;
  }

  public DTOCarInfoIndexField setIsrecommendgl(int isrecommendgl) {
    this.isrecommendgl = isrecommendgl;
    setIsrecommendglIsSet(true);
    return this;
  }

  public void unsetIsrecommendgl() {
    __isset_bit_vector.clear(__ISRECOMMENDGL_ISSET_ID);
  }

  /** Returns true if field isrecommendgl is set (has been assigned a value) and false otherwise */
  public boolean isSetIsrecommendgl() {
    return __isset_bit_vector.get(__ISRECOMMENDGL_ISSET_ID);
  }

  public void setIsrecommendglIsSet(boolean value) {
    __isset_bit_vector.set(__ISRECOMMENDGL_ISSET_ID, value);
  }

  public int getIsowncar() {
    return this.isowncar;
  }

  public DTOCarInfoIndexField setIsowncar(int isowncar) {
    this.isowncar = isowncar;
    setIsowncarIsSet(true);
    return this;
  }

  public void unsetIsowncar() {
    __isset_bit_vector.clear(__ISOWNCAR_ISSET_ID);
  }

  /** Returns true if field isowncar is set (has been assigned a value) and false otherwise */
  public boolean isSetIsowncar() {
    return __isset_bit_vector.get(__ISOWNCAR_ISSET_ID);
  }

  public void setIsowncarIsSet(boolean value) {
    __isset_bit_vector.set(__ISOWNCAR_ISSET_ID, value);
  }

  public double getC2bprice() {
    return this.c2bprice;
  }

  public DTOCarInfoIndexField setC2bprice(double c2bprice) {
    this.c2bprice = c2bprice;
    setC2bpriceIsSet(true);
    return this;
  }

  public void unsetC2bprice() {
    __isset_bit_vector.clear(__C2BPRICE_ISSET_ID);
  }

  /** Returns true if field c2bprice is set (has been assigned a value) and false otherwise */
  public boolean isSetC2bprice() {
    return __isset_bit_vector.get(__C2BPRICE_ISSET_ID);
  }

  public void setC2bpriceIsSet(boolean value) {
    __isset_bit_vector.set(__C2BPRICE_ISSET_ID, value);
  }

  public int getIstop() {
    return this.istop;
  }

  public DTOCarInfoIndexField setIstop(int istop) {
    this.istop = istop;
    setIstopIsSet(true);
    return this;
  }

  public void unsetIstop() {
    __isset_bit_vector.clear(__ISTOP_ISSET_ID);
  }

  /** Returns true if field istop is set (has been assigned a value) and false otherwise */
  public boolean isSetIstop() {
    return __isset_bit_vector.get(__ISTOP_ISSET_ID);
  }

  public void setIstopIsSet(boolean value) {
    __isset_bit_vector.set(__ISTOP_ISSET_ID, value);
  }

  public String getStatedescription() {
    return this.statedescription;
  }

  public DTOCarInfoIndexField setStatedescription(String statedescription) {
    this.statedescription = statedescription;
    return this;
  }

  public void unsetStatedescription() {
    this.statedescription = null;
  }

  /** Returns true if field statedescription is set (has been assigned a value) and false otherwise */
  public boolean isSetStatedescription() {
    return this.statedescription != null;
  }

  public void setStatedescriptionIsSet(boolean value) {
    if (!value) {
      this.statedescription = null;
    }
  }

  public int getIswarranty() {
    return this.iswarranty;
  }

  public DTOCarInfoIndexField setIswarranty(int iswarranty) {
    this.iswarranty = iswarranty;
    setIswarrantyIsSet(true);
    return this;
  }

  public void unsetIswarranty() {
    __isset_bit_vector.clear(__ISWARRANTY_ISSET_ID);
  }

  /** Returns true if field iswarranty is set (has been assigned a value) and false otherwise */
  public boolean isSetIswarranty() {
    return __isset_bit_vector.get(__ISWARRANTY_ISSET_ID);
  }

  public void setIswarrantyIsSet(boolean value) {
    __isset_bit_vector.set(__ISWARRANTY_ISSET_ID, value);
  }

  public String getWarrantytypes() {
    return this.warrantytypes;
  }

  public DTOCarInfoIndexField setWarrantytypes(String warrantytypes) {
    this.warrantytypes = warrantytypes;
    return this;
  }

  public void unsetWarrantytypes() {
    this.warrantytypes = null;
  }

  /** Returns true if field warrantytypes is set (has been assigned a value) and false otherwise */
  public boolean isSetWarrantytypes() {
    return this.warrantytypes != null;
  }

  public void setWarrantytypesIsSet(boolean value) {
    if (!value) {
      this.warrantytypes = null;
    }
  }

  public int getIsshowmr() {
    return this.isshowmr;
  }

  public DTOCarInfoIndexField setIsshowmr(int isshowmr) {
    this.isshowmr = isshowmr;
    setIsshowmrIsSet(true);
    return this;
  }

  public void unsetIsshowmr() {
    __isset_bit_vector.clear(__ISSHOWMR_ISSET_ID);
  }

  /** Returns true if field isshowmr is set (has been assigned a value) and false otherwise */
  public boolean isSetIsshowmr() {
    return __isset_bit_vector.get(__ISSHOWMR_ISSET_ID);
  }

  public void setIsshowmrIsSet(boolean value) {
    __isset_bit_vector.set(__ISSHOWMR_ISSET_ID, value);
  }

  public String getCarprovincename() {
    return this.carprovincename;
  }

  public DTOCarInfoIndexField setCarprovincename(String carprovincename) {
    this.carprovincename = carprovincename;
    return this;
  }

  public void unsetCarprovincename() {
    this.carprovincename = null;
  }

  /** Returns true if field carprovincename is set (has been assigned a value) and false otherwise */
  public boolean isSetCarprovincename() {
    return this.carprovincename != null;
  }

  public void setCarprovincenameIsSet(boolean value) {
    if (!value) {
      this.carprovincename = null;
    }
  }

  public String getCarcityname() {
    return this.carcityname;
  }

  public DTOCarInfoIndexField setCarcityname(String carcityname) {
    this.carcityname = carcityname;
    return this;
  }

  public void unsetCarcityname() {
    this.carcityname = null;
  }

  /** Returns true if field carcityname is set (has been assigned a value) and false otherwise */
  public boolean isSetCarcityname() {
    return this.carcityname != null;
  }

  public void setCarcitynameIsSet(boolean value) {
    if (!value) {
      this.carcityname = null;
    }
  }

  public int getCardistrictid() {
    return this.cardistrictid;
  }

  public DTOCarInfoIndexField setCardistrictid(int cardistrictid) {
    this.cardistrictid = cardistrictid;
    setCardistrictidIsSet(true);
    return this;
  }

  public void unsetCardistrictid() {
    __isset_bit_vector.clear(__CARDISTRICTID_ISSET_ID);
  }

  /** Returns true if field cardistrictid is set (has been assigned a value) and false otherwise */
  public boolean isSetCardistrictid() {
    return __isset_bit_vector.get(__CARDISTRICTID_ISSET_ID);
  }

  public void setCardistrictidIsSet(boolean value) {
    __isset_bit_vector.set(__CARDISTRICTID_ISSET_ID, value);
  }

  public String getCardistrictname() {
    return this.cardistrictname;
  }

  public DTOCarInfoIndexField setCardistrictname(String cardistrictname) {
    this.cardistrictname = cardistrictname;
    return this;
  }

  public void unsetCardistrictname() {
    this.cardistrictname = null;
  }

  /** Returns true if field cardistrictname is set (has been assigned a value) and false otherwise */
  public boolean isSetCardistrictname() {
    return this.cardistrictname != null;
  }

  public void setCardistrictnameIsSet(boolean value) {
    if (!value) {
      this.cardistrictname = null;
    }
  }

  public String getSlogan() {
    return this.slogan;
  }

  public DTOCarInfoIndexField setSlogan(String slogan) {
    this.slogan = slogan;
    return this;
  }

  public void unsetSlogan() {
    this.slogan = null;
  }

  /** Returns true if field slogan is set (has been assigned a value) and false otherwise */
  public boolean isSetSlogan() {
    return this.slogan != null;
  }

  public void setSloganIsSet(boolean value) {
    if (!value) {
      this.slogan = null;
    }
  }

  public double getB2bprice() {
    return this.b2bprice;
  }

  public DTOCarInfoIndexField setB2bprice(double b2bprice) {
    this.b2bprice = b2bprice;
    setB2bpriceIsSet(true);
    return this;
  }

  public void unsetB2bprice() {
    __isset_bit_vector.clear(__B2BPRICE_ISSET_ID);
  }

  /** Returns true if field b2bprice is set (has been assigned a value) and false otherwise */
  public boolean isSetB2bprice() {
    return __isset_bit_vector.get(__B2BPRICE_ISSET_ID);
  }

  public void setB2bpriceIsSet(boolean value) {
    __isset_bit_vector.set(__B2BPRICE_ISSET_ID, value);
  }

  public int getIsb2b() {
    return this.isb2b;
  }

  public DTOCarInfoIndexField setIsb2b(int isb2b) {
    this.isb2b = isb2b;
    setIsb2bIsSet(true);
    return this;
  }

  public void unsetIsb2b() {
    __isset_bit_vector.clear(__ISB2B_ISSET_ID);
  }

  /** Returns true if field isb2b is set (has been assigned a value) and false otherwise */
  public boolean isSetIsb2b() {
    return __isset_bit_vector.get(__ISB2B_ISSET_ID);
  }

  public void setIsb2bIsSet(boolean value) {
    __isset_bit_vector.set(__ISB2B_ISSET_ID, value);
  }

  public int getMainbrandid() {
    return this.mainbrandid;
  }

  public DTOCarInfoIndexField setMainbrandid(int mainbrandid) {
    this.mainbrandid = mainbrandid;
    setMainbrandidIsSet(true);
    return this;
  }

  public void unsetMainbrandid() {
    __isset_bit_vector.clear(__MAINBRANDID_ISSET_ID);
  }

  /** Returns true if field mainbrandid is set (has been assigned a value) and false otherwise */
  public boolean isSetMainbrandid() {
    return __isset_bit_vector.get(__MAINBRANDID_ISSET_ID);
  }

  public void setMainbrandidIsSet(boolean value) {
    __isset_bit_vector.set(__MAINBRANDID_ISSET_ID, value);
  }

  public int getProducerid() {
    return this.producerid;
  }

  public DTOCarInfoIndexField setProducerid(int producerid) {
    this.producerid = producerid;
    setProduceridIsSet(true);
    return this;
  }

  public void unsetProducerid() {
    __isset_bit_vector.clear(__PRODUCERID_ISSET_ID);
  }

  /** Returns true if field producerid is set (has been assigned a value) and false otherwise */
  public boolean isSetProducerid() {
    return __isset_bit_vector.get(__PRODUCERID_ISSET_ID);
  }

  public void setProduceridIsSet(boolean value) {
    __isset_bit_vector.set(__PRODUCERID_ISSET_ID, value);
  }

  public String getCountry() {
    return this.country;
  }

  public DTOCarInfoIndexField setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public int getBrandid() {
    return this.brandid;
  }

  public DTOCarInfoIndexField setBrandid(int brandid) {
    this.brandid = brandid;
    setBrandidIsSet(true);
    return this;
  }

  public void unsetBrandid() {
    __isset_bit_vector.clear(__BRANDID_ISSET_ID);
  }

  /** Returns true if field brandid is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandid() {
    return __isset_bit_vector.get(__BRANDID_ISSET_ID);
  }

  public void setBrandidIsSet(boolean value) {
    __isset_bit_vector.set(__BRANDID_ISSET_ID, value);
  }

  public String getCarlevel() {
    return this.carlevel;
  }

  public DTOCarInfoIndexField setCarlevel(String carlevel) {
    this.carlevel = carlevel;
    return this;
  }

  public void unsetCarlevel() {
    this.carlevel = null;
  }

  /** Returns true if field carlevel is set (has been assigned a value) and false otherwise */
  public boolean isSetCarlevel() {
    return this.carlevel != null;
  }

  public void setCarlevelIsSet(boolean value) {
    if (!value) {
      this.carlevel = null;
    }
  }

  public int getCarlevelvalue() {
    return this.carlevelvalue;
  }

  public DTOCarInfoIndexField setCarlevelvalue(int carlevelvalue) {
    this.carlevelvalue = carlevelvalue;
    setCarlevelvalueIsSet(true);
    return this;
  }

  public void unsetCarlevelvalue() {
    __isset_bit_vector.clear(__CARLEVELVALUE_ISSET_ID);
  }

  /** Returns true if field carlevelvalue is set (has been assigned a value) and false otherwise */
  public boolean isSetCarlevelvalue() {
    return __isset_bit_vector.get(__CARLEVELVALUE_ISSET_ID);
  }

  public void setCarlevelvalueIsSet(boolean value) {
    __isset_bit_vector.set(__CARLEVELVALUE_ISSET_ID, value);
  }

  public long getCarid() {
    return this.carid;
  }

  public DTOCarInfoIndexField setCarid(long carid) {
    this.carid = carid;
    setCaridIsSet(true);
    return this;
  }

  public void unsetCarid() {
    __isset_bit_vector.clear(__CARID_ISSET_ID);
  }

  /** Returns true if field carid is set (has been assigned a value) and false otherwise */
  public boolean isSetCarid() {
    return __isset_bit_vector.get(__CARID_ISSET_ID);
  }

  public void setCaridIsSet(boolean value) {
    __isset_bit_vector.set(__CARID_ISSET_ID, value);
  }

  public int getGearboxtype() {
    return this.gearboxtype;
  }

  public DTOCarInfoIndexField setGearboxtype(int gearboxtype) {
    this.gearboxtype = gearboxtype;
    setGearboxtypeIsSet(true);
    return this;
  }

  public void unsetGearboxtype() {
    __isset_bit_vector.clear(__GEARBOXTYPE_ISSET_ID);
  }

  /** Returns true if field gearboxtype is set (has been assigned a value) and false otherwise */
  public boolean isSetGearboxtype() {
    return __isset_bit_vector.get(__GEARBOXTYPE_ISSET_ID);
  }

  public void setGearboxtypeIsSet(boolean value) {
    __isset_bit_vector.set(__GEARBOXTYPE_ISSET_ID, value);
  }

  public String getGearboxtypestring() {
    return this.gearboxtypestring;
  }

  public DTOCarInfoIndexField setGearboxtypestring(String gearboxtypestring) {
    this.gearboxtypestring = gearboxtypestring;
    return this;
  }

  public void unsetGearboxtypestring() {
    this.gearboxtypestring = null;
  }

  /** Returns true if field gearboxtypestring is set (has been assigned a value) and false otherwise */
  public boolean isSetGearboxtypestring() {
    return this.gearboxtypestring != null;
  }

  public void setGearboxtypestringIsSet(boolean value) {
    if (!value) {
      this.gearboxtypestring = null;
    }
  }

  public double getExhaustvalue() {
    return this.exhaustvalue;
  }

  public DTOCarInfoIndexField setExhaustvalue(double exhaustvalue) {
    this.exhaustvalue = exhaustvalue;
    setExhaustvalueIsSet(true);
    return this;
  }

  public void unsetExhaustvalue() {
    __isset_bit_vector.clear(__EXHAUSTVALUE_ISSET_ID);
  }

  /** Returns true if field exhaustvalue is set (has been assigned a value) and false otherwise */
  public boolean isSetExhaustvalue() {
    return __isset_bit_vector.get(__EXHAUSTVALUE_ISSET_ID);
  }

  public void setExhaustvalueIsSet(boolean value) {
    __isset_bit_vector.set(__EXHAUSTVALUE_ISSET_ID, value);
  }

  public int getCaryear() {
    return this.caryear;
  }

  public DTOCarInfoIndexField setCaryear(int caryear) {
    this.caryear = caryear;
    setCaryearIsSet(true);
    return this;
  }

  public void unsetCaryear() {
    __isset_bit_vector.clear(__CARYEAR_ISSET_ID);
  }

  /** Returns true if field caryear is set (has been assigned a value) and false otherwise */
  public boolean isSetCaryear() {
    return __isset_bit_vector.get(__CARYEAR_ISSET_ID);
  }

  public void setCaryearIsSet(boolean value) {
    __isset_bit_vector.set(__CARYEAR_ISSET_ID, value);
  }

  public double getCarreferprice() {
    return this.carreferprice;
  }

  public DTOCarInfoIndexField setCarreferprice(double carreferprice) {
    this.carreferprice = carreferprice;
    setCarreferpriceIsSet(true);
    return this;
  }

  public void unsetCarreferprice() {
    __isset_bit_vector.clear(__CARREFERPRICE_ISSET_ID);
  }

  /** Returns true if field carreferprice is set (has been assigned a value) and false otherwise */
  public boolean isSetCarreferprice() {
    return __isset_bit_vector.get(__CARREFERPRICE_ISSET_ID);
  }

  public void setCarreferpriceIsSet(boolean value) {
    __isset_bit_vector.set(__CARREFERPRICE_ISSET_ID, value);
  }

  public String getEnvirstandard() {
    return this.envirstandard;
  }

  public DTOCarInfoIndexField setEnvirstandard(String envirstandard) {
    this.envirstandard = envirstandard;
    return this;
  }

  public void unsetEnvirstandard() {
    this.envirstandard = null;
  }

  /** Returns true if field envirstandard is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvirstandard() {
    return this.envirstandard != null;
  }

  public void setEnvirstandardIsSet(boolean value) {
    if (!value) {
      this.envirstandard = null;
    }
  }

  public double getConsumption() {
    return this.consumption;
  }

  public DTOCarInfoIndexField setConsumption(double consumption) {
    this.consumption = consumption;
    setConsumptionIsSet(true);
    return this;
  }

  public void unsetConsumption() {
    __isset_bit_vector.clear(__CONSUMPTION_ISSET_ID);
  }

  /** Returns true if field consumption is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumption() {
    return __isset_bit_vector.get(__CONSUMPTION_ISSET_ID);
  }

  public void setConsumptionIsSet(boolean value) {
    __isset_bit_vector.set(__CONSUMPTION_ISSET_ID, value);
  }

  public int getOiltype() {
    return this.oiltype;
  }

  public DTOCarInfoIndexField setOiltype(int oiltype) {
    this.oiltype = oiltype;
    setOiltypeIsSet(true);
    return this;
  }

  public void unsetOiltype() {
    __isset_bit_vector.clear(__OILTYPE_ISSET_ID);
  }

  /** Returns true if field oiltype is set (has been assigned a value) and false otherwise */
  public boolean isSetOiltype() {
    return __isset_bit_vector.get(__OILTYPE_ISSET_ID);
  }

  public void setOiltypeIsSet(boolean value) {
    __isset_bit_vector.set(__OILTYPE_ISSET_ID, value);
  }

  public int getEnginelocation() {
    return this.enginelocation;
  }

  public DTOCarInfoIndexField setEnginelocation(int enginelocation) {
    this.enginelocation = enginelocation;
    setEnginelocationIsSet(true);
    return this;
  }

  public void unsetEnginelocation() {
    __isset_bit_vector.clear(__ENGINELOCATION_ISSET_ID);
  }

  /** Returns true if field enginelocation is set (has been assigned a value) and false otherwise */
  public boolean isSetEnginelocation() {
    return __isset_bit_vector.get(__ENGINELOCATION_ISSET_ID);
  }

  public void setEnginelocationIsSet(boolean value) {
    __isset_bit_vector.set(__ENGINELOCATION_ISSET_ID, value);
  }

  public int getBodydoors() {
    return this.bodydoors;
  }

  public DTOCarInfoIndexField setBodydoors(int bodydoors) {
    this.bodydoors = bodydoors;
    setBodydoorsIsSet(true);
    return this;
  }

  public void unsetBodydoors() {
    __isset_bit_vector.clear(__BODYDOORS_ISSET_ID);
  }

  /** Returns true if field bodydoors is set (has been assigned a value) and false otherwise */
  public boolean isSetBodydoors() {
    return __isset_bit_vector.get(__BODYDOORS_ISSET_ID);
  }

  public void setBodydoorsIsSet(boolean value) {
    __isset_bit_vector.set(__BODYDOORS_ISSET_ID, value);
  }

  public int getSeatnummin() {
    return this.seatnummin;
  }

  public DTOCarInfoIndexField setSeatnummin(int seatnummin) {
    this.seatnummin = seatnummin;
    setSeatnumminIsSet(true);
    return this;
  }

  public void unsetSeatnummin() {
    __isset_bit_vector.clear(__SEATNUMMIN_ISSET_ID);
  }

  /** Returns true if field seatnummin is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatnummin() {
    return __isset_bit_vector.get(__SEATNUMMIN_ISSET_ID);
  }

  public void setSeatnumminIsSet(boolean value) {
    __isset_bit_vector.set(__SEATNUMMIN_ISSET_ID, value);
  }

  public int getSeatnummax() {
    return this.seatnummax;
  }

  public DTOCarInfoIndexField setSeatnummax(int seatnummax) {
    this.seatnummax = seatnummax;
    setSeatnummaxIsSet(true);
    return this;
  }

  public void unsetSeatnummax() {
    __isset_bit_vector.clear(__SEATNUMMAX_ISSET_ID);
  }

  /** Returns true if field seatnummax is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatnummax() {
    return __isset_bit_vector.get(__SEATNUMMAX_ISSET_ID);
  }

  public void setSeatnummaxIsSet(boolean value) {
    __isset_bit_vector.set(__SEATNUMMAX_ISSET_ID, value);
  }

  public int getIswagon() {
    return this.iswagon;
  }

  public DTOCarInfoIndexField setIswagon(int iswagon) {
    this.iswagon = iswagon;
    setIswagonIsSet(true);
    return this;
  }

  public void unsetIswagon() {
    __isset_bit_vector.clear(__ISWAGON_ISSET_ID);
  }

  /** Returns true if field iswagon is set (has been assigned a value) and false otherwise */
  public boolean isSetIswagon() {
    return __isset_bit_vector.get(__ISWAGON_ISSET_ID);
  }

  public void setIswagonIsSet(boolean value) {
    __isset_bit_vector.set(__ISWAGON_ISSET_ID, value);
  }

  public int getDrivetype() {
    return this.drivetype;
  }

  public DTOCarInfoIndexField setDrivetype(int drivetype) {
    this.drivetype = drivetype;
    setDrivetypeIsSet(true);
    return this;
  }

  public void unsetDrivetype() {
    __isset_bit_vector.clear(__DRIVETYPE_ISSET_ID);
  }

  /** Returns true if field drivetype is set (has been assigned a value) and false otherwise */
  public boolean isSetDrivetype() {
    return __isset_bit_vector.get(__DRIVETYPE_ISSET_ID);
  }

  public void setDrivetypeIsSet(boolean value) {
    __isset_bit_vector.set(__DRIVETYPE_ISSET_ID, value);
  }

  public int getIsagency() {
    return this.isagency;
  }

  public DTOCarInfoIndexField setIsagency(int isagency) {
    this.isagency = isagency;
    setIsagencyIsSet(true);
    return this;
  }

  public void unsetIsagency() {
    __isset_bit_vector.clear(__ISAGENCY_ISSET_ID);
  }

  /** Returns true if field isagency is set (has been assigned a value) and false otherwise */
  public boolean isSetIsagency() {
    return __isset_bit_vector.get(__ISAGENCY_ISSET_ID);
  }

  public void setIsagencyIsSet(boolean value) {
    __isset_bit_vector.set(__ISAGENCY_ISSET_ID, value);
  }

  public int getCsbodyform() {
    return this.csbodyform;
  }

  public DTOCarInfoIndexField setCsbodyform(int csbodyform) {
    this.csbodyform = csbodyform;
    setCsbodyformIsSet(true);
    return this;
  }

  public void unsetCsbodyform() {
    __isset_bit_vector.clear(__CSBODYFORM_ISSET_ID);
  }

  /** Returns true if field csbodyform is set (has been assigned a value) and false otherwise */
  public boolean isSetCsbodyform() {
    return __isset_bit_vector.get(__CSBODYFORM_ISSET_ID);
  }

  public void setCsbodyformIsSet(boolean value) {
    __isset_bit_vector.set(__CSBODYFORM_ISSET_ID, value);
  }

  public int getBrandattr() {
    return this.brandattr;
  }

  public DTOCarInfoIndexField setBrandattr(int brandattr) {
    this.brandattr = brandattr;
    setBrandattrIsSet(true);
    return this;
  }

  public void unsetBrandattr() {
    __isset_bit_vector.clear(__BRANDATTR_ISSET_ID);
  }

  /** Returns true if field brandattr is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandattr() {
    return __isset_bit_vector.get(__BRANDATTR_ISSET_ID);
  }

  public void setBrandattrIsSet(boolean value) {
    __isset_bit_vector.set(__BRANDATTR_ISSET_ID, value);
  }

  public int getIsmarkingvendor() {
    return this.ismarkingvendor;
  }

  public DTOCarInfoIndexField setIsmarkingvendor(int ismarkingvendor) {
    this.ismarkingvendor = ismarkingvendor;
    setIsmarkingvendorIsSet(true);
    return this;
  }

  public void unsetIsmarkingvendor() {
    __isset_bit_vector.clear(__ISMARKINGVENDOR_ISSET_ID);
  }

  /** Returns true if field ismarkingvendor is set (has been assigned a value) and false otherwise */
  public boolean isSetIsmarkingvendor() {
    return __isset_bit_vector.get(__ISMARKINGVENDOR_ISSET_ID);
  }

  public void setIsmarkingvendorIsSet(boolean value) {
    __isset_bit_vector.set(__ISMARKINGVENDOR_ISSET_ID, value);
  }

  public int getCountryvalue() {
    return this.countryvalue;
  }

  public DTOCarInfoIndexField setCountryvalue(int countryvalue) {
    this.countryvalue = countryvalue;
    setCountryvalueIsSet(true);
    return this;
  }

  public void unsetCountryvalue() {
    __isset_bit_vector.clear(__COUNTRYVALUE_ISSET_ID);
  }

  /** Returns true if field countryvalue is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryvalue() {
    return __isset_bit_vector.get(__COUNTRYVALUE_ISSET_ID);
  }

  public void setCountryvalueIsSet(boolean value) {
    __isset_bit_vector.set(__COUNTRYVALUE_ISSET_ID, value);
  }

  public int getUserid() {
    return this.userid;
  }

  public DTOCarInfoIndexField setUserid(int userid) {
    this.userid = userid;
    setUseridIsSet(true);
    return this;
  }

  public void unsetUserid() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userid is set (has been assigned a value) and false otherwise */
  public boolean isSetUserid() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUseridIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public int getSuperiorid() {
    return this.superiorid;
  }

  public DTOCarInfoIndexField setSuperiorid(int superiorid) {
    this.superiorid = superiorid;
    setSuperioridIsSet(true);
    return this;
  }

  public void unsetSuperiorid() {
    __isset_bit_vector.clear(__SUPERIORID_ISSET_ID);
  }

  /** Returns true if field superiorid is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorid() {
    return __isset_bit_vector.get(__SUPERIORID_ISSET_ID);
  }

  public void setSuperioridIsSet(boolean value) {
    __isset_bit_vector.set(__SUPERIORID_ISSET_ID, value);
  }

  public String getVendorname() {
    return this.vendorname;
  }

  public DTOCarInfoIndexField setVendorname(String vendorname) {
    this.vendorname = vendorname;
    return this;
  }

  public void unsetVendorname() {
    this.vendorname = null;
  }

  /** Returns true if field vendorname is set (has been assigned a value) and false otherwise */
  public boolean isSetVendorname() {
    return this.vendorname != null;
  }

  public void setVendornameIsSet(boolean value) {
    if (!value) {
      this.vendorname = null;
    }
  }

  public int getVendortype() {
    return this.vendortype;
  }

  public DTOCarInfoIndexField setVendortype(int vendortype) {
    this.vendortype = vendortype;
    setVendortypeIsSet(true);
    return this;
  }

  public void unsetVendortype() {
    __isset_bit_vector.clear(__VENDORTYPE_ISSET_ID);
  }

  /** Returns true if field vendortype is set (has been assigned a value) and false otherwise */
  public boolean isSetVendortype() {
    return __isset_bit_vector.get(__VENDORTYPE_ISSET_ID);
  }

  public void setVendortypeIsSet(boolean value) {
    __isset_bit_vector.set(__VENDORTYPE_ISSET_ID, value);
  }

  public String getContact() {
    return this.contact;
  }

  public DTOCarInfoIndexField setContact(String contact) {
    this.contact = contact;
    return this;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public int getIsjdvendor() {
    return this.isjdvendor;
  }

  public DTOCarInfoIndexField setIsjdvendor(int isjdvendor) {
    this.isjdvendor = isjdvendor;
    setIsjdvendorIsSet(true);
    return this;
  }

  public void unsetIsjdvendor() {
    __isset_bit_vector.clear(__ISJDVENDOR_ISSET_ID);
  }

  /** Returns true if field isjdvendor is set (has been assigned a value) and false otherwise */
  public boolean isSetIsjdvendor() {
    return __isset_bit_vector.get(__ISJDVENDOR_ISSET_ID);
  }

  public void setIsjdvendorIsSet(boolean value) {
    __isset_bit_vector.set(__ISJDVENDOR_ISSET_ID, value);
  }

  public int getIsinctransfer() {
    return this.isinctransfer;
  }

  public DTOCarInfoIndexField setIsinctransfer(int isinctransfer) {
    this.isinctransfer = isinctransfer;
    setIsinctransferIsSet(true);
    return this;
  }

  public void unsetIsinctransfer() {
    __isset_bit_vector.clear(__ISINCTRANSFER_ISSET_ID);
  }

  /** Returns true if field isinctransfer is set (has been assigned a value) and false otherwise */
  public boolean isSetIsinctransfer() {
    return __isset_bit_vector.get(__ISINCTRANSFER_ISSET_ID);
  }

  public void setIsinctransferIsSet(boolean value) {
    __isset_bit_vector.set(__ISINCTRANSFER_ISSET_ID, value);
  }

  public int getUsertype() {
    return this.usertype;
  }

  public DTOCarInfoIndexField setUsertype(int usertype) {
    this.usertype = usertype;
    setUsertypeIsSet(true);
    return this;
  }

  public void unsetUsertype() {
    __isset_bit_vector.clear(__USERTYPE_ISSET_ID);
  }

  /** Returns true if field usertype is set (has been assigned a value) and false otherwise */
  public boolean isSetUsertype() {
    return __isset_bit_vector.get(__USERTYPE_ISSET_ID);
  }

  public void setUsertypeIsSet(boolean value) {
    __isset_bit_vector.set(__USERTYPE_ISSET_ID, value);
  }

  public int getIsactivity() {
    return this.isactivity;
  }

  public DTOCarInfoIndexField setIsactivity(int isactivity) {
    this.isactivity = isactivity;
    setIsactivityIsSet(true);
    return this;
  }

  public void unsetIsactivity() {
    __isset_bit_vector.clear(__ISACTIVITY_ISSET_ID);
  }

  /** Returns true if field isactivity is set (has been assigned a value) and false otherwise */
  public boolean isSetIsactivity() {
    return __isset_bit_vector.get(__ISACTIVITY_ISSET_ID);
  }

  public void setIsactivityIsSet(boolean value) {
    __isset_bit_vector.set(__ISACTIVITY_ISSET_ID, value);
  }

  public int getMembertype() {
    return this.membertype;
  }

  public DTOCarInfoIndexField setMembertype(int membertype) {
    this.membertype = membertype;
    setMembertypeIsSet(true);
    return this;
  }

  public void unsetMembertype() {
    __isset_bit_vector.clear(__MEMBERTYPE_ISSET_ID);
  }

  /** Returns true if field membertype is set (has been assigned a value) and false otherwise */
  public boolean isSetMembertype() {
    return __isset_bit_vector.get(__MEMBERTYPE_ISSET_ID);
  }

  public void setMembertypeIsSet(boolean value) {
    __isset_bit_vector.set(__MEMBERTYPE_ISSET_ID, value);
  }

  public int getIsbangmai() {
    return this.isbangmai;
  }

  public DTOCarInfoIndexField setIsbangmai(int isbangmai) {
    this.isbangmai = isbangmai;
    setIsbangmaiIsSet(true);
    return this;
  }

  public void unsetIsbangmai() {
    __isset_bit_vector.clear(__ISBANGMAI_ISSET_ID);
  }

  /** Returns true if field isbangmai is set (has been assigned a value) and false otherwise */
  public boolean isSetIsbangmai() {
    return __isset_bit_vector.get(__ISBANGMAI_ISSET_ID);
  }

  public void setIsbangmaiIsSet(boolean value) {
    __isset_bit_vector.set(__ISBANGMAI_ISSET_ID, value);
  }

  public int getDvqflag() {
    return this.dvqflag;
  }

  public DTOCarInfoIndexField setDvqflag(int dvqflag) {
    this.dvqflag = dvqflag;
    setDvqflagIsSet(true);
    return this;
  }

  public void unsetDvqflag() {
    __isset_bit_vector.clear(__DVQFLAG_ISSET_ID);
  }

  /** Returns true if field dvqflag is set (has been assigned a value) and false otherwise */
  public boolean isSetDvqflag() {
    return __isset_bit_vector.get(__DVQFLAG_ISSET_ID);
  }

  public void setDvqflagIsSet(boolean value) {
    __isset_bit_vector.set(__DVQFLAG_ISSET_ID, value);
  }

  public int getIsbangmaiche() {
    return this.isbangmaiche;
  }

  public DTOCarInfoIndexField setIsbangmaiche(int isbangmaiche) {
    this.isbangmaiche = isbangmaiche;
    setIsbangmaicheIsSet(true);
    return this;
  }

  public void unsetIsbangmaiche() {
    __isset_bit_vector.clear(__ISBANGMAICHE_ISSET_ID);
  }

  /** Returns true if field isbangmaiche is set (has been assigned a value) and false otherwise */
  public boolean isSetIsbangmaiche() {
    return __isset_bit_vector.get(__ISBANGMAICHE_ISSET_ID);
  }

  public void setIsbangmaicheIsSet(boolean value) {
    __isset_bit_vector.set(__ISBANGMAICHE_ISSET_ID, value);
  }

  public String getBaidumap() {
    return this.baidumap;
  }

  public DTOCarInfoIndexField setBaidumap(String baidumap) {
    this.baidumap = baidumap;
    return this;
  }

  public void unsetBaidumap() {
    this.baidumap = null;
  }

  /** Returns true if field baidumap is set (has been assigned a value) and false otherwise */
  public boolean isSetBaidumap() {
    return this.baidumap != null;
  }

  public void setBaidumapIsSet(boolean value) {
    if (!value) {
      this.baidumap = null;
    }
  }

  public double getDistance() {
    return this.distance;
  }

  public DTOCarInfoIndexField setDistance(double distance) {
    this.distance = distance;
    setDistanceIsSet(true);
    return this;
  }

  public void unsetDistance() {
    __isset_bit_vector.clear(__DISTANCE_ISSET_ID);
  }

  /** Returns true if field distance is set (has been assigned a value) and false otherwise */
  public boolean isSetDistance() {
    return __isset_bit_vector.get(__DISTANCE_ISSET_ID);
  }

  public void setDistanceIsSet(boolean value) {
    __isset_bit_vector.set(__DISTANCE_ISSET_ID, value);
  }

  public String getLinkman() {
    return this.linkman;
  }

  public DTOCarInfoIndexField setLinkman(String linkman) {
    this.linkman = linkman;
    return this;
  }

  public void unsetLinkman() {
    this.linkman = null;
  }

  /** Returns true if field linkman is set (has been assigned a value) and false otherwise */
  public boolean isSetLinkman() {
    return this.linkman != null;
  }

  public void setLinkmanIsSet(boolean value) {
    if (!value) {
      this.linkman = null;
    }
  }

  public String getCartypeconfig() {
    return this.cartypeconfig;
  }

  public DTOCarInfoIndexField setCartypeconfig(String cartypeconfig) {
    this.cartypeconfig = cartypeconfig;
    return this;
  }

  public void unsetCartypeconfig() {
    this.cartypeconfig = null;
  }

  /** Returns true if field cartypeconfig is set (has been assigned a value) and false otherwise */
  public boolean isSetCartypeconfig() {
    return this.cartypeconfig != null;
  }

  public void setCartypeconfigIsSet(boolean value) {
    if (!value) {
      this.cartypeconfig = null;
    }
  }

  public int getSiteid() {
    return this.siteid;
  }

  public DTOCarInfoIndexField setSiteid(int siteid) {
    this.siteid = siteid;
    setSiteidIsSet(true);
    return this;
  }

  public void unsetSiteid() {
    __isset_bit_vector.clear(__SITEID_ISSET_ID);
  }

  /** Returns true if field siteid is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteid() {
    return __isset_bit_vector.get(__SITEID_ISSET_ID);
  }

  public void setSiteidIsSet(boolean value) {
    __isset_bit_vector.set(__SITEID_ISSET_ID, value);
  }

  public String getCartitle() {
    return this.cartitle;
  }

  public DTOCarInfoIndexField setCartitle(String cartitle) {
    this.cartitle = cartitle;
    return this;
  }

  public void unsetCartitle() {
    this.cartitle = null;
  }

  /** Returns true if field cartitle is set (has been assigned a value) and false otherwise */
  public boolean isSetCartitle() {
    return this.cartitle != null;
  }

  public void setCartitleIsSet(boolean value) {
    if (!value) {
      this.cartitle = null;
    }
  }

  public int getCarlevelsecond() {
    return this.carlevelsecond;
  }

  public DTOCarInfoIndexField setCarlevelsecond(int carlevelsecond) {
    this.carlevelsecond = carlevelsecond;
    setCarlevelsecondIsSet(true);
    return this;
  }

  public void unsetCarlevelsecond() {
    __isset_bit_vector.clear(__CARLEVELSECOND_ISSET_ID);
  }

  /** Returns true if field carlevelsecond is set (has been assigned a value) and false otherwise */
  public boolean isSetCarlevelsecond() {
    return __isset_bit_vector.get(__CARLEVELSECOND_ISSET_ID);
  }

  public void setCarlevelsecondIsSet(boolean value) {
    __isset_bit_vector.set(__CARLEVELSECOND_ISSET_ID, value);
  }

  public int getIscheckreportjson() {
    return this.ischeckreportjson;
  }

  public DTOCarInfoIndexField setIscheckreportjson(int ischeckreportjson) {
    this.ischeckreportjson = ischeckreportjson;
    setIscheckreportjsonIsSet(true);
    return this;
  }

  public void unsetIscheckreportjson() {
    __isset_bit_vector.clear(__ISCHECKREPORTJSON_ISSET_ID);
  }

  /** Returns true if field ischeckreportjson is set (has been assigned a value) and false otherwise */
  public boolean isSetIscheckreportjson() {
    return __isset_bit_vector.get(__ISCHECKREPORTJSON_ISSET_ID);
  }

  public void setIscheckreportjsonIsSet(boolean value) {
    __isset_bit_vector.set(__ISCHECKREPORTJSON_ISSET_ID, value);
  }

  public long getClickcount() {
    return this.clickcount;
  }

  public DTOCarInfoIndexField setClickcount(long clickcount) {
    this.clickcount = clickcount;
    setClickcountIsSet(true);
    return this;
  }

  public void unsetClickcount() {
    __isset_bit_vector.clear(__CLICKCOUNT_ISSET_ID);
  }

  /** Returns true if field clickcount is set (has been assigned a value) and false otherwise */
  public boolean isSetClickcount() {
    return __isset_bit_vector.get(__CLICKCOUNT_ISSET_ID);
  }

  public void setClickcountIsSet(boolean value) {
    __isset_bit_vector.set(__CLICKCOUNT_ISSET_ID, value);
  }

  public int getCrmcustomerid() {
    return this.crmcustomerid;
  }

  public DTOCarInfoIndexField setCrmcustomerid(int crmcustomerid) {
    this.crmcustomerid = crmcustomerid;
    setCrmcustomeridIsSet(true);
    return this;
  }

  public void unsetCrmcustomerid() {
    __isset_bit_vector.clear(__CRMCUSTOMERID_ISSET_ID);
  }

  /** Returns true if field crmcustomerid is set (has been assigned a value) and false otherwise */
  public boolean isSetCrmcustomerid() {
    return __isset_bit_vector.get(__CRMCUSTOMERID_ISSET_ID);
  }

  public void setCrmcustomeridIsSet(boolean value) {
    __isset_bit_vector.set(__CRMCUSTOMERID_ISSET_ID, value);
  }

  public double getBoost() {
    return this.boost;
  }

  public DTOCarInfoIndexField setBoost(double boost) {
    this.boost = boost;
    setBoostIsSet(true);
    return this;
  }

  public void unsetBoost() {
    __isset_bit_vector.clear(__BOOST_ISSET_ID);
  }

  /** Returns true if field boost is set (has been assigned a value) and false otherwise */
  public boolean isSetBoost() {
    return __isset_bit_vector.get(__BOOST_ISSET_ID);
  }

  public void setBoostIsSet(boolean value) {
    __isset_bit_vector.set(__BOOST_ISSET_ID, value);
  }

  public double getBoostc() {
    return this.boostc;
  }

  public DTOCarInfoIndexField setBoostc(double boostc) {
    this.boostc = boostc;
    setBoostcIsSet(true);
    return this;
  }

  public void unsetBoostc() {
    __isset_bit_vector.clear(__BOOSTC_ISSET_ID);
  }

  /** Returns true if field boostc is set (has been assigned a value) and false otherwise */
  public boolean isSetBoostc() {
    return __isset_bit_vector.get(__BOOSTC_ISSET_ID);
  }

  public void setBoostcIsSet(boolean value) {
    __isset_bit_vector.set(__BOOSTC_ISSET_ID, value);
  }

  public double getBoostapp() {
    return this.boostapp;
  }

  public DTOCarInfoIndexField setBoostapp(double boostapp) {
    this.boostapp = boostapp;
    setBoostappIsSet(true);
    return this;
  }

  public void unsetBoostapp() {
    __isset_bit_vector.clear(__BOOSTAPP_ISSET_ID);
  }

  /** Returns true if field boostapp is set (has been assigned a value) and false otherwise */
  public boolean isSetBoostapp() {
    return __isset_bit_vector.get(__BOOSTAPP_ISSET_ID);
  }

  public void setBoostappIsSet(boolean value) {
    __isset_bit_vector.set(__BOOSTAPP_ISSET_ID, value);
  }

  public double getScore() {
    return this.score;
  }

  public DTOCarInfoIndexField setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bit_vector.clear(__SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return __isset_bit_vector.get(__SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bit_vector.set(__SCORE_ISSET_ID, value);
  }

  public double getCostrate() {
    return this.costrate;
  }

  public DTOCarInfoIndexField setCostrate(double costrate) {
    this.costrate = costrate;
    setCostrateIsSet(true);
    return this;
  }

  public void unsetCostrate() {
    __isset_bit_vector.clear(__COSTRATE_ISSET_ID);
  }

  /** Returns true if field costrate is set (has been assigned a value) and false otherwise */
  public boolean isSetCostrate() {
    return __isset_bit_vector.get(__COSTRATE_ISSET_ID);
  }

  public void setCostrateIsSet(boolean value) {
    __isset_bit_vector.set(__COSTRATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UCARID:
      if (value == null) {
        unsetUcarid();
      } else {
        setUcarid((Integer)value);
      }
      break;

    case UCARSERIALNUMBER:
      if (value == null) {
        unsetUcarserialnumber();
      } else {
        setUcarserialnumber((String)value);
      }
      break;

    case UCARSTATUS:
      if (value == null) {
        unsetUcarstatus();
      } else {
        setUcarstatus((Integer)value);
      }
      break;

    case CARPROVICEID:
      if (value == null) {
        unsetCarproviceid();
      } else {
        setCarproviceid((Integer)value);
      }
      break;

    case CARCITYID:
      if (value == null) {
        unsetCarcityid();
      } else {
        setCarcityid((Integer)value);
      }
      break;

    case COLOR:
      if (value == null) {
        unsetColor();
      } else {
        setColor((String)value);
      }
      break;

    case DRIVINGMILEAGE:
      if (value == null) {
        unsetDrivingmileage();
      } else {
        setDrivingmileage((Integer)value);
      }
      break;

    case COMPLETERATE:
      if (value == null) {
        unsetCompleterate();
      } else {
        setCompleterate((Integer)value);
      }
      break;

    case CARSOURCE1L:
      if (value == null) {
        unsetCarsource1l();
      } else {
        setCarsource1l((Integer)value);
      }
      break;

    case ISVIDEO:
      if (value == null) {
        unsetIsvideo();
      } else {
        setIsvideo((Integer)value);
      }
      break;

    case FIRSTPICTRUE:
      if (value == null) {
        unsetFirstpictrue();
      } else {
        setFirstpictrue((Integer)value);
      }
      break;

    case CARTYPE:
      if (value == null) {
        unsetCartype();
      } else {
        setCartype((Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case ISNEGLECT:
      if (value == null) {
        unsetIsneglect();
      } else {
        setIsneglect((Integer)value);
      }
      break;

    case PICTURECOUNT:
      if (value == null) {
        unsetPicturecount();
      } else {
        setPicturecount((Integer)value);
      }
      break;

    case PICTURENUMBER:
      if (value == null) {
        unsetPicturenumber();
      } else {
        setPicturenumber((Integer)value);
      }
      break;

    case DISPLAYPRICE:
      if (value == null) {
        unsetDisplayprice();
      } else {
        setDisplayprice((Double)value);
      }
      break;

    case STATUSMODIFYTIME:
      if (value == null) {
        unsetStatusmodifytime();
      } else {
        setStatusmodifytime((String)value);
      }
      break;

    case CREATETIME:
      if (value == null) {
        unsetCreatetime();
      } else {
        setCreatetime((String)value);
      }
      break;

    case BUYCARDATE:
      if (value == null) {
        unsetBuycardate();
      } else {
        setBuycardate((String)value);
      }
      break;

    case CARPUBLISHTIME:
      if (value == null) {
        unsetCarpublishtime();
      } else {
        setCarpublishtime((String)value);
      }
      break;

    case UCARPICWHOLEPATH:
      if (value == null) {
        unsetUcarpicwholepath();
      } else {
        setUcarpicwholepath((String)value);
      }
      break;

    case ISDEALERRECOMMEND:
      if (value == null) {
        unsetIsdealerrecommend();
      } else {
        setIsdealerrecommend((Integer)value);
      }
      break;

    case ISAUTHENTICATED:
      if (value == null) {
        unsetIsauthenticated();
      } else {
        setIsauthenticated((Integer)value);
      }
      break;

    case ISRECOMMENDGL:
      if (value == null) {
        unsetIsrecommendgl();
      } else {
        setIsrecommendgl((Integer)value);
      }
      break;

    case ISOWNCAR:
      if (value == null) {
        unsetIsowncar();
      } else {
        setIsowncar((Integer)value);
      }
      break;

    case C2BPRICE:
      if (value == null) {
        unsetC2bprice();
      } else {
        setC2bprice((Double)value);
      }
      break;

    case ISTOP:
      if (value == null) {
        unsetIstop();
      } else {
        setIstop((Integer)value);
      }
      break;

    case STATEDESCRIPTION:
      if (value == null) {
        unsetStatedescription();
      } else {
        setStatedescription((String)value);
      }
      break;

    case ISWARRANTY:
      if (value == null) {
        unsetIswarranty();
      } else {
        setIswarranty((Integer)value);
      }
      break;

    case WARRANTYTYPES:
      if (value == null) {
        unsetWarrantytypes();
      } else {
        setWarrantytypes((String)value);
      }
      break;

    case ISSHOWMR:
      if (value == null) {
        unsetIsshowmr();
      } else {
        setIsshowmr((Integer)value);
      }
      break;

    case CARPROVINCENAME:
      if (value == null) {
        unsetCarprovincename();
      } else {
        setCarprovincename((String)value);
      }
      break;

    case CARCITYNAME:
      if (value == null) {
        unsetCarcityname();
      } else {
        setCarcityname((String)value);
      }
      break;

    case CARDISTRICTID:
      if (value == null) {
        unsetCardistrictid();
      } else {
        setCardistrictid((Integer)value);
      }
      break;

    case CARDISTRICTNAME:
      if (value == null) {
        unsetCardistrictname();
      } else {
        setCardistrictname((String)value);
      }
      break;

    case SLOGAN:
      if (value == null) {
        unsetSlogan();
      } else {
        setSlogan((String)value);
      }
      break;

    case B2BPRICE:
      if (value == null) {
        unsetB2bprice();
      } else {
        setB2bprice((Double)value);
      }
      break;

    case ISB2B:
      if (value == null) {
        unsetIsb2b();
      } else {
        setIsb2b((Integer)value);
      }
      break;

    case MAINBRANDID:
      if (value == null) {
        unsetMainbrandid();
      } else {
        setMainbrandid((Integer)value);
      }
      break;

    case PRODUCERID:
      if (value == null) {
        unsetProducerid();
      } else {
        setProducerid((Integer)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case BRANDID:
      if (value == null) {
        unsetBrandid();
      } else {
        setBrandid((Integer)value);
      }
      break;

    case CARLEVEL:
      if (value == null) {
        unsetCarlevel();
      } else {
        setCarlevel((String)value);
      }
      break;

    case CARLEVELVALUE:
      if (value == null) {
        unsetCarlevelvalue();
      } else {
        setCarlevelvalue((Integer)value);
      }
      break;

    case CARID:
      if (value == null) {
        unsetCarid();
      } else {
        setCarid((Long)value);
      }
      break;

    case GEARBOXTYPE:
      if (value == null) {
        unsetGearboxtype();
      } else {
        setGearboxtype((Integer)value);
      }
      break;

    case GEARBOXTYPESTRING:
      if (value == null) {
        unsetGearboxtypestring();
      } else {
        setGearboxtypestring((String)value);
      }
      break;

    case EXHAUSTVALUE:
      if (value == null) {
        unsetExhaustvalue();
      } else {
        setExhaustvalue((Double)value);
      }
      break;

    case CARYEAR:
      if (value == null) {
        unsetCaryear();
      } else {
        setCaryear((Integer)value);
      }
      break;

    case CARREFERPRICE:
      if (value == null) {
        unsetCarreferprice();
      } else {
        setCarreferprice((Double)value);
      }
      break;

    case ENVIRSTANDARD:
      if (value == null) {
        unsetEnvirstandard();
      } else {
        setEnvirstandard((String)value);
      }
      break;

    case CONSUMPTION:
      if (value == null) {
        unsetConsumption();
      } else {
        setConsumption((Double)value);
      }
      break;

    case OILTYPE:
      if (value == null) {
        unsetOiltype();
      } else {
        setOiltype((Integer)value);
      }
      break;

    case ENGINELOCATION:
      if (value == null) {
        unsetEnginelocation();
      } else {
        setEnginelocation((Integer)value);
      }
      break;

    case BODYDOORS:
      if (value == null) {
        unsetBodydoors();
      } else {
        setBodydoors((Integer)value);
      }
      break;

    case SEATNUMMIN:
      if (value == null) {
        unsetSeatnummin();
      } else {
        setSeatnummin((Integer)value);
      }
      break;

    case SEATNUMMAX:
      if (value == null) {
        unsetSeatnummax();
      } else {
        setSeatnummax((Integer)value);
      }
      break;

    case ISWAGON:
      if (value == null) {
        unsetIswagon();
      } else {
        setIswagon((Integer)value);
      }
      break;

    case DRIVETYPE:
      if (value == null) {
        unsetDrivetype();
      } else {
        setDrivetype((Integer)value);
      }
      break;

    case ISAGENCY:
      if (value == null) {
        unsetIsagency();
      } else {
        setIsagency((Integer)value);
      }
      break;

    case CSBODYFORM:
      if (value == null) {
        unsetCsbodyform();
      } else {
        setCsbodyform((Integer)value);
      }
      break;

    case BRANDATTR:
      if (value == null) {
        unsetBrandattr();
      } else {
        setBrandattr((Integer)value);
      }
      break;

    case ISMARKINGVENDOR:
      if (value == null) {
        unsetIsmarkingvendor();
      } else {
        setIsmarkingvendor((Integer)value);
      }
      break;

    case COUNTRYVALUE:
      if (value == null) {
        unsetCountryvalue();
      } else {
        setCountryvalue((Integer)value);
      }
      break;

    case USERID:
      if (value == null) {
        unsetUserid();
      } else {
        setUserid((Integer)value);
      }
      break;

    case SUPERIORID:
      if (value == null) {
        unsetSuperiorid();
      } else {
        setSuperiorid((Integer)value);
      }
      break;

    case VENDORNAME:
      if (value == null) {
        unsetVendorname();
      } else {
        setVendorname((String)value);
      }
      break;

    case VENDORTYPE:
      if (value == null) {
        unsetVendortype();
      } else {
        setVendortype((Integer)value);
      }
      break;

    case CONTACT:
      if (value == null) {
        unsetContact();
      } else {
        setContact((String)value);
      }
      break;

    case ISJDVENDOR:
      if (value == null) {
        unsetIsjdvendor();
      } else {
        setIsjdvendor((Integer)value);
      }
      break;

    case ISINCTRANSFER:
      if (value == null) {
        unsetIsinctransfer();
      } else {
        setIsinctransfer((Integer)value);
      }
      break;

    case USERTYPE:
      if (value == null) {
        unsetUsertype();
      } else {
        setUsertype((Integer)value);
      }
      break;

    case ISACTIVITY:
      if (value == null) {
        unsetIsactivity();
      } else {
        setIsactivity((Integer)value);
      }
      break;

    case MEMBERTYPE:
      if (value == null) {
        unsetMembertype();
      } else {
        setMembertype((Integer)value);
      }
      break;

    case ISBANGMAI:
      if (value == null) {
        unsetIsbangmai();
      } else {
        setIsbangmai((Integer)value);
      }
      break;

    case DVQFLAG:
      if (value == null) {
        unsetDvqflag();
      } else {
        setDvqflag((Integer)value);
      }
      break;

    case ISBANGMAICHE:
      if (value == null) {
        unsetIsbangmaiche();
      } else {
        setIsbangmaiche((Integer)value);
      }
      break;

    case BAIDUMAP:
      if (value == null) {
        unsetBaidumap();
      } else {
        setBaidumap((String)value);
      }
      break;

    case DISTANCE:
      if (value == null) {
        unsetDistance();
      } else {
        setDistance((Double)value);
      }
      break;

    case LINKMAN:
      if (value == null) {
        unsetLinkman();
      } else {
        setLinkman((String)value);
      }
      break;

    case CARTYPECONFIG:
      if (value == null) {
        unsetCartypeconfig();
      } else {
        setCartypeconfig((String)value);
      }
      break;

    case SITEID:
      if (value == null) {
        unsetSiteid();
      } else {
        setSiteid((Integer)value);
      }
      break;

    case CARTITLE:
      if (value == null) {
        unsetCartitle();
      } else {
        setCartitle((String)value);
      }
      break;

    case CARLEVELSECOND:
      if (value == null) {
        unsetCarlevelsecond();
      } else {
        setCarlevelsecond((Integer)value);
      }
      break;

    case ISCHECKREPORTJSON:
      if (value == null) {
        unsetIscheckreportjson();
      } else {
        setIscheckreportjson((Integer)value);
      }
      break;

    case CLICKCOUNT:
      if (value == null) {
        unsetClickcount();
      } else {
        setClickcount((Long)value);
      }
      break;

    case CRMCUSTOMERID:
      if (value == null) {
        unsetCrmcustomerid();
      } else {
        setCrmcustomerid((Integer)value);
      }
      break;

    case BOOST:
      if (value == null) {
        unsetBoost();
      } else {
        setBoost((Double)value);
      }
      break;

    case BOOSTC:
      if (value == null) {
        unsetBoostc();
      } else {
        setBoostc((Double)value);
      }
      break;

    case BOOSTAPP:
      if (value == null) {
        unsetBoostapp();
      } else {
        setBoostapp((Double)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((Double)value);
      }
      break;

    case COSTRATE:
      if (value == null) {
        unsetCostrate();
      } else {
        setCostrate((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UCARID:
      return getUcarid();

    case UCARSERIALNUMBER:
      return getUcarserialnumber();

    case UCARSTATUS:
      return getUcarstatus();

    case CARPROVICEID:
      return getCarproviceid();

    case CARCITYID:
      return getCarcityid();

    case COLOR:
      return getColor();

    case DRIVINGMILEAGE:
      return getDrivingmileage();

    case COMPLETERATE:
      return getCompleterate();

    case CARSOURCE1L:
      return getCarsource1l();

    case ISVIDEO:
      return getIsvideo();

    case FIRSTPICTRUE:
      return getFirstpictrue();

    case CARTYPE:
      return getCartype();

    case SOURCE:
      return getSource();

    case ISNEGLECT:
      return getIsneglect();

    case PICTURECOUNT:
      return getPicturecount();

    case PICTURENUMBER:
      return getPicturenumber();

    case DISPLAYPRICE:
      return getDisplayprice();

    case STATUSMODIFYTIME:
      return getStatusmodifytime();

    case CREATETIME:
      return getCreatetime();

    case BUYCARDATE:
      return getBuycardate();

    case CARPUBLISHTIME:
      return getCarpublishtime();

    case UCARPICWHOLEPATH:
      return getUcarpicwholepath();

    case ISDEALERRECOMMEND:
      return getIsdealerrecommend();

    case ISAUTHENTICATED:
      return getIsauthenticated();

    case ISRECOMMENDGL:
      return getIsrecommendgl();

    case ISOWNCAR:
      return getIsowncar();

    case C2BPRICE:
      return getC2bprice();

    case ISTOP:
      return getIstop();

    case STATEDESCRIPTION:
      return getStatedescription();

    case ISWARRANTY:
      return getIswarranty();

    case WARRANTYTYPES:
      return getWarrantytypes();

    case ISSHOWMR:
      return getIsshowmr();

    case CARPROVINCENAME:
      return getCarprovincename();

    case CARCITYNAME:
      return getCarcityname();

    case CARDISTRICTID:
      return getCardistrictid();

    case CARDISTRICTNAME:
      return getCardistrictname();

    case SLOGAN:
      return getSlogan();

    case B2BPRICE:
      return getB2bprice();

    case ISB2B:
      return getIsb2b();

    case MAINBRANDID:
      return getMainbrandid();

    case PRODUCERID:
      return getProducerid();

    case COUNTRY:
      return getCountry();

    case BRANDID:
      return getBrandid();

    case CARLEVEL:
      return getCarlevel();

    case CARLEVELVALUE:
      return getCarlevelvalue();

    case CARID:
      return getCarid();

    case GEARBOXTYPE:
      return getGearboxtype();

    case GEARBOXTYPESTRING:
      return getGearboxtypestring();

    case EXHAUSTVALUE:
      return getExhaustvalue();

    case CARYEAR:
      return getCaryear();

    case CARREFERPRICE:
      return getCarreferprice();

    case ENVIRSTANDARD:
      return getEnvirstandard();

    case CONSUMPTION:
      return getConsumption();

    case OILTYPE:
      return getOiltype();

    case ENGINELOCATION:
      return getEnginelocation();

    case BODYDOORS:
      return getBodydoors();

    case SEATNUMMIN:
      return getSeatnummin();

    case SEATNUMMAX:
      return getSeatnummax();

    case ISWAGON:
      return getIswagon();

    case DRIVETYPE:
      return getDrivetype();

    case ISAGENCY:
      return getIsagency();

    case CSBODYFORM:
      return getCsbodyform();

    case BRANDATTR:
      return getBrandattr();

    case ISMARKINGVENDOR:
      return getIsmarkingvendor();

    case COUNTRYVALUE:
      return getCountryvalue();

    case USERID:
      return getUserid();

    case SUPERIORID:
      return getSuperiorid();

    case VENDORNAME:
      return getVendorname();

    case VENDORTYPE:
      return getVendortype();

    case CONTACT:
      return getContact();

    case ISJDVENDOR:
      return getIsjdvendor();

    case ISINCTRANSFER:
      return getIsinctransfer();

    case USERTYPE:
      return getUsertype();

    case ISACTIVITY:
      return getIsactivity();

    case MEMBERTYPE:
      return getMembertype();

    case ISBANGMAI:
      return getIsbangmai();

    case DVQFLAG:
      return getDvqflag();

    case ISBANGMAICHE:
      return getIsbangmaiche();

    case BAIDUMAP:
      return getBaidumap();

    case DISTANCE:
      return getDistance();

    case LINKMAN:
      return getLinkman();

    case CARTYPECONFIG:
      return getCartypeconfig();

    case SITEID:
      return getSiteid();

    case CARTITLE:
      return getCartitle();

    case CARLEVELSECOND:
      return getCarlevelsecond();

    case ISCHECKREPORTJSON:
      return getIscheckreportjson();

    case CLICKCOUNT:
      return getClickcount();

    case CRMCUSTOMERID:
      return getCrmcustomerid();

    case BOOST:
      return getBoost();

    case BOOSTC:
      return getBoostc();

    case BOOSTAPP:
      return getBoostapp();

    case SCORE:
      return getScore();

    case COSTRATE:
      return getCostrate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UCARID:
      return isSetUcarid();
    case UCARSERIALNUMBER:
      return isSetUcarserialnumber();
    case UCARSTATUS:
      return isSetUcarstatus();
    case CARPROVICEID:
      return isSetCarproviceid();
    case CARCITYID:
      return isSetCarcityid();
    case COLOR:
      return isSetColor();
    case DRIVINGMILEAGE:
      return isSetDrivingmileage();
    case COMPLETERATE:
      return isSetCompleterate();
    case CARSOURCE1L:
      return isSetCarsource1l();
    case ISVIDEO:
      return isSetIsvideo();
    case FIRSTPICTRUE:
      return isSetFirstpictrue();
    case CARTYPE:
      return isSetCartype();
    case SOURCE:
      return isSetSource();
    case ISNEGLECT:
      return isSetIsneglect();
    case PICTURECOUNT:
      return isSetPicturecount();
    case PICTURENUMBER:
      return isSetPicturenumber();
    case DISPLAYPRICE:
      return isSetDisplayprice();
    case STATUSMODIFYTIME:
      return isSetStatusmodifytime();
    case CREATETIME:
      return isSetCreatetime();
    case BUYCARDATE:
      return isSetBuycardate();
    case CARPUBLISHTIME:
      return isSetCarpublishtime();
    case UCARPICWHOLEPATH:
      return isSetUcarpicwholepath();
    case ISDEALERRECOMMEND:
      return isSetIsdealerrecommend();
    case ISAUTHENTICATED:
      return isSetIsauthenticated();
    case ISRECOMMENDGL:
      return isSetIsrecommendgl();
    case ISOWNCAR:
      return isSetIsowncar();
    case C2BPRICE:
      return isSetC2bprice();
    case ISTOP:
      return isSetIstop();
    case STATEDESCRIPTION:
      return isSetStatedescription();
    case ISWARRANTY:
      return isSetIswarranty();
    case WARRANTYTYPES:
      return isSetWarrantytypes();
    case ISSHOWMR:
      return isSetIsshowmr();
    case CARPROVINCENAME:
      return isSetCarprovincename();
    case CARCITYNAME:
      return isSetCarcityname();
    case CARDISTRICTID:
      return isSetCardistrictid();
    case CARDISTRICTNAME:
      return isSetCardistrictname();
    case SLOGAN:
      return isSetSlogan();
    case B2BPRICE:
      return isSetB2bprice();
    case ISB2B:
      return isSetIsb2b();
    case MAINBRANDID:
      return isSetMainbrandid();
    case PRODUCERID:
      return isSetProducerid();
    case COUNTRY:
      return isSetCountry();
    case BRANDID:
      return isSetBrandid();
    case CARLEVEL:
      return isSetCarlevel();
    case CARLEVELVALUE:
      return isSetCarlevelvalue();
    case CARID:
      return isSetCarid();
    case GEARBOXTYPE:
      return isSetGearboxtype();
    case GEARBOXTYPESTRING:
      return isSetGearboxtypestring();
    case EXHAUSTVALUE:
      return isSetExhaustvalue();
    case CARYEAR:
      return isSetCaryear();
    case CARREFERPRICE:
      return isSetCarreferprice();
    case ENVIRSTANDARD:
      return isSetEnvirstandard();
    case CONSUMPTION:
      return isSetConsumption();
    case OILTYPE:
      return isSetOiltype();
    case ENGINELOCATION:
      return isSetEnginelocation();
    case BODYDOORS:
      return isSetBodydoors();
    case SEATNUMMIN:
      return isSetSeatnummin();
    case SEATNUMMAX:
      return isSetSeatnummax();
    case ISWAGON:
      return isSetIswagon();
    case DRIVETYPE:
      return isSetDrivetype();
    case ISAGENCY:
      return isSetIsagency();
    case CSBODYFORM:
      return isSetCsbodyform();
    case BRANDATTR:
      return isSetBrandattr();
    case ISMARKINGVENDOR:
      return isSetIsmarkingvendor();
    case COUNTRYVALUE:
      return isSetCountryvalue();
    case USERID:
      return isSetUserid();
    case SUPERIORID:
      return isSetSuperiorid();
    case VENDORNAME:
      return isSetVendorname();
    case VENDORTYPE:
      return isSetVendortype();
    case CONTACT:
      return isSetContact();
    case ISJDVENDOR:
      return isSetIsjdvendor();
    case ISINCTRANSFER:
      return isSetIsinctransfer();
    case USERTYPE:
      return isSetUsertype();
    case ISACTIVITY:
      return isSetIsactivity();
    case MEMBERTYPE:
      return isSetMembertype();
    case ISBANGMAI:
      return isSetIsbangmai();
    case DVQFLAG:
      return isSetDvqflag();
    case ISBANGMAICHE:
      return isSetIsbangmaiche();
    case BAIDUMAP:
      return isSetBaidumap();
    case DISTANCE:
      return isSetDistance();
    case LINKMAN:
      return isSetLinkman();
    case CARTYPECONFIG:
      return isSetCartypeconfig();
    case SITEID:
      return isSetSiteid();
    case CARTITLE:
      return isSetCartitle();
    case CARLEVELSECOND:
      return isSetCarlevelsecond();
    case ISCHECKREPORTJSON:
      return isSetIscheckreportjson();
    case CLICKCOUNT:
      return isSetClickcount();
    case CRMCUSTOMERID:
      return isSetCrmcustomerid();
    case BOOST:
      return isSetBoost();
    case BOOSTC:
      return isSetBoostc();
    case BOOSTAPP:
      return isSetBoostapp();
    case SCORE:
      return isSetScore();
    case COSTRATE:
      return isSetCostrate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DTOCarInfoIndexField)
      return this.equals((DTOCarInfoIndexField)that);
    return false;
  }

  public boolean equals(DTOCarInfoIndexField that) {
    if (that == null)
      return false;

    boolean this_present_ucarid = true;
    boolean that_present_ucarid = true;
    if (this_present_ucarid || that_present_ucarid) {
      if (!(this_present_ucarid && that_present_ucarid))
        return false;
      if (this.ucarid != that.ucarid)
        return false;
    }

    boolean this_present_ucarserialnumber = true && this.isSetUcarserialnumber();
    boolean that_present_ucarserialnumber = true && that.isSetUcarserialnumber();
    if (this_present_ucarserialnumber || that_present_ucarserialnumber) {
      if (!(this_present_ucarserialnumber && that_present_ucarserialnumber))
        return false;
      if (!this.ucarserialnumber.equals(that.ucarserialnumber))
        return false;
    }

    boolean this_present_ucarstatus = true;
    boolean that_present_ucarstatus = true;
    if (this_present_ucarstatus || that_present_ucarstatus) {
      if (!(this_present_ucarstatus && that_present_ucarstatus))
        return false;
      if (this.ucarstatus != that.ucarstatus)
        return false;
    }

    boolean this_present_carproviceid = true;
    boolean that_present_carproviceid = true;
    if (this_present_carproviceid || that_present_carproviceid) {
      if (!(this_present_carproviceid && that_present_carproviceid))
        return false;
      if (this.carproviceid != that.carproviceid)
        return false;
    }

    boolean this_present_carcityid = true;
    boolean that_present_carcityid = true;
    if (this_present_carcityid || that_present_carcityid) {
      if (!(this_present_carcityid && that_present_carcityid))
        return false;
      if (this.carcityid != that.carcityid)
        return false;
    }

    boolean this_present_color = true && this.isSetColor();
    boolean that_present_color = true && that.isSetColor();
    if (this_present_color || that_present_color) {
      if (!(this_present_color && that_present_color))
        return false;
      if (!this.color.equals(that.color))
        return false;
    }

    boolean this_present_drivingmileage = true;
    boolean that_present_drivingmileage = true;
    if (this_present_drivingmileage || that_present_drivingmileage) {
      if (!(this_present_drivingmileage && that_present_drivingmileage))
        return false;
      if (this.drivingmileage != that.drivingmileage)
        return false;
    }

    boolean this_present_completerate = true;
    boolean that_present_completerate = true;
    if (this_present_completerate || that_present_completerate) {
      if (!(this_present_completerate && that_present_completerate))
        return false;
      if (this.completerate != that.completerate)
        return false;
    }

    boolean this_present_carsource1l = true;
    boolean that_present_carsource1l = true;
    if (this_present_carsource1l || that_present_carsource1l) {
      if (!(this_present_carsource1l && that_present_carsource1l))
        return false;
      if (this.carsource1l != that.carsource1l)
        return false;
    }

    boolean this_present_isvideo = true;
    boolean that_present_isvideo = true;
    if (this_present_isvideo || that_present_isvideo) {
      if (!(this_present_isvideo && that_present_isvideo))
        return false;
      if (this.isvideo != that.isvideo)
        return false;
    }

    boolean this_present_firstpictrue = true;
    boolean that_present_firstpictrue = true;
    if (this_present_firstpictrue || that_present_firstpictrue) {
      if (!(this_present_firstpictrue && that_present_firstpictrue))
        return false;
      if (this.firstpictrue != that.firstpictrue)
        return false;
    }

    boolean this_present_cartype = true;
    boolean that_present_cartype = true;
    if (this_present_cartype || that_present_cartype) {
      if (!(this_present_cartype && that_present_cartype))
        return false;
      if (this.cartype != that.cartype)
        return false;
    }

    boolean this_present_source = true;
    boolean that_present_source = true;
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (this.source != that.source)
        return false;
    }

    boolean this_present_isneglect = true;
    boolean that_present_isneglect = true;
    if (this_present_isneglect || that_present_isneglect) {
      if (!(this_present_isneglect && that_present_isneglect))
        return false;
      if (this.isneglect != that.isneglect)
        return false;
    }

    boolean this_present_picturecount = true;
    boolean that_present_picturecount = true;
    if (this_present_picturecount || that_present_picturecount) {
      if (!(this_present_picturecount && that_present_picturecount))
        return false;
      if (this.picturecount != that.picturecount)
        return false;
    }

    boolean this_present_picturenumber = true;
    boolean that_present_picturenumber = true;
    if (this_present_picturenumber || that_present_picturenumber) {
      if (!(this_present_picturenumber && that_present_picturenumber))
        return false;
      if (this.picturenumber != that.picturenumber)
        return false;
    }

    boolean this_present_displayprice = true;
    boolean that_present_displayprice = true;
    if (this_present_displayprice || that_present_displayprice) {
      if (!(this_present_displayprice && that_present_displayprice))
        return false;
      if (this.displayprice != that.displayprice)
        return false;
    }

    boolean this_present_statusmodifytime = true && this.isSetStatusmodifytime();
    boolean that_present_statusmodifytime = true && that.isSetStatusmodifytime();
    if (this_present_statusmodifytime || that_present_statusmodifytime) {
      if (!(this_present_statusmodifytime && that_present_statusmodifytime))
        return false;
      if (!this.statusmodifytime.equals(that.statusmodifytime))
        return false;
    }

    boolean this_present_createtime = true && this.isSetCreatetime();
    boolean that_present_createtime = true && that.isSetCreatetime();
    if (this_present_createtime || that_present_createtime) {
      if (!(this_present_createtime && that_present_createtime))
        return false;
      if (!this.createtime.equals(that.createtime))
        return false;
    }

    boolean this_present_buycardate = true && this.isSetBuycardate();
    boolean that_present_buycardate = true && that.isSetBuycardate();
    if (this_present_buycardate || that_present_buycardate) {
      if (!(this_present_buycardate && that_present_buycardate))
        return false;
      if (!this.buycardate.equals(that.buycardate))
        return false;
    }

    boolean this_present_carpublishtime = true && this.isSetCarpublishtime();
    boolean that_present_carpublishtime = true && that.isSetCarpublishtime();
    if (this_present_carpublishtime || that_present_carpublishtime) {
      if (!(this_present_carpublishtime && that_present_carpublishtime))
        return false;
      if (!this.carpublishtime.equals(that.carpublishtime))
        return false;
    }

    boolean this_present_ucarpicwholepath = true && this.isSetUcarpicwholepath();
    boolean that_present_ucarpicwholepath = true && that.isSetUcarpicwholepath();
    if (this_present_ucarpicwholepath || that_present_ucarpicwholepath) {
      if (!(this_present_ucarpicwholepath && that_present_ucarpicwholepath))
        return false;
      if (!this.ucarpicwholepath.equals(that.ucarpicwholepath))
        return false;
    }

    boolean this_present_isdealerrecommend = true;
    boolean that_present_isdealerrecommend = true;
    if (this_present_isdealerrecommend || that_present_isdealerrecommend) {
      if (!(this_present_isdealerrecommend && that_present_isdealerrecommend))
        return false;
      if (this.isdealerrecommend != that.isdealerrecommend)
        return false;
    }

    boolean this_present_isauthenticated = true;
    boolean that_present_isauthenticated = true;
    if (this_present_isauthenticated || that_present_isauthenticated) {
      if (!(this_present_isauthenticated && that_present_isauthenticated))
        return false;
      if (this.isauthenticated != that.isauthenticated)
        return false;
    }

    boolean this_present_isrecommendgl = true;
    boolean that_present_isrecommendgl = true;
    if (this_present_isrecommendgl || that_present_isrecommendgl) {
      if (!(this_present_isrecommendgl && that_present_isrecommendgl))
        return false;
      if (this.isrecommendgl != that.isrecommendgl)
        return false;
    }

    boolean this_present_isowncar = true;
    boolean that_present_isowncar = true;
    if (this_present_isowncar || that_present_isowncar) {
      if (!(this_present_isowncar && that_present_isowncar))
        return false;
      if (this.isowncar != that.isowncar)
        return false;
    }

    boolean this_present_c2bprice = true;
    boolean that_present_c2bprice = true;
    if (this_present_c2bprice || that_present_c2bprice) {
      if (!(this_present_c2bprice && that_present_c2bprice))
        return false;
      if (this.c2bprice != that.c2bprice)
        return false;
    }

    boolean this_present_istop = true;
    boolean that_present_istop = true;
    if (this_present_istop || that_present_istop) {
      if (!(this_present_istop && that_present_istop))
        return false;
      if (this.istop != that.istop)
        return false;
    }

    boolean this_present_statedescription = true && this.isSetStatedescription();
    boolean that_present_statedescription = true && that.isSetStatedescription();
    if (this_present_statedescription || that_present_statedescription) {
      if (!(this_present_statedescription && that_present_statedescription))
        return false;
      if (!this.statedescription.equals(that.statedescription))
        return false;
    }

    boolean this_present_iswarranty = true;
    boolean that_present_iswarranty = true;
    if (this_present_iswarranty || that_present_iswarranty) {
      if (!(this_present_iswarranty && that_present_iswarranty))
        return false;
      if (this.iswarranty != that.iswarranty)
        return false;
    }

    boolean this_present_warrantytypes = true && this.isSetWarrantytypes();
    boolean that_present_warrantytypes = true && that.isSetWarrantytypes();
    if (this_present_warrantytypes || that_present_warrantytypes) {
      if (!(this_present_warrantytypes && that_present_warrantytypes))
        return false;
      if (!this.warrantytypes.equals(that.warrantytypes))
        return false;
    }

    boolean this_present_isshowmr = true;
    boolean that_present_isshowmr = true;
    if (this_present_isshowmr || that_present_isshowmr) {
      if (!(this_present_isshowmr && that_present_isshowmr))
        return false;
      if (this.isshowmr != that.isshowmr)
        return false;
    }

    boolean this_present_carprovincename = true && this.isSetCarprovincename();
    boolean that_present_carprovincename = true && that.isSetCarprovincename();
    if (this_present_carprovincename || that_present_carprovincename) {
      if (!(this_present_carprovincename && that_present_carprovincename))
        return false;
      if (!this.carprovincename.equals(that.carprovincename))
        return false;
    }

    boolean this_present_carcityname = true && this.isSetCarcityname();
    boolean that_present_carcityname = true && that.isSetCarcityname();
    if (this_present_carcityname || that_present_carcityname) {
      if (!(this_present_carcityname && that_present_carcityname))
        return false;
      if (!this.carcityname.equals(that.carcityname))
        return false;
    }

    boolean this_present_cardistrictid = true;
    boolean that_present_cardistrictid = true;
    if (this_present_cardistrictid || that_present_cardistrictid) {
      if (!(this_present_cardistrictid && that_present_cardistrictid))
        return false;
      if (this.cardistrictid != that.cardistrictid)
        return false;
    }

    boolean this_present_cardistrictname = true && this.isSetCardistrictname();
    boolean that_present_cardistrictname = true && that.isSetCardistrictname();
    if (this_present_cardistrictname || that_present_cardistrictname) {
      if (!(this_present_cardistrictname && that_present_cardistrictname))
        return false;
      if (!this.cardistrictname.equals(that.cardistrictname))
        return false;
    }

    boolean this_present_slogan = true && this.isSetSlogan();
    boolean that_present_slogan = true && that.isSetSlogan();
    if (this_present_slogan || that_present_slogan) {
      if (!(this_present_slogan && that_present_slogan))
        return false;
      if (!this.slogan.equals(that.slogan))
        return false;
    }

    boolean this_present_b2bprice = true;
    boolean that_present_b2bprice = true;
    if (this_present_b2bprice || that_present_b2bprice) {
      if (!(this_present_b2bprice && that_present_b2bprice))
        return false;
      if (this.b2bprice != that.b2bprice)
        return false;
    }

    boolean this_present_isb2b = true;
    boolean that_present_isb2b = true;
    if (this_present_isb2b || that_present_isb2b) {
      if (!(this_present_isb2b && that_present_isb2b))
        return false;
      if (this.isb2b != that.isb2b)
        return false;
    }

    boolean this_present_mainbrandid = true;
    boolean that_present_mainbrandid = true;
    if (this_present_mainbrandid || that_present_mainbrandid) {
      if (!(this_present_mainbrandid && that_present_mainbrandid))
        return false;
      if (this.mainbrandid != that.mainbrandid)
        return false;
    }

    boolean this_present_producerid = true;
    boolean that_present_producerid = true;
    if (this_present_producerid || that_present_producerid) {
      if (!(this_present_producerid && that_present_producerid))
        return false;
      if (this.producerid != that.producerid)
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_brandid = true;
    boolean that_present_brandid = true;
    if (this_present_brandid || that_present_brandid) {
      if (!(this_present_brandid && that_present_brandid))
        return false;
      if (this.brandid != that.brandid)
        return false;
    }

    boolean this_present_carlevel = true && this.isSetCarlevel();
    boolean that_present_carlevel = true && that.isSetCarlevel();
    if (this_present_carlevel || that_present_carlevel) {
      if (!(this_present_carlevel && that_present_carlevel))
        return false;
      if (!this.carlevel.equals(that.carlevel))
        return false;
    }

    boolean this_present_carlevelvalue = true;
    boolean that_present_carlevelvalue = true;
    if (this_present_carlevelvalue || that_present_carlevelvalue) {
      if (!(this_present_carlevelvalue && that_present_carlevelvalue))
        return false;
      if (this.carlevelvalue != that.carlevelvalue)
        return false;
    }

    boolean this_present_carid = true;
    boolean that_present_carid = true;
    if (this_present_carid || that_present_carid) {
      if (!(this_present_carid && that_present_carid))
        return false;
      if (this.carid != that.carid)
        return false;
    }

    boolean this_present_gearboxtype = true;
    boolean that_present_gearboxtype = true;
    if (this_present_gearboxtype || that_present_gearboxtype) {
      if (!(this_present_gearboxtype && that_present_gearboxtype))
        return false;
      if (this.gearboxtype != that.gearboxtype)
        return false;
    }

    boolean this_present_gearboxtypestring = true && this.isSetGearboxtypestring();
    boolean that_present_gearboxtypestring = true && that.isSetGearboxtypestring();
    if (this_present_gearboxtypestring || that_present_gearboxtypestring) {
      if (!(this_present_gearboxtypestring && that_present_gearboxtypestring))
        return false;
      if (!this.gearboxtypestring.equals(that.gearboxtypestring))
        return false;
    }

    boolean this_present_exhaustvalue = true;
    boolean that_present_exhaustvalue = true;
    if (this_present_exhaustvalue || that_present_exhaustvalue) {
      if (!(this_present_exhaustvalue && that_present_exhaustvalue))
        return false;
      if (this.exhaustvalue != that.exhaustvalue)
        return false;
    }

    boolean this_present_caryear = true;
    boolean that_present_caryear = true;
    if (this_present_caryear || that_present_caryear) {
      if (!(this_present_caryear && that_present_caryear))
        return false;
      if (this.caryear != that.caryear)
        return false;
    }

    boolean this_present_carreferprice = true;
    boolean that_present_carreferprice = true;
    if (this_present_carreferprice || that_present_carreferprice) {
      if (!(this_present_carreferprice && that_present_carreferprice))
        return false;
      if (this.carreferprice != that.carreferprice)
        return false;
    }

    boolean this_present_envirstandard = true && this.isSetEnvirstandard();
    boolean that_present_envirstandard = true && that.isSetEnvirstandard();
    if (this_present_envirstandard || that_present_envirstandard) {
      if (!(this_present_envirstandard && that_present_envirstandard))
        return false;
      if (!this.envirstandard.equals(that.envirstandard))
        return false;
    }

    boolean this_present_consumption = true;
    boolean that_present_consumption = true;
    if (this_present_consumption || that_present_consumption) {
      if (!(this_present_consumption && that_present_consumption))
        return false;
      if (this.consumption != that.consumption)
        return false;
    }

    boolean this_present_oiltype = true;
    boolean that_present_oiltype = true;
    if (this_present_oiltype || that_present_oiltype) {
      if (!(this_present_oiltype && that_present_oiltype))
        return false;
      if (this.oiltype != that.oiltype)
        return false;
    }

    boolean this_present_enginelocation = true;
    boolean that_present_enginelocation = true;
    if (this_present_enginelocation || that_present_enginelocation) {
      if (!(this_present_enginelocation && that_present_enginelocation))
        return false;
      if (this.enginelocation != that.enginelocation)
        return false;
    }

    boolean this_present_bodydoors = true;
    boolean that_present_bodydoors = true;
    if (this_present_bodydoors || that_present_bodydoors) {
      if (!(this_present_bodydoors && that_present_bodydoors))
        return false;
      if (this.bodydoors != that.bodydoors)
        return false;
    }

    boolean this_present_seatnummin = true;
    boolean that_present_seatnummin = true;
    if (this_present_seatnummin || that_present_seatnummin) {
      if (!(this_present_seatnummin && that_present_seatnummin))
        return false;
      if (this.seatnummin != that.seatnummin)
        return false;
    }

    boolean this_present_seatnummax = true;
    boolean that_present_seatnummax = true;
    if (this_present_seatnummax || that_present_seatnummax) {
      if (!(this_present_seatnummax && that_present_seatnummax))
        return false;
      if (this.seatnummax != that.seatnummax)
        return false;
    }

    boolean this_present_iswagon = true;
    boolean that_present_iswagon = true;
    if (this_present_iswagon || that_present_iswagon) {
      if (!(this_present_iswagon && that_present_iswagon))
        return false;
      if (this.iswagon != that.iswagon)
        return false;
    }

    boolean this_present_drivetype = true;
    boolean that_present_drivetype = true;
    if (this_present_drivetype || that_present_drivetype) {
      if (!(this_present_drivetype && that_present_drivetype))
        return false;
      if (this.drivetype != that.drivetype)
        return false;
    }

    boolean this_present_isagency = true;
    boolean that_present_isagency = true;
    if (this_present_isagency || that_present_isagency) {
      if (!(this_present_isagency && that_present_isagency))
        return false;
      if (this.isagency != that.isagency)
        return false;
    }

    boolean this_present_csbodyform = true;
    boolean that_present_csbodyform = true;
    if (this_present_csbodyform || that_present_csbodyform) {
      if (!(this_present_csbodyform && that_present_csbodyform))
        return false;
      if (this.csbodyform != that.csbodyform)
        return false;
    }

    boolean this_present_brandattr = true;
    boolean that_present_brandattr = true;
    if (this_present_brandattr || that_present_brandattr) {
      if (!(this_present_brandattr && that_present_brandattr))
        return false;
      if (this.brandattr != that.brandattr)
        return false;
    }

    boolean this_present_ismarkingvendor = true;
    boolean that_present_ismarkingvendor = true;
    if (this_present_ismarkingvendor || that_present_ismarkingvendor) {
      if (!(this_present_ismarkingvendor && that_present_ismarkingvendor))
        return false;
      if (this.ismarkingvendor != that.ismarkingvendor)
        return false;
    }

    boolean this_present_countryvalue = true;
    boolean that_present_countryvalue = true;
    if (this_present_countryvalue || that_present_countryvalue) {
      if (!(this_present_countryvalue && that_present_countryvalue))
        return false;
      if (this.countryvalue != that.countryvalue)
        return false;
    }

    boolean this_present_userid = true;
    boolean that_present_userid = true;
    if (this_present_userid || that_present_userid) {
      if (!(this_present_userid && that_present_userid))
        return false;
      if (this.userid != that.userid)
        return false;
    }

    boolean this_present_superiorid = true;
    boolean that_present_superiorid = true;
    if (this_present_superiorid || that_present_superiorid) {
      if (!(this_present_superiorid && that_present_superiorid))
        return false;
      if (this.superiorid != that.superiorid)
        return false;
    }

    boolean this_present_vendorname = true && this.isSetVendorname();
    boolean that_present_vendorname = true && that.isSetVendorname();
    if (this_present_vendorname || that_present_vendorname) {
      if (!(this_present_vendorname && that_present_vendorname))
        return false;
      if (!this.vendorname.equals(that.vendorname))
        return false;
    }

    boolean this_present_vendortype = true;
    boolean that_present_vendortype = true;
    if (this_present_vendortype || that_present_vendortype) {
      if (!(this_present_vendortype && that_present_vendortype))
        return false;
      if (this.vendortype != that.vendortype)
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_isjdvendor = true;
    boolean that_present_isjdvendor = true;
    if (this_present_isjdvendor || that_present_isjdvendor) {
      if (!(this_present_isjdvendor && that_present_isjdvendor))
        return false;
      if (this.isjdvendor != that.isjdvendor)
        return false;
    }

    boolean this_present_isinctransfer = true;
    boolean that_present_isinctransfer = true;
    if (this_present_isinctransfer || that_present_isinctransfer) {
      if (!(this_present_isinctransfer && that_present_isinctransfer))
        return false;
      if (this.isinctransfer != that.isinctransfer)
        return false;
    }

    boolean this_present_usertype = true;
    boolean that_present_usertype = true;
    if (this_present_usertype || that_present_usertype) {
      if (!(this_present_usertype && that_present_usertype))
        return false;
      if (this.usertype != that.usertype)
        return false;
    }

    boolean this_present_isactivity = true;
    boolean that_present_isactivity = true;
    if (this_present_isactivity || that_present_isactivity) {
      if (!(this_present_isactivity && that_present_isactivity))
        return false;
      if (this.isactivity != that.isactivity)
        return false;
    }

    boolean this_present_membertype = true;
    boolean that_present_membertype = true;
    if (this_present_membertype || that_present_membertype) {
      if (!(this_present_membertype && that_present_membertype))
        return false;
      if (this.membertype != that.membertype)
        return false;
    }

    boolean this_present_isbangmai = true;
    boolean that_present_isbangmai = true;
    if (this_present_isbangmai || that_present_isbangmai) {
      if (!(this_present_isbangmai && that_present_isbangmai))
        return false;
      if (this.isbangmai != that.isbangmai)
        return false;
    }

    boolean this_present_dvqflag = true;
    boolean that_present_dvqflag = true;
    if (this_present_dvqflag || that_present_dvqflag) {
      if (!(this_present_dvqflag && that_present_dvqflag))
        return false;
      if (this.dvqflag != that.dvqflag)
        return false;
    }

    boolean this_present_isbangmaiche = true;
    boolean that_present_isbangmaiche = true;
    if (this_present_isbangmaiche || that_present_isbangmaiche) {
      if (!(this_present_isbangmaiche && that_present_isbangmaiche))
        return false;
      if (this.isbangmaiche != that.isbangmaiche)
        return false;
    }

    boolean this_present_baidumap = true && this.isSetBaidumap();
    boolean that_present_baidumap = true && that.isSetBaidumap();
    if (this_present_baidumap || that_present_baidumap) {
      if (!(this_present_baidumap && that_present_baidumap))
        return false;
      if (!this.baidumap.equals(that.baidumap))
        return false;
    }

    boolean this_present_distance = true;
    boolean that_present_distance = true;
    if (this_present_distance || that_present_distance) {
      if (!(this_present_distance && that_present_distance))
        return false;
      if (this.distance != that.distance)
        return false;
    }

    boolean this_present_linkman = true && this.isSetLinkman();
    boolean that_present_linkman = true && that.isSetLinkman();
    if (this_present_linkman || that_present_linkman) {
      if (!(this_present_linkman && that_present_linkman))
        return false;
      if (!this.linkman.equals(that.linkman))
        return false;
    }

    boolean this_present_cartypeconfig = true && this.isSetCartypeconfig();
    boolean that_present_cartypeconfig = true && that.isSetCartypeconfig();
    if (this_present_cartypeconfig || that_present_cartypeconfig) {
      if (!(this_present_cartypeconfig && that_present_cartypeconfig))
        return false;
      if (!this.cartypeconfig.equals(that.cartypeconfig))
        return false;
    }

    boolean this_present_siteid = true;
    boolean that_present_siteid = true;
    if (this_present_siteid || that_present_siteid) {
      if (!(this_present_siteid && that_present_siteid))
        return false;
      if (this.siteid != that.siteid)
        return false;
    }

    boolean this_present_cartitle = true && this.isSetCartitle();
    boolean that_present_cartitle = true && that.isSetCartitle();
    if (this_present_cartitle || that_present_cartitle) {
      if (!(this_present_cartitle && that_present_cartitle))
        return false;
      if (!this.cartitle.equals(that.cartitle))
        return false;
    }

    boolean this_present_carlevelsecond = true;
    boolean that_present_carlevelsecond = true;
    if (this_present_carlevelsecond || that_present_carlevelsecond) {
      if (!(this_present_carlevelsecond && that_present_carlevelsecond))
        return false;
      if (this.carlevelsecond != that.carlevelsecond)
        return false;
    }

    boolean this_present_ischeckreportjson = true;
    boolean that_present_ischeckreportjson = true;
    if (this_present_ischeckreportjson || that_present_ischeckreportjson) {
      if (!(this_present_ischeckreportjson && that_present_ischeckreportjson))
        return false;
      if (this.ischeckreportjson != that.ischeckreportjson)
        return false;
    }

    boolean this_present_clickcount = true;
    boolean that_present_clickcount = true;
    if (this_present_clickcount || that_present_clickcount) {
      if (!(this_present_clickcount && that_present_clickcount))
        return false;
      if (this.clickcount != that.clickcount)
        return false;
    }

    boolean this_present_crmcustomerid = true;
    boolean that_present_crmcustomerid = true;
    if (this_present_crmcustomerid || that_present_crmcustomerid) {
      if (!(this_present_crmcustomerid && that_present_crmcustomerid))
        return false;
      if (this.crmcustomerid != that.crmcustomerid)
        return false;
    }

    boolean this_present_boost = true;
    boolean that_present_boost = true;
    if (this_present_boost || that_present_boost) {
      if (!(this_present_boost && that_present_boost))
        return false;
      if (this.boost != that.boost)
        return false;
    }

    boolean this_present_boostc = true;
    boolean that_present_boostc = true;
    if (this_present_boostc || that_present_boostc) {
      if (!(this_present_boostc && that_present_boostc))
        return false;
      if (this.boostc != that.boostc)
        return false;
    }

    boolean this_present_boostapp = true;
    boolean that_present_boostapp = true;
    if (this_present_boostapp || that_present_boostapp) {
      if (!(this_present_boostapp && that_present_boostapp))
        return false;
      if (this.boostapp != that.boostapp)
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_costrate = true;
    boolean that_present_costrate = true;
    if (this_present_costrate || that_present_costrate) {
      if (!(this_present_costrate && that_present_costrate))
        return false;
      if (this.costrate != that.costrate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_ucarid = true;
    list.add(present_ucarid);
    if (present_ucarid)
      list.add(ucarid);

    boolean present_ucarserialnumber = true && (isSetUcarserialnumber());
    list.add(present_ucarserialnumber);
    if (present_ucarserialnumber)
      list.add(ucarserialnumber);

    boolean present_ucarstatus = true;
    list.add(present_ucarstatus);
    if (present_ucarstatus)
      list.add(ucarstatus);

    boolean present_carproviceid = true;
    list.add(present_carproviceid);
    if (present_carproviceid)
      list.add(carproviceid);

    boolean present_carcityid = true;
    list.add(present_carcityid);
    if (present_carcityid)
      list.add(carcityid);

    boolean present_color = true && (isSetColor());
    list.add(present_color);
    if (present_color)
      list.add(color);

    boolean present_drivingmileage = true;
    list.add(present_drivingmileage);
    if (present_drivingmileage)
      list.add(drivingmileage);

    boolean present_completerate = true;
    list.add(present_completerate);
    if (present_completerate)
      list.add(completerate);

    boolean present_carsource1l = true;
    list.add(present_carsource1l);
    if (present_carsource1l)
      list.add(carsource1l);

    boolean present_isvideo = true;
    list.add(present_isvideo);
    if (present_isvideo)
      list.add(isvideo);

    boolean present_firstpictrue = true;
    list.add(present_firstpictrue);
    if (present_firstpictrue)
      list.add(firstpictrue);

    boolean present_cartype = true;
    list.add(present_cartype);
    if (present_cartype)
      list.add(cartype);

    boolean present_source = true;
    list.add(present_source);
    if (present_source)
      list.add(source);

    boolean present_isneglect = true;
    list.add(present_isneglect);
    if (present_isneglect)
      list.add(isneglect);

    boolean present_picturecount = true;
    list.add(present_picturecount);
    if (present_picturecount)
      list.add(picturecount);

    boolean present_picturenumber = true;
    list.add(present_picturenumber);
    if (present_picturenumber)
      list.add(picturenumber);

    boolean present_displayprice = true;
    list.add(present_displayprice);
    if (present_displayprice)
      list.add(displayprice);

    boolean present_statusmodifytime = true && (isSetStatusmodifytime());
    list.add(present_statusmodifytime);
    if (present_statusmodifytime)
      list.add(statusmodifytime);

    boolean present_createtime = true && (isSetCreatetime());
    list.add(present_createtime);
    if (present_createtime)
      list.add(createtime);

    boolean present_buycardate = true && (isSetBuycardate());
    list.add(present_buycardate);
    if (present_buycardate)
      list.add(buycardate);

    boolean present_carpublishtime = true && (isSetCarpublishtime());
    list.add(present_carpublishtime);
    if (present_carpublishtime)
      list.add(carpublishtime);

    boolean present_ucarpicwholepath = true && (isSetUcarpicwholepath());
    list.add(present_ucarpicwholepath);
    if (present_ucarpicwholepath)
      list.add(ucarpicwholepath);

    boolean present_isdealerrecommend = true;
    list.add(present_isdealerrecommend);
    if (present_isdealerrecommend)
      list.add(isdealerrecommend);

    boolean present_isauthenticated = true;
    list.add(present_isauthenticated);
    if (present_isauthenticated)
      list.add(isauthenticated);

    boolean present_isrecommendgl = true;
    list.add(present_isrecommendgl);
    if (present_isrecommendgl)
      list.add(isrecommendgl);

    boolean present_isowncar = true;
    list.add(present_isowncar);
    if (present_isowncar)
      list.add(isowncar);

    boolean present_c2bprice = true;
    list.add(present_c2bprice);
    if (present_c2bprice)
      list.add(c2bprice);

    boolean present_istop = true;
    list.add(present_istop);
    if (present_istop)
      list.add(istop);

    boolean present_statedescription = true && (isSetStatedescription());
    list.add(present_statedescription);
    if (present_statedescription)
      list.add(statedescription);

    boolean present_iswarranty = true;
    list.add(present_iswarranty);
    if (present_iswarranty)
      list.add(iswarranty);

    boolean present_warrantytypes = true && (isSetWarrantytypes());
    list.add(present_warrantytypes);
    if (present_warrantytypes)
      list.add(warrantytypes);

    boolean present_isshowmr = true;
    list.add(present_isshowmr);
    if (present_isshowmr)
      list.add(isshowmr);

    boolean present_carprovincename = true && (isSetCarprovincename());
    list.add(present_carprovincename);
    if (present_carprovincename)
      list.add(carprovincename);

    boolean present_carcityname = true && (isSetCarcityname());
    list.add(present_carcityname);
    if (present_carcityname)
      list.add(carcityname);

    boolean present_cardistrictid = true;
    list.add(present_cardistrictid);
    if (present_cardistrictid)
      list.add(cardistrictid);

    boolean present_cardistrictname = true && (isSetCardistrictname());
    list.add(present_cardistrictname);
    if (present_cardistrictname)
      list.add(cardistrictname);

    boolean present_slogan = true && (isSetSlogan());
    list.add(present_slogan);
    if (present_slogan)
      list.add(slogan);

    boolean present_b2bprice = true;
    list.add(present_b2bprice);
    if (present_b2bprice)
      list.add(b2bprice);

    boolean present_isb2b = true;
    list.add(present_isb2b);
    if (present_isb2b)
      list.add(isb2b);

    boolean present_mainbrandid = true;
    list.add(present_mainbrandid);
    if (present_mainbrandid)
      list.add(mainbrandid);

    boolean present_producerid = true;
    list.add(present_producerid);
    if (present_producerid)
      list.add(producerid);

    boolean present_country = true && (isSetCountry());
    list.add(present_country);
    if (present_country)
      list.add(country);

    boolean present_brandid = true;
    list.add(present_brandid);
    if (present_brandid)
      list.add(brandid);

    boolean present_carlevel = true && (isSetCarlevel());
    list.add(present_carlevel);
    if (present_carlevel)
      list.add(carlevel);

    boolean present_carlevelvalue = true;
    list.add(present_carlevelvalue);
    if (present_carlevelvalue)
      list.add(carlevelvalue);

    boolean present_carid = true;
    list.add(present_carid);
    if (present_carid)
      list.add(carid);

    boolean present_gearboxtype = true;
    list.add(present_gearboxtype);
    if (present_gearboxtype)
      list.add(gearboxtype);

    boolean present_gearboxtypestring = true && (isSetGearboxtypestring());
    list.add(present_gearboxtypestring);
    if (present_gearboxtypestring)
      list.add(gearboxtypestring);

    boolean present_exhaustvalue = true;
    list.add(present_exhaustvalue);
    if (present_exhaustvalue)
      list.add(exhaustvalue);

    boolean present_caryear = true;
    list.add(present_caryear);
    if (present_caryear)
      list.add(caryear);

    boolean present_carreferprice = true;
    list.add(present_carreferprice);
    if (present_carreferprice)
      list.add(carreferprice);

    boolean present_envirstandard = true && (isSetEnvirstandard());
    list.add(present_envirstandard);
    if (present_envirstandard)
      list.add(envirstandard);

    boolean present_consumption = true;
    list.add(present_consumption);
    if (present_consumption)
      list.add(consumption);

    boolean present_oiltype = true;
    list.add(present_oiltype);
    if (present_oiltype)
      list.add(oiltype);

    boolean present_enginelocation = true;
    list.add(present_enginelocation);
    if (present_enginelocation)
      list.add(enginelocation);

    boolean present_bodydoors = true;
    list.add(present_bodydoors);
    if (present_bodydoors)
      list.add(bodydoors);

    boolean present_seatnummin = true;
    list.add(present_seatnummin);
    if (present_seatnummin)
      list.add(seatnummin);

    boolean present_seatnummax = true;
    list.add(present_seatnummax);
    if (present_seatnummax)
      list.add(seatnummax);

    boolean present_iswagon = true;
    list.add(present_iswagon);
    if (present_iswagon)
      list.add(iswagon);

    boolean present_drivetype = true;
    list.add(present_drivetype);
    if (present_drivetype)
      list.add(drivetype);

    boolean present_isagency = true;
    list.add(present_isagency);
    if (present_isagency)
      list.add(isagency);

    boolean present_csbodyform = true;
    list.add(present_csbodyform);
    if (present_csbodyform)
      list.add(csbodyform);

    boolean present_brandattr = true;
    list.add(present_brandattr);
    if (present_brandattr)
      list.add(brandattr);

    boolean present_ismarkingvendor = true;
    list.add(present_ismarkingvendor);
    if (present_ismarkingvendor)
      list.add(ismarkingvendor);

    boolean present_countryvalue = true;
    list.add(present_countryvalue);
    if (present_countryvalue)
      list.add(countryvalue);

    boolean present_userid = true;
    list.add(present_userid);
    if (present_userid)
      list.add(userid);

    boolean present_superiorid = true;
    list.add(present_superiorid);
    if (present_superiorid)
      list.add(superiorid);

    boolean present_vendorname = true && (isSetVendorname());
    list.add(present_vendorname);
    if (present_vendorname)
      list.add(vendorname);

    boolean present_vendortype = true;
    list.add(present_vendortype);
    if (present_vendortype)
      list.add(vendortype);

    boolean present_contact = true && (isSetContact());
    list.add(present_contact);
    if (present_contact)
      list.add(contact);

    boolean present_isjdvendor = true;
    list.add(present_isjdvendor);
    if (present_isjdvendor)
      list.add(isjdvendor);

    boolean present_isinctransfer = true;
    list.add(present_isinctransfer);
    if (present_isinctransfer)
      list.add(isinctransfer);

    boolean present_usertype = true;
    list.add(present_usertype);
    if (present_usertype)
      list.add(usertype);

    boolean present_isactivity = true;
    list.add(present_isactivity);
    if (present_isactivity)
      list.add(isactivity);

    boolean present_membertype = true;
    list.add(present_membertype);
    if (present_membertype)
      list.add(membertype);

    boolean present_isbangmai = true;
    list.add(present_isbangmai);
    if (present_isbangmai)
      list.add(isbangmai);

    boolean present_dvqflag = true;
    list.add(present_dvqflag);
    if (present_dvqflag)
      list.add(dvqflag);

    boolean present_isbangmaiche = true;
    list.add(present_isbangmaiche);
    if (present_isbangmaiche)
      list.add(isbangmaiche);

    boolean present_baidumap = true && (isSetBaidumap());
    list.add(present_baidumap);
    if (present_baidumap)
      list.add(baidumap);

    boolean present_distance = true;
    list.add(present_distance);
    if (present_distance)
      list.add(distance);

    boolean present_linkman = true && (isSetLinkman());
    list.add(present_linkman);
    if (present_linkman)
      list.add(linkman);

    boolean present_cartypeconfig = true && (isSetCartypeconfig());
    list.add(present_cartypeconfig);
    if (present_cartypeconfig)
      list.add(cartypeconfig);

    boolean present_siteid = true;
    list.add(present_siteid);
    if (present_siteid)
      list.add(siteid);

    boolean present_cartitle = true && (isSetCartitle());
    list.add(present_cartitle);
    if (present_cartitle)
      list.add(cartitle);

    boolean present_carlevelsecond = true;
    list.add(present_carlevelsecond);
    if (present_carlevelsecond)
      list.add(carlevelsecond);

    boolean present_ischeckreportjson = true;
    list.add(present_ischeckreportjson);
    if (present_ischeckreportjson)
      list.add(ischeckreportjson);

    boolean present_clickcount = true;
    list.add(present_clickcount);
    if (present_clickcount)
      list.add(clickcount);

    boolean present_crmcustomerid = true;
    list.add(present_crmcustomerid);
    if (present_crmcustomerid)
      list.add(crmcustomerid);

    boolean present_boost = true;
    list.add(present_boost);
    if (present_boost)
      list.add(boost);

    boolean present_boostc = true;
    list.add(present_boostc);
    if (present_boostc)
      list.add(boostc);

    boolean present_boostapp = true;
    list.add(present_boostapp);
    if (present_boostapp)
      list.add(boostapp);

    boolean present_score = true;
    list.add(present_score);
    if (present_score)
      list.add(score);

    boolean present_costrate = true;
    list.add(present_costrate);
    if (present_costrate)
      list.add(costrate);

    return list.hashCode();
  }

  @Override
  public int compareTo(DTOCarInfoIndexField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUcarid()).compareTo(other.isSetUcarid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucarid, other.ucarid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcarserialnumber()).compareTo(other.isSetUcarserialnumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarserialnumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucarserialnumber, other.ucarserialnumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcarstatus()).compareTo(other.isSetUcarstatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarstatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucarstatus, other.ucarstatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarproviceid()).compareTo(other.isSetCarproviceid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarproviceid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carproviceid, other.carproviceid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarcityid()).compareTo(other.isSetCarcityid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarcityid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carcityid, other.carcityid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColor()).compareTo(other.isSetColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.color, other.color);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrivingmileage()).compareTo(other.isSetDrivingmileage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrivingmileage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drivingmileage, other.drivingmileage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompleterate()).compareTo(other.isSetCompleterate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleterate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completerate, other.completerate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarsource1l()).compareTo(other.isSetCarsource1l());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarsource1l()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carsource1l, other.carsource1l);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsvideo()).compareTo(other.isSetIsvideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsvideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isvideo, other.isvideo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstpictrue()).compareTo(other.isSetFirstpictrue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstpictrue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstpictrue, other.firstpictrue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartype()).compareTo(other.isSetCartype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartype, other.cartype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsneglect()).compareTo(other.isSetIsneglect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsneglect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isneglect, other.isneglect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicturecount()).compareTo(other.isSetPicturecount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicturecount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picturecount, other.picturecount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicturenumber()).compareTo(other.isSetPicturenumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicturenumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picturenumber, other.picturenumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayprice()).compareTo(other.isSetDisplayprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayprice, other.displayprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusmodifytime()).compareTo(other.isSetStatusmodifytime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusmodifytime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusmodifytime, other.statusmodifytime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatetime()).compareTo(other.isSetCreatetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatetime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createtime, other.createtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuycardate()).compareTo(other.isSetBuycardate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuycardate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buycardate, other.buycardate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarpublishtime()).compareTo(other.isSetCarpublishtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarpublishtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carpublishtime, other.carpublishtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcarpicwholepath()).compareTo(other.isSetUcarpicwholepath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarpicwholepath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucarpicwholepath, other.ucarpicwholepath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsdealerrecommend()).compareTo(other.isSetIsdealerrecommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsdealerrecommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isdealerrecommend, other.isdealerrecommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsauthenticated()).compareTo(other.isSetIsauthenticated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsauthenticated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isauthenticated, other.isauthenticated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsrecommendgl()).compareTo(other.isSetIsrecommendgl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsrecommendgl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isrecommendgl, other.isrecommendgl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsowncar()).compareTo(other.isSetIsowncar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsowncar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isowncar, other.isowncar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetC2bprice()).compareTo(other.isSetC2bprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC2bprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c2bprice, other.c2bprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIstop()).compareTo(other.isSetIstop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIstop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.istop, other.istop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatedescription()).compareTo(other.isSetStatedescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatedescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statedescription, other.statedescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIswarranty()).compareTo(other.isSetIswarranty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIswarranty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iswarranty, other.iswarranty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarrantytypes()).compareTo(other.isSetWarrantytypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarrantytypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.warrantytypes, other.warrantytypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsshowmr()).compareTo(other.isSetIsshowmr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsshowmr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isshowmr, other.isshowmr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarprovincename()).compareTo(other.isSetCarprovincename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarprovincename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carprovincename, other.carprovincename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarcityname()).compareTo(other.isSetCarcityname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarcityname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carcityname, other.carcityname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardistrictid()).compareTo(other.isSetCardistrictid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardistrictid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardistrictid, other.cardistrictid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardistrictname()).compareTo(other.isSetCardistrictname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardistrictname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardistrictname, other.cardistrictname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSlogan()).compareTo(other.isSetSlogan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlogan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slogan, other.slogan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2bprice()).compareTo(other.isSetB2bprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2bprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b2bprice, other.b2bprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsb2b()).compareTo(other.isSetIsb2b());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsb2b()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isb2b, other.isb2b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainbrandid()).compareTo(other.isSetMainbrandid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainbrandid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mainbrandid, other.mainbrandid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProducerid()).compareTo(other.isSetProducerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProducerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.producerid, other.producerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandid()).compareTo(other.isSetBrandid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandid, other.brandid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarlevel()).compareTo(other.isSetCarlevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarlevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carlevel, other.carlevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarlevelvalue()).compareTo(other.isSetCarlevelvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarlevelvalue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carlevelvalue, other.carlevelvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarid()).compareTo(other.isSetCarid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carid, other.carid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGearboxtype()).compareTo(other.isSetGearboxtype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGearboxtype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gearboxtype, other.gearboxtype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGearboxtypestring()).compareTo(other.isSetGearboxtypestring());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGearboxtypestring()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gearboxtypestring, other.gearboxtypestring);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhaustvalue()).compareTo(other.isSetExhaustvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhaustvalue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exhaustvalue, other.exhaustvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaryear()).compareTo(other.isSetCaryear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaryear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caryear, other.caryear);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarreferprice()).compareTo(other.isSetCarreferprice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarreferprice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carreferprice, other.carreferprice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvirstandard()).compareTo(other.isSetEnvirstandard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvirstandard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.envirstandard, other.envirstandard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumption()).compareTo(other.isSetConsumption());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumption()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumption, other.consumption);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOiltype()).compareTo(other.isSetOiltype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOiltype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oiltype, other.oiltype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnginelocation()).compareTo(other.isSetEnginelocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnginelocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enginelocation, other.enginelocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodydoors()).compareTo(other.isSetBodydoors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodydoors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodydoors, other.bodydoors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatnummin()).compareTo(other.isSetSeatnummin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatnummin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatnummin, other.seatnummin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatnummax()).compareTo(other.isSetSeatnummax());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatnummax()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatnummax, other.seatnummax);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIswagon()).compareTo(other.isSetIswagon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIswagon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iswagon, other.iswagon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrivetype()).compareTo(other.isSetDrivetype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrivetype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drivetype, other.drivetype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsagency()).compareTo(other.isSetIsagency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsagency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isagency, other.isagency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsbodyform()).compareTo(other.isSetCsbodyform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsbodyform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.csbodyform, other.csbodyform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandattr()).compareTo(other.isSetBrandattr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandattr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandattr, other.brandattr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsmarkingvendor()).compareTo(other.isSetIsmarkingvendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsmarkingvendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ismarkingvendor, other.ismarkingvendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryvalue()).compareTo(other.isSetCountryvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryvalue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryvalue, other.countryvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserid()).compareTo(other.isSetUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, other.userid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorid()).compareTo(other.isSetSuperiorid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.superiorid, other.superiorid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVendorname()).compareTo(other.isSetVendorname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendorname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vendorname, other.vendorname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVendortype()).compareTo(other.isSetVendortype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVendortype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vendortype, other.vendortype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContact()).compareTo(other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contact, other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsjdvendor()).compareTo(other.isSetIsjdvendor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsjdvendor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isjdvendor, other.isjdvendor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsinctransfer()).compareTo(other.isSetIsinctransfer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsinctransfer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isinctransfer, other.isinctransfer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsertype()).compareTo(other.isSetUsertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usertype, other.usertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsactivity()).compareTo(other.isSetIsactivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsactivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isactivity, other.isactivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMembertype()).compareTo(other.isSetMembertype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembertype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.membertype, other.membertype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsbangmai()).compareTo(other.isSetIsbangmai());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsbangmai()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isbangmai, other.isbangmai);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDvqflag()).compareTo(other.isSetDvqflag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDvqflag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dvqflag, other.dvqflag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsbangmaiche()).compareTo(other.isSetIsbangmaiche());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsbangmaiche()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isbangmaiche, other.isbangmaiche);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaidumap()).compareTo(other.isSetBaidumap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaidumap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baidumap, other.baidumap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistance()).compareTo(other.isSetDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.distance, other.distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLinkman()).compareTo(other.isSetLinkman());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLinkman()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.linkman, other.linkman);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartypeconfig()).compareTo(other.isSetCartypeconfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartypeconfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartypeconfig, other.cartypeconfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteid()).compareTo(other.isSetSiteid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteid, other.siteid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCartitle()).compareTo(other.isSetCartitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCartitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cartitle, other.cartitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarlevelsecond()).compareTo(other.isSetCarlevelsecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarlevelsecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carlevelsecond, other.carlevelsecond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIscheckreportjson()).compareTo(other.isSetIscheckreportjson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIscheckreportjson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ischeckreportjson, other.ischeckreportjson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClickcount()).compareTo(other.isSetClickcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClickcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clickcount, other.clickcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrmcustomerid()).compareTo(other.isSetCrmcustomerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrmcustomerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crmcustomerid, other.crmcustomerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoost()).compareTo(other.isSetBoost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boost, other.boost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoostc()).compareTo(other.isSetBoostc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoostc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boostc, other.boostc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoostapp()).compareTo(other.isSetBoostapp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoostapp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boostapp, other.boostapp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCostrate()).compareTo(other.isSetCostrate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCostrate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.costrate, other.costrate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DTOCarInfoIndexField(");
    boolean first = true;

    sb.append("ucarid:");
    sb.append(this.ucarid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ucarserialnumber:");
    if (this.ucarserialnumber == null) {
      sb.append("null");
    } else {
      sb.append(this.ucarserialnumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ucarstatus:");
    sb.append(this.ucarstatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carproviceid:");
    sb.append(this.carproviceid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carcityid:");
    sb.append(this.carcityid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("color:");
    if (this.color == null) {
      sb.append("null");
    } else {
      sb.append(this.color);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drivingmileage:");
    sb.append(this.drivingmileage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("completerate:");
    sb.append(this.completerate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carsource1l:");
    sb.append(this.carsource1l);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isvideo:");
    sb.append(this.isvideo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstpictrue:");
    sb.append(this.firstpictrue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartype:");
    sb.append(this.cartype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    sb.append(this.source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isneglect:");
    sb.append(this.isneglect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("picturecount:");
    sb.append(this.picturecount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("picturenumber:");
    sb.append(this.picturenumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayprice:");
    sb.append(this.displayprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusmodifytime:");
    if (this.statusmodifytime == null) {
      sb.append("null");
    } else {
      sb.append(this.statusmodifytime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createtime:");
    if (this.createtime == null) {
      sb.append("null");
    } else {
      sb.append(this.createtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buycardate:");
    if (this.buycardate == null) {
      sb.append("null");
    } else {
      sb.append(this.buycardate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carpublishtime:");
    if (this.carpublishtime == null) {
      sb.append("null");
    } else {
      sb.append(this.carpublishtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ucarpicwholepath:");
    if (this.ucarpicwholepath == null) {
      sb.append("null");
    } else {
      sb.append(this.ucarpicwholepath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isdealerrecommend:");
    sb.append(this.isdealerrecommend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isauthenticated:");
    sb.append(this.isauthenticated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isrecommendgl:");
    sb.append(this.isrecommendgl);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isowncar:");
    sb.append(this.isowncar);
    first = false;
    if (!first) sb.append(", ");
    sb.append("c2bprice:");
    sb.append(this.c2bprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("istop:");
    sb.append(this.istop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statedescription:");
    if (this.statedescription == null) {
      sb.append("null");
    } else {
      sb.append(this.statedescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iswarranty:");
    sb.append(this.iswarranty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("warrantytypes:");
    if (this.warrantytypes == null) {
      sb.append("null");
    } else {
      sb.append(this.warrantytypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isshowmr:");
    sb.append(this.isshowmr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carprovincename:");
    if (this.carprovincename == null) {
      sb.append("null");
    } else {
      sb.append(this.carprovincename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carcityname:");
    if (this.carcityname == null) {
      sb.append("null");
    } else {
      sb.append(this.carcityname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardistrictid:");
    sb.append(this.cardistrictid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardistrictname:");
    if (this.cardistrictname == null) {
      sb.append("null");
    } else {
      sb.append(this.cardistrictname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slogan:");
    if (this.slogan == null) {
      sb.append("null");
    } else {
      sb.append(this.slogan);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("b2bprice:");
    sb.append(this.b2bprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isb2b:");
    sb.append(this.isb2b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mainbrandid:");
    sb.append(this.mainbrandid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("producerid:");
    sb.append(this.producerid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandid:");
    sb.append(this.brandid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carlevel:");
    if (this.carlevel == null) {
      sb.append("null");
    } else {
      sb.append(this.carlevel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carlevelvalue:");
    sb.append(this.carlevelvalue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carid:");
    sb.append(this.carid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gearboxtype:");
    sb.append(this.gearboxtype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gearboxtypestring:");
    if (this.gearboxtypestring == null) {
      sb.append("null");
    } else {
      sb.append(this.gearboxtypestring);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("exhaustvalue:");
    sb.append(this.exhaustvalue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("caryear:");
    sb.append(this.caryear);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carreferprice:");
    sb.append(this.carreferprice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("envirstandard:");
    if (this.envirstandard == null) {
      sb.append("null");
    } else {
      sb.append(this.envirstandard);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumption:");
    sb.append(this.consumption);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oiltype:");
    sb.append(this.oiltype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("enginelocation:");
    sb.append(this.enginelocation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bodydoors:");
    sb.append(this.bodydoors);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatnummin:");
    sb.append(this.seatnummin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatnummax:");
    sb.append(this.seatnummax);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iswagon:");
    sb.append(this.iswagon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("drivetype:");
    sb.append(this.drivetype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isagency:");
    sb.append(this.isagency);
    first = false;
    if (!first) sb.append(", ");
    sb.append("csbodyform:");
    sb.append(this.csbodyform);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandattr:");
    sb.append(this.brandattr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ismarkingvendor:");
    sb.append(this.ismarkingvendor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryvalue:");
    sb.append(this.countryvalue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userid:");
    sb.append(this.userid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("superiorid:");
    sb.append(this.superiorid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vendorname:");
    if (this.vendorname == null) {
      sb.append("null");
    } else {
      sb.append(this.vendorname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vendortype:");
    sb.append(this.vendortype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isjdvendor:");
    sb.append(this.isjdvendor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isinctransfer:");
    sb.append(this.isinctransfer);
    first = false;
    if (!first) sb.append(", ");
    sb.append("usertype:");
    sb.append(this.usertype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isactivity:");
    sb.append(this.isactivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("membertype:");
    sb.append(this.membertype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isbangmai:");
    sb.append(this.isbangmai);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dvqflag:");
    sb.append(this.dvqflag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isbangmaiche:");
    sb.append(this.isbangmaiche);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baidumap:");
    if (this.baidumap == null) {
      sb.append("null");
    } else {
      sb.append(this.baidumap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("distance:");
    sb.append(this.distance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("linkman:");
    if (this.linkman == null) {
      sb.append("null");
    } else {
      sb.append(this.linkman);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartypeconfig:");
    if (this.cartypeconfig == null) {
      sb.append("null");
    } else {
      sb.append(this.cartypeconfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("siteid:");
    sb.append(this.siteid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cartitle:");
    if (this.cartitle == null) {
      sb.append("null");
    } else {
      sb.append(this.cartitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carlevelsecond:");
    sb.append(this.carlevelsecond);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ischeckreportjson:");
    sb.append(this.ischeckreportjson);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clickcount:");
    sb.append(this.clickcount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("crmcustomerid:");
    sb.append(this.crmcustomerid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boost:");
    sb.append(this.boost);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boostc:");
    sb.append(this.boostc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("boostapp:");
    sb.append(this.boostapp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("costrate:");
    sb.append(this.costrate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DTOCarInfoIndexFieldStandardSchemeFactory implements SchemeFactory {
    public DTOCarInfoIndexFieldStandardScheme getScheme() {
      return new DTOCarInfoIndexFieldStandardScheme();
    }
  }

  private static class DTOCarInfoIndexFieldStandardScheme extends StandardScheme<DTOCarInfoIndexField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DTOCarInfoIndexField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UCARID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ucarid = iprot.readI32();
              struct.setUcaridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UCARSERIALNUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ucarserialnumber = iprot.readString();
              struct.setUcarserialnumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UCARSTATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ucarstatus = iprot.readI32();
              struct.setUcarstatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CARPROVICEID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carproviceid = iprot.readI32();
              struct.setCarproviceidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CARCITYID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carcityid = iprot.readI32();
              struct.setCarcityidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.color = iprot.readString();
              struct.setColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DRIVINGMILEAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.drivingmileage = iprot.readI32();
              struct.setDrivingmileageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPLETERATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.completerate = iprot.readI32();
              struct.setCompleterateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CARSOURCE1L
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carsource1l = iprot.readI32();
              struct.setCarsource1lIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ISVIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isvideo = iprot.readI32();
              struct.setIsvideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIRSTPICTRUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.firstpictrue = iprot.readI32();
              struct.setFirstpictrueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CARTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cartype = iprot.readI32();
              struct.setCartypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ISNEGLECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isneglect = iprot.readI32();
              struct.setIsneglectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PICTURECOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.picturecount = iprot.readI32();
              struct.setPicturecountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PICTURENUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.picturenumber = iprot.readI32();
              struct.setPicturenumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DISPLAYPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.displayprice = iprot.readDouble();
              struct.setDisplaypriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // STATUSMODIFYTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusmodifytime = iprot.readString();
              struct.setStatusmodifytimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATETIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.createtime = iprot.readString();
              struct.setCreatetimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BUYCARDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buycardate = iprot.readString();
              struct.setBuycardateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CARPUBLISHTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carpublishtime = iprot.readString();
              struct.setCarpublishtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // UCARPICWHOLEPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ucarpicwholepath = iprot.readString();
              struct.setUcarpicwholepathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ISDEALERRECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isdealerrecommend = iprot.readI32();
              struct.setIsdealerrecommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // ISAUTHENTICATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isauthenticated = iprot.readI32();
              struct.setIsauthenticatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // ISRECOMMENDGL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isrecommendgl = iprot.readI32();
              struct.setIsrecommendglIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // ISOWNCAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isowncar = iprot.readI32();
              struct.setIsowncarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // C2BPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.c2bprice = iprot.readDouble();
              struct.setC2bpriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // ISTOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.istop = iprot.readI32();
              struct.setIstopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // STATEDESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statedescription = iprot.readString();
              struct.setStatedescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // ISWARRANTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iswarranty = iprot.readI32();
              struct.setIswarrantyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // WARRANTYTYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.warrantytypes = iprot.readString();
              struct.setWarrantytypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ISSHOWMR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isshowmr = iprot.readI32();
              struct.setIsshowmrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // CARPROVINCENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carprovincename = iprot.readString();
              struct.setCarprovincenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CARCITYNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carcityname = iprot.readString();
              struct.setCarcitynameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // CARDISTRICTID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cardistrictid = iprot.readI32();
              struct.setCardistrictidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // CARDISTRICTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardistrictname = iprot.readString();
              struct.setCardistrictnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 38: // SLOGAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.slogan = iprot.readString();
              struct.setSloganIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // B2BPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.b2bprice = iprot.readDouble();
              struct.setB2bpriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // ISB2B
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isb2b = iprot.readI32();
              struct.setIsb2bIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // MAINBRANDID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mainbrandid = iprot.readI32();
              struct.setMainbrandidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // PRODUCERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.producerid = iprot.readI32();
              struct.setProduceridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // BRANDID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brandid = iprot.readI32();
              struct.setBrandidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // CARLEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carlevel = iprot.readString();
              struct.setCarlevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // CARLEVELVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carlevelvalue = iprot.readI32();
              struct.setCarlevelvalueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 47: // CARID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.carid = iprot.readI64();
              struct.setCaridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 48: // GEARBOXTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gearboxtype = iprot.readI32();
              struct.setGearboxtypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 49: // GEARBOXTYPESTRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gearboxtypestring = iprot.readString();
              struct.setGearboxtypestringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // EXHAUSTVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exhaustvalue = iprot.readDouble();
              struct.setExhaustvalueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // CARYEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.caryear = iprot.readI32();
              struct.setCaryearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // CARREFERPRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.carreferprice = iprot.readDouble();
              struct.setCarreferpriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // ENVIRSTANDARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.envirstandard = iprot.readString();
              struct.setEnvirstandardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // CONSUMPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.consumption = iprot.readDouble();
              struct.setConsumptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // OILTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.oiltype = iprot.readI32();
              struct.setOiltypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // ENGINELOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.enginelocation = iprot.readI32();
              struct.setEnginelocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // BODYDOORS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bodydoors = iprot.readI32();
              struct.setBodydoorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // SEATNUMMIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatnummin = iprot.readI32();
              struct.setSeatnumminIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // SEATNUMMAX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatnummax = iprot.readI32();
              struct.setSeatnummaxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // ISWAGON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iswagon = iprot.readI32();
              struct.setIswagonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // DRIVETYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.drivetype = iprot.readI32();
              struct.setDrivetypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // ISAGENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isagency = iprot.readI32();
              struct.setIsagencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // CSBODYFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.csbodyform = iprot.readI32();
              struct.setCsbodyformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 64: // BRANDATTR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brandattr = iprot.readI32();
              struct.setBrandattrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // ISMARKINGVENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ismarkingvendor = iprot.readI32();
              struct.setIsmarkingvendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // COUNTRYVALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countryvalue = iprot.readI32();
              struct.setCountryvalueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userid = iprot.readI32();
              struct.setUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // SUPERIORID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.superiorid = iprot.readI32();
              struct.setSuperioridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // VENDORNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vendorname = iprot.readString();
              struct.setVendornameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 70: // VENDORTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vendortype = iprot.readI32();
              struct.setVendortypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 71: // CONTACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contact = iprot.readString();
              struct.setContactIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 72: // ISJDVENDOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isjdvendor = iprot.readI32();
              struct.setIsjdvendorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 73: // ISINCTRANSFER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isinctransfer = iprot.readI32();
              struct.setIsinctransferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 74: // USERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.usertype = iprot.readI32();
              struct.setUsertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 75: // ISACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isactivity = iprot.readI32();
              struct.setIsactivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 76: // MEMBERTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.membertype = iprot.readI32();
              struct.setMembertypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 77: // ISBANGMAI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isbangmai = iprot.readI32();
              struct.setIsbangmaiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 78: // DVQFLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dvqflag = iprot.readI32();
              struct.setDvqflagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 79: // ISBANGMAICHE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isbangmaiche = iprot.readI32();
              struct.setIsbangmaicheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 80: // BAIDUMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.baidumap = iprot.readString();
              struct.setBaidumapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 81: // DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.distance = iprot.readDouble();
              struct.setDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 82: // LINKMAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.linkman = iprot.readString();
              struct.setLinkmanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 83: // CARTYPECONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cartypeconfig = iprot.readString();
              struct.setCartypeconfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 84: // SITEID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.siteid = iprot.readI32();
              struct.setSiteidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 85: // CARTITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cartitle = iprot.readString();
              struct.setCartitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 86: // CARLEVELSECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carlevelsecond = iprot.readI32();
              struct.setCarlevelsecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 87: // ISCHECKREPORTJSON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ischeckreportjson = iprot.readI32();
              struct.setIscheckreportjsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 88: // CLICKCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clickcount = iprot.readI64();
              struct.setClickcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 89: // CRMCUSTOMERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crmcustomerid = iprot.readI32();
              struct.setCrmcustomeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // BOOST
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.boost = iprot.readDouble();
              struct.setBoostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // BOOSTC
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.boostc = iprot.readDouble();
              struct.setBoostcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // BOOSTAPP
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.boostapp = iprot.readDouble();
              struct.setBoostappIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // COSTRATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.costrate = iprot.readDouble();
              struct.setCostrateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DTOCarInfoIndexField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UCARID_FIELD_DESC);
      oprot.writeI32(struct.ucarid);
      oprot.writeFieldEnd();
      if (struct.ucarserialnumber != null) {
        oprot.writeFieldBegin(UCARSERIALNUMBER_FIELD_DESC);
        oprot.writeString(struct.ucarserialnumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UCARSTATUS_FIELD_DESC);
      oprot.writeI32(struct.ucarstatus);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARPROVICEID_FIELD_DESC);
      oprot.writeI32(struct.carproviceid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARCITYID_FIELD_DESC);
      oprot.writeI32(struct.carcityid);
      oprot.writeFieldEnd();
      if (struct.color != null) {
        oprot.writeFieldBegin(COLOR_FIELD_DESC);
        oprot.writeString(struct.color);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DRIVINGMILEAGE_FIELD_DESC);
      oprot.writeI32(struct.drivingmileage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMPLETERATE_FIELD_DESC);
      oprot.writeI32(struct.completerate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARSOURCE1L_FIELD_DESC);
      oprot.writeI32(struct.carsource1l);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISVIDEO_FIELD_DESC);
      oprot.writeI32(struct.isvideo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FIRSTPICTRUE_FIELD_DESC);
      oprot.writeI32(struct.firstpictrue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARTYPE_FIELD_DESC);
      oprot.writeI32(struct.cartype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.source);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISNEGLECT_FIELD_DESC);
      oprot.writeI32(struct.isneglect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PICTURECOUNT_FIELD_DESC);
      oprot.writeI32(struct.picturecount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PICTURENUMBER_FIELD_DESC);
      oprot.writeI32(struct.picturenumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISPLAYPRICE_FIELD_DESC);
      oprot.writeDouble(struct.displayprice);
      oprot.writeFieldEnd();
      if (struct.statusmodifytime != null) {
        oprot.writeFieldBegin(STATUSMODIFYTIME_FIELD_DESC);
        oprot.writeString(struct.statusmodifytime);
        oprot.writeFieldEnd();
      }
      if (struct.createtime != null) {
        oprot.writeFieldBegin(CREATETIME_FIELD_DESC);
        oprot.writeString(struct.createtime);
        oprot.writeFieldEnd();
      }
      if (struct.buycardate != null) {
        oprot.writeFieldBegin(BUYCARDATE_FIELD_DESC);
        oprot.writeString(struct.buycardate);
        oprot.writeFieldEnd();
      }
      if (struct.carpublishtime != null) {
        oprot.writeFieldBegin(CARPUBLISHTIME_FIELD_DESC);
        oprot.writeString(struct.carpublishtime);
        oprot.writeFieldEnd();
      }
      if (struct.ucarpicwholepath != null) {
        oprot.writeFieldBegin(UCARPICWHOLEPATH_FIELD_DESC);
        oprot.writeString(struct.ucarpicwholepath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISDEALERRECOMMEND_FIELD_DESC);
      oprot.writeI32(struct.isdealerrecommend);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISAUTHENTICATED_FIELD_DESC);
      oprot.writeI32(struct.isauthenticated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISRECOMMENDGL_FIELD_DESC);
      oprot.writeI32(struct.isrecommendgl);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISOWNCAR_FIELD_DESC);
      oprot.writeI32(struct.isowncar);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(C2BPRICE_FIELD_DESC);
      oprot.writeDouble(struct.c2bprice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISTOP_FIELD_DESC);
      oprot.writeI32(struct.istop);
      oprot.writeFieldEnd();
      if (struct.statedescription != null) {
        oprot.writeFieldBegin(STATEDESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.statedescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISWARRANTY_FIELD_DESC);
      oprot.writeI32(struct.iswarranty);
      oprot.writeFieldEnd();
      if (struct.warrantytypes != null) {
        oprot.writeFieldBegin(WARRANTYTYPES_FIELD_DESC);
        oprot.writeString(struct.warrantytypes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISSHOWMR_FIELD_DESC);
      oprot.writeI32(struct.isshowmr);
      oprot.writeFieldEnd();
      if (struct.carprovincename != null) {
        oprot.writeFieldBegin(CARPROVINCENAME_FIELD_DESC);
        oprot.writeString(struct.carprovincename);
        oprot.writeFieldEnd();
      }
      if (struct.carcityname != null) {
        oprot.writeFieldBegin(CARCITYNAME_FIELD_DESC);
        oprot.writeString(struct.carcityname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CARDISTRICTID_FIELD_DESC);
      oprot.writeI32(struct.cardistrictid);
      oprot.writeFieldEnd();
      if (struct.cardistrictname != null) {
        oprot.writeFieldBegin(CARDISTRICTNAME_FIELD_DESC);
        oprot.writeString(struct.cardistrictname);
        oprot.writeFieldEnd();
      }
      if (struct.slogan != null) {
        oprot.writeFieldBegin(SLOGAN_FIELD_DESC);
        oprot.writeString(struct.slogan);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(B2BPRICE_FIELD_DESC);
      oprot.writeDouble(struct.b2bprice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISB2B_FIELD_DESC);
      oprot.writeI32(struct.isb2b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAINBRANDID_FIELD_DESC);
      oprot.writeI32(struct.mainbrandid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRODUCERID_FIELD_DESC);
      oprot.writeI32(struct.producerid);
      oprot.writeFieldEnd();
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BRANDID_FIELD_DESC);
      oprot.writeI32(struct.brandid);
      oprot.writeFieldEnd();
      if (struct.carlevel != null) {
        oprot.writeFieldBegin(CARLEVEL_FIELD_DESC);
        oprot.writeString(struct.carlevel);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CARLEVELVALUE_FIELD_DESC);
      oprot.writeI32(struct.carlevelvalue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARID_FIELD_DESC);
      oprot.writeI64(struct.carid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GEARBOXTYPE_FIELD_DESC);
      oprot.writeI32(struct.gearboxtype);
      oprot.writeFieldEnd();
      if (struct.gearboxtypestring != null) {
        oprot.writeFieldBegin(GEARBOXTYPESTRING_FIELD_DESC);
        oprot.writeString(struct.gearboxtypestring);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(EXHAUSTVALUE_FIELD_DESC);
      oprot.writeDouble(struct.exhaustvalue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARYEAR_FIELD_DESC);
      oprot.writeI32(struct.caryear);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CARREFERPRICE_FIELD_DESC);
      oprot.writeDouble(struct.carreferprice);
      oprot.writeFieldEnd();
      if (struct.envirstandard != null) {
        oprot.writeFieldBegin(ENVIRSTANDARD_FIELD_DESC);
        oprot.writeString(struct.envirstandard);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CONSUMPTION_FIELD_DESC);
      oprot.writeDouble(struct.consumption);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OILTYPE_FIELD_DESC);
      oprot.writeI32(struct.oiltype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ENGINELOCATION_FIELD_DESC);
      oprot.writeI32(struct.enginelocation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BODYDOORS_FIELD_DESC);
      oprot.writeI32(struct.bodydoors);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEATNUMMIN_FIELD_DESC);
      oprot.writeI32(struct.seatnummin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEATNUMMAX_FIELD_DESC);
      oprot.writeI32(struct.seatnummax);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISWAGON_FIELD_DESC);
      oprot.writeI32(struct.iswagon);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DRIVETYPE_FIELD_DESC);
      oprot.writeI32(struct.drivetype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISAGENCY_FIELD_DESC);
      oprot.writeI32(struct.isagency);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CSBODYFORM_FIELD_DESC);
      oprot.writeI32(struct.csbodyform);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRANDATTR_FIELD_DESC);
      oprot.writeI32(struct.brandattr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISMARKINGVENDOR_FIELD_DESC);
      oprot.writeI32(struct.ismarkingvendor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNTRYVALUE_FIELD_DESC);
      oprot.writeI32(struct.countryvalue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USERID_FIELD_DESC);
      oprot.writeI32(struct.userid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUPERIORID_FIELD_DESC);
      oprot.writeI32(struct.superiorid);
      oprot.writeFieldEnd();
      if (struct.vendorname != null) {
        oprot.writeFieldBegin(VENDORNAME_FIELD_DESC);
        oprot.writeString(struct.vendorname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VENDORTYPE_FIELD_DESC);
      oprot.writeI32(struct.vendortype);
      oprot.writeFieldEnd();
      if (struct.contact != null) {
        oprot.writeFieldBegin(CONTACT_FIELD_DESC);
        oprot.writeString(struct.contact);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ISJDVENDOR_FIELD_DESC);
      oprot.writeI32(struct.isjdvendor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISINCTRANSFER_FIELD_DESC);
      oprot.writeI32(struct.isinctransfer);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USERTYPE_FIELD_DESC);
      oprot.writeI32(struct.usertype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISACTIVITY_FIELD_DESC);
      oprot.writeI32(struct.isactivity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEMBERTYPE_FIELD_DESC);
      oprot.writeI32(struct.membertype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISBANGMAI_FIELD_DESC);
      oprot.writeI32(struct.isbangmai);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DVQFLAG_FIELD_DESC);
      oprot.writeI32(struct.dvqflag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISBANGMAICHE_FIELD_DESC);
      oprot.writeI32(struct.isbangmaiche);
      oprot.writeFieldEnd();
      if (struct.baidumap != null) {
        oprot.writeFieldBegin(BAIDUMAP_FIELD_DESC);
        oprot.writeString(struct.baidumap);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISTANCE_FIELD_DESC);
      oprot.writeDouble(struct.distance);
      oprot.writeFieldEnd();
      if (struct.linkman != null) {
        oprot.writeFieldBegin(LINKMAN_FIELD_DESC);
        oprot.writeString(struct.linkman);
        oprot.writeFieldEnd();
      }
      if (struct.cartypeconfig != null) {
        oprot.writeFieldBegin(CARTYPECONFIG_FIELD_DESC);
        oprot.writeString(struct.cartypeconfig);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SITEID_FIELD_DESC);
      oprot.writeI32(struct.siteid);
      oprot.writeFieldEnd();
      if (struct.cartitle != null) {
        oprot.writeFieldBegin(CARTITLE_FIELD_DESC);
        oprot.writeString(struct.cartitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CARLEVELSECOND_FIELD_DESC);
      oprot.writeI32(struct.carlevelsecond);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ISCHECKREPORTJSON_FIELD_DESC);
      oprot.writeI32(struct.ischeckreportjson);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLICKCOUNT_FIELD_DESC);
      oprot.writeI64(struct.clickcount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CRMCUSTOMERID_FIELD_DESC);
      oprot.writeI32(struct.crmcustomerid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOST_FIELD_DESC);
      oprot.writeDouble(struct.boost);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOSTC_FIELD_DESC);
      oprot.writeDouble(struct.boostc);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOOSTAPP_FIELD_DESC);
      oprot.writeDouble(struct.boostapp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeDouble(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COSTRATE_FIELD_DESC);
      oprot.writeDouble(struct.costrate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DTOCarInfoIndexFieldTupleSchemeFactory implements SchemeFactory {
    public DTOCarInfoIndexFieldTupleScheme getScheme() {
      return new DTOCarInfoIndexFieldTupleScheme();
    }
  }

  private static class DTOCarInfoIndexFieldTupleScheme extends TupleScheme<DTOCarInfoIndexField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DTOCarInfoIndexField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUcarid()) {
        optionals.set(0);
      }
      if (struct.isSetUcarserialnumber()) {
        optionals.set(1);
      }
      if (struct.isSetUcarstatus()) {
        optionals.set(2);
      }
      if (struct.isSetCarproviceid()) {
        optionals.set(3);
      }
      if (struct.isSetCarcityid()) {
        optionals.set(4);
      }
      if (struct.isSetColor()) {
        optionals.set(5);
      }
      if (struct.isSetDrivingmileage()) {
        optionals.set(6);
      }
      if (struct.isSetCompleterate()) {
        optionals.set(7);
      }
      if (struct.isSetCarsource1l()) {
        optionals.set(8);
      }
      if (struct.isSetIsvideo()) {
        optionals.set(9);
      }
      if (struct.isSetFirstpictrue()) {
        optionals.set(10);
      }
      if (struct.isSetCartype()) {
        optionals.set(11);
      }
      if (struct.isSetSource()) {
        optionals.set(12);
      }
      if (struct.isSetIsneglect()) {
        optionals.set(13);
      }
      if (struct.isSetPicturecount()) {
        optionals.set(14);
      }
      if (struct.isSetPicturenumber()) {
        optionals.set(15);
      }
      if (struct.isSetDisplayprice()) {
        optionals.set(16);
      }
      if (struct.isSetStatusmodifytime()) {
        optionals.set(17);
      }
      if (struct.isSetCreatetime()) {
        optionals.set(18);
      }
      if (struct.isSetBuycardate()) {
        optionals.set(19);
      }
      if (struct.isSetCarpublishtime()) {
        optionals.set(20);
      }
      if (struct.isSetUcarpicwholepath()) {
        optionals.set(21);
      }
      if (struct.isSetIsdealerrecommend()) {
        optionals.set(22);
      }
      if (struct.isSetIsauthenticated()) {
        optionals.set(23);
      }
      if (struct.isSetIsrecommendgl()) {
        optionals.set(24);
      }
      if (struct.isSetIsowncar()) {
        optionals.set(25);
      }
      if (struct.isSetC2bprice()) {
        optionals.set(26);
      }
      if (struct.isSetIstop()) {
        optionals.set(27);
      }
      if (struct.isSetStatedescription()) {
        optionals.set(28);
      }
      if (struct.isSetIswarranty()) {
        optionals.set(29);
      }
      if (struct.isSetWarrantytypes()) {
        optionals.set(30);
      }
      if (struct.isSetIsshowmr()) {
        optionals.set(31);
      }
      if (struct.isSetCarprovincename()) {
        optionals.set(32);
      }
      if (struct.isSetCarcityname()) {
        optionals.set(33);
      }
      if (struct.isSetCardistrictid()) {
        optionals.set(34);
      }
      if (struct.isSetCardistrictname()) {
        optionals.set(35);
      }
      if (struct.isSetSlogan()) {
        optionals.set(36);
      }
      if (struct.isSetB2bprice()) {
        optionals.set(37);
      }
      if (struct.isSetIsb2b()) {
        optionals.set(38);
      }
      if (struct.isSetMainbrandid()) {
        optionals.set(39);
      }
      if (struct.isSetProducerid()) {
        optionals.set(40);
      }
      if (struct.isSetCountry()) {
        optionals.set(41);
      }
      if (struct.isSetBrandid()) {
        optionals.set(42);
      }
      if (struct.isSetCarlevel()) {
        optionals.set(43);
      }
      if (struct.isSetCarlevelvalue()) {
        optionals.set(44);
      }
      if (struct.isSetCarid()) {
        optionals.set(45);
      }
      if (struct.isSetGearboxtype()) {
        optionals.set(46);
      }
      if (struct.isSetGearboxtypestring()) {
        optionals.set(47);
      }
      if (struct.isSetExhaustvalue()) {
        optionals.set(48);
      }
      if (struct.isSetCaryear()) {
        optionals.set(49);
      }
      if (struct.isSetCarreferprice()) {
        optionals.set(50);
      }
      if (struct.isSetEnvirstandard()) {
        optionals.set(51);
      }
      if (struct.isSetConsumption()) {
        optionals.set(52);
      }
      if (struct.isSetOiltype()) {
        optionals.set(53);
      }
      if (struct.isSetEnginelocation()) {
        optionals.set(54);
      }
      if (struct.isSetBodydoors()) {
        optionals.set(55);
      }
      if (struct.isSetSeatnummin()) {
        optionals.set(56);
      }
      if (struct.isSetSeatnummax()) {
        optionals.set(57);
      }
      if (struct.isSetIswagon()) {
        optionals.set(58);
      }
      if (struct.isSetDrivetype()) {
        optionals.set(59);
      }
      if (struct.isSetIsagency()) {
        optionals.set(60);
      }
      if (struct.isSetCsbodyform()) {
        optionals.set(61);
      }
      if (struct.isSetBrandattr()) {
        optionals.set(62);
      }
      if (struct.isSetIsmarkingvendor()) {
        optionals.set(63);
      }
      if (struct.isSetCountryvalue()) {
        optionals.set(64);
      }
      if (struct.isSetUserid()) {
        optionals.set(65);
      }
      if (struct.isSetSuperiorid()) {
        optionals.set(66);
      }
      if (struct.isSetVendorname()) {
        optionals.set(67);
      }
      if (struct.isSetVendortype()) {
        optionals.set(68);
      }
      if (struct.isSetContact()) {
        optionals.set(69);
      }
      if (struct.isSetIsjdvendor()) {
        optionals.set(70);
      }
      if (struct.isSetIsinctransfer()) {
        optionals.set(71);
      }
      if (struct.isSetUsertype()) {
        optionals.set(72);
      }
      if (struct.isSetIsactivity()) {
        optionals.set(73);
      }
      if (struct.isSetMembertype()) {
        optionals.set(74);
      }
      if (struct.isSetIsbangmai()) {
        optionals.set(75);
      }
      if (struct.isSetDvqflag()) {
        optionals.set(76);
      }
      if (struct.isSetIsbangmaiche()) {
        optionals.set(77);
      }
      if (struct.isSetBaidumap()) {
        optionals.set(78);
      }
      if (struct.isSetDistance()) {
        optionals.set(79);
      }
      if (struct.isSetLinkman()) {
        optionals.set(80);
      }
      if (struct.isSetCartypeconfig()) {
        optionals.set(81);
      }
      if (struct.isSetSiteid()) {
        optionals.set(82);
      }
      if (struct.isSetCartitle()) {
        optionals.set(83);
      }
      if (struct.isSetCarlevelsecond()) {
        optionals.set(84);
      }
      if (struct.isSetIscheckreportjson()) {
        optionals.set(85);
      }
      if (struct.isSetClickcount()) {
        optionals.set(86);
      }
      if (struct.isSetCrmcustomerid()) {
        optionals.set(87);
      }
      if (struct.isSetBoost()) {
        optionals.set(88);
      }
      if (struct.isSetBoostc()) {
        optionals.set(89);
      }
      if (struct.isSetBoostapp()) {
        optionals.set(90);
      }
      if (struct.isSetScore()) {
        optionals.set(91);
      }
      if (struct.isSetCostrate()) {
        optionals.set(92);
      }
      oprot.writeBitSet(optionals, 93);
      if (struct.isSetUcarid()) {
        oprot.writeI32(struct.ucarid);
      }
      if (struct.isSetUcarserialnumber()) {
        oprot.writeString(struct.ucarserialnumber);
      }
      if (struct.isSetUcarstatus()) {
        oprot.writeI32(struct.ucarstatus);
      }
      if (struct.isSetCarproviceid()) {
        oprot.writeI32(struct.carproviceid);
      }
      if (struct.isSetCarcityid()) {
        oprot.writeI32(struct.carcityid);
      }
      if (struct.isSetColor()) {
        oprot.writeString(struct.color);
      }
      if (struct.isSetDrivingmileage()) {
        oprot.writeI32(struct.drivingmileage);
      }
      if (struct.isSetCompleterate()) {
        oprot.writeI32(struct.completerate);
      }
      if (struct.isSetCarsource1l()) {
        oprot.writeI32(struct.carsource1l);
      }
      if (struct.isSetIsvideo()) {
        oprot.writeI32(struct.isvideo);
      }
      if (struct.isSetFirstpictrue()) {
        oprot.writeI32(struct.firstpictrue);
      }
      if (struct.isSetCartype()) {
        oprot.writeI32(struct.cartype);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source);
      }
      if (struct.isSetIsneglect()) {
        oprot.writeI32(struct.isneglect);
      }
      if (struct.isSetPicturecount()) {
        oprot.writeI32(struct.picturecount);
      }
      if (struct.isSetPicturenumber()) {
        oprot.writeI32(struct.picturenumber);
      }
      if (struct.isSetDisplayprice()) {
        oprot.writeDouble(struct.displayprice);
      }
      if (struct.isSetStatusmodifytime()) {
        oprot.writeString(struct.statusmodifytime);
      }
      if (struct.isSetCreatetime()) {
        oprot.writeString(struct.createtime);
      }
      if (struct.isSetBuycardate()) {
        oprot.writeString(struct.buycardate);
      }
      if (struct.isSetCarpublishtime()) {
        oprot.writeString(struct.carpublishtime);
      }
      if (struct.isSetUcarpicwholepath()) {
        oprot.writeString(struct.ucarpicwholepath);
      }
      if (struct.isSetIsdealerrecommend()) {
        oprot.writeI32(struct.isdealerrecommend);
      }
      if (struct.isSetIsauthenticated()) {
        oprot.writeI32(struct.isauthenticated);
      }
      if (struct.isSetIsrecommendgl()) {
        oprot.writeI32(struct.isrecommendgl);
      }
      if (struct.isSetIsowncar()) {
        oprot.writeI32(struct.isowncar);
      }
      if (struct.isSetC2bprice()) {
        oprot.writeDouble(struct.c2bprice);
      }
      if (struct.isSetIstop()) {
        oprot.writeI32(struct.istop);
      }
      if (struct.isSetStatedescription()) {
        oprot.writeString(struct.statedescription);
      }
      if (struct.isSetIswarranty()) {
        oprot.writeI32(struct.iswarranty);
      }
      if (struct.isSetWarrantytypes()) {
        oprot.writeString(struct.warrantytypes);
      }
      if (struct.isSetIsshowmr()) {
        oprot.writeI32(struct.isshowmr);
      }
      if (struct.isSetCarprovincename()) {
        oprot.writeString(struct.carprovincename);
      }
      if (struct.isSetCarcityname()) {
        oprot.writeString(struct.carcityname);
      }
      if (struct.isSetCardistrictid()) {
        oprot.writeI32(struct.cardistrictid);
      }
      if (struct.isSetCardistrictname()) {
        oprot.writeString(struct.cardistrictname);
      }
      if (struct.isSetSlogan()) {
        oprot.writeString(struct.slogan);
      }
      if (struct.isSetB2bprice()) {
        oprot.writeDouble(struct.b2bprice);
      }
      if (struct.isSetIsb2b()) {
        oprot.writeI32(struct.isb2b);
      }
      if (struct.isSetMainbrandid()) {
        oprot.writeI32(struct.mainbrandid);
      }
      if (struct.isSetProducerid()) {
        oprot.writeI32(struct.producerid);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetBrandid()) {
        oprot.writeI32(struct.brandid);
      }
      if (struct.isSetCarlevel()) {
        oprot.writeString(struct.carlevel);
      }
      if (struct.isSetCarlevelvalue()) {
        oprot.writeI32(struct.carlevelvalue);
      }
      if (struct.isSetCarid()) {
        oprot.writeI64(struct.carid);
      }
      if (struct.isSetGearboxtype()) {
        oprot.writeI32(struct.gearboxtype);
      }
      if (struct.isSetGearboxtypestring()) {
        oprot.writeString(struct.gearboxtypestring);
      }
      if (struct.isSetExhaustvalue()) {
        oprot.writeDouble(struct.exhaustvalue);
      }
      if (struct.isSetCaryear()) {
        oprot.writeI32(struct.caryear);
      }
      if (struct.isSetCarreferprice()) {
        oprot.writeDouble(struct.carreferprice);
      }
      if (struct.isSetEnvirstandard()) {
        oprot.writeString(struct.envirstandard);
      }
      if (struct.isSetConsumption()) {
        oprot.writeDouble(struct.consumption);
      }
      if (struct.isSetOiltype()) {
        oprot.writeI32(struct.oiltype);
      }
      if (struct.isSetEnginelocation()) {
        oprot.writeI32(struct.enginelocation);
      }
      if (struct.isSetBodydoors()) {
        oprot.writeI32(struct.bodydoors);
      }
      if (struct.isSetSeatnummin()) {
        oprot.writeI32(struct.seatnummin);
      }
      if (struct.isSetSeatnummax()) {
        oprot.writeI32(struct.seatnummax);
      }
      if (struct.isSetIswagon()) {
        oprot.writeI32(struct.iswagon);
      }
      if (struct.isSetDrivetype()) {
        oprot.writeI32(struct.drivetype);
      }
      if (struct.isSetIsagency()) {
        oprot.writeI32(struct.isagency);
      }
      if (struct.isSetCsbodyform()) {
        oprot.writeI32(struct.csbodyform);
      }
      if (struct.isSetBrandattr()) {
        oprot.writeI32(struct.brandattr);
      }
      if (struct.isSetIsmarkingvendor()) {
        oprot.writeI32(struct.ismarkingvendor);
      }
      if (struct.isSetCountryvalue()) {
        oprot.writeI32(struct.countryvalue);
      }
      if (struct.isSetUserid()) {
        oprot.writeI32(struct.userid);
      }
      if (struct.isSetSuperiorid()) {
        oprot.writeI32(struct.superiorid);
      }
      if (struct.isSetVendorname()) {
        oprot.writeString(struct.vendorname);
      }
      if (struct.isSetVendortype()) {
        oprot.writeI32(struct.vendortype);
      }
      if (struct.isSetContact()) {
        oprot.writeString(struct.contact);
      }
      if (struct.isSetIsjdvendor()) {
        oprot.writeI32(struct.isjdvendor);
      }
      if (struct.isSetIsinctransfer()) {
        oprot.writeI32(struct.isinctransfer);
      }
      if (struct.isSetUsertype()) {
        oprot.writeI32(struct.usertype);
      }
      if (struct.isSetIsactivity()) {
        oprot.writeI32(struct.isactivity);
      }
      if (struct.isSetMembertype()) {
        oprot.writeI32(struct.membertype);
      }
      if (struct.isSetIsbangmai()) {
        oprot.writeI32(struct.isbangmai);
      }
      if (struct.isSetDvqflag()) {
        oprot.writeI32(struct.dvqflag);
      }
      if (struct.isSetIsbangmaiche()) {
        oprot.writeI32(struct.isbangmaiche);
      }
      if (struct.isSetBaidumap()) {
        oprot.writeString(struct.baidumap);
      }
      if (struct.isSetDistance()) {
        oprot.writeDouble(struct.distance);
      }
      if (struct.isSetLinkman()) {
        oprot.writeString(struct.linkman);
      }
      if (struct.isSetCartypeconfig()) {
        oprot.writeString(struct.cartypeconfig);
      }
      if (struct.isSetSiteid()) {
        oprot.writeI32(struct.siteid);
      }
      if (struct.isSetCartitle()) {
        oprot.writeString(struct.cartitle);
      }
      if (struct.isSetCarlevelsecond()) {
        oprot.writeI32(struct.carlevelsecond);
      }
      if (struct.isSetIscheckreportjson()) {
        oprot.writeI32(struct.ischeckreportjson);
      }
      if (struct.isSetClickcount()) {
        oprot.writeI64(struct.clickcount);
      }
      if (struct.isSetCrmcustomerid()) {
        oprot.writeI32(struct.crmcustomerid);
      }
      if (struct.isSetBoost()) {
        oprot.writeDouble(struct.boost);
      }
      if (struct.isSetBoostc()) {
        oprot.writeDouble(struct.boostc);
      }
      if (struct.isSetBoostapp()) {
        oprot.writeDouble(struct.boostapp);
      }
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetCostrate()) {
        oprot.writeDouble(struct.costrate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DTOCarInfoIndexField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(93);
      if (incoming.get(0)) {
        struct.ucarid = iprot.readI32();
        struct.setUcaridIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ucarserialnumber = iprot.readString();
        struct.setUcarserialnumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ucarstatus = iprot.readI32();
        struct.setUcarstatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.carproviceid = iprot.readI32();
        struct.setCarproviceidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.carcityid = iprot.readI32();
        struct.setCarcityidIsSet(true);
      }
      if (incoming.get(5)) {
        struct.color = iprot.readString();
        struct.setColorIsSet(true);
      }
      if (incoming.get(6)) {
        struct.drivingmileage = iprot.readI32();
        struct.setDrivingmileageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.completerate = iprot.readI32();
        struct.setCompleterateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.carsource1l = iprot.readI32();
        struct.setCarsource1lIsSet(true);
      }
      if (incoming.get(9)) {
        struct.isvideo = iprot.readI32();
        struct.setIsvideoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.firstpictrue = iprot.readI32();
        struct.setFirstpictrueIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cartype = iprot.readI32();
        struct.setCartypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isneglect = iprot.readI32();
        struct.setIsneglectIsSet(true);
      }
      if (incoming.get(14)) {
        struct.picturecount = iprot.readI32();
        struct.setPicturecountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.picturenumber = iprot.readI32();
        struct.setPicturenumberIsSet(true);
      }
      if (incoming.get(16)) {
        struct.displayprice = iprot.readDouble();
        struct.setDisplaypriceIsSet(true);
      }
      if (incoming.get(17)) {
        struct.statusmodifytime = iprot.readString();
        struct.setStatusmodifytimeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.createtime = iprot.readString();
        struct.setCreatetimeIsSet(true);
      }
      if (incoming.get(19)) {
        struct.buycardate = iprot.readString();
        struct.setBuycardateIsSet(true);
      }
      if (incoming.get(20)) {
        struct.carpublishtime = iprot.readString();
        struct.setCarpublishtimeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.ucarpicwholepath = iprot.readString();
        struct.setUcarpicwholepathIsSet(true);
      }
      if (incoming.get(22)) {
        struct.isdealerrecommend = iprot.readI32();
        struct.setIsdealerrecommendIsSet(true);
      }
      if (incoming.get(23)) {
        struct.isauthenticated = iprot.readI32();
        struct.setIsauthenticatedIsSet(true);
      }
      if (incoming.get(24)) {
        struct.isrecommendgl = iprot.readI32();
        struct.setIsrecommendglIsSet(true);
      }
      if (incoming.get(25)) {
        struct.isowncar = iprot.readI32();
        struct.setIsowncarIsSet(true);
      }
      if (incoming.get(26)) {
        struct.c2bprice = iprot.readDouble();
        struct.setC2bpriceIsSet(true);
      }
      if (incoming.get(27)) {
        struct.istop = iprot.readI32();
        struct.setIstopIsSet(true);
      }
      if (incoming.get(28)) {
        struct.statedescription = iprot.readString();
        struct.setStatedescriptionIsSet(true);
      }
      if (incoming.get(29)) {
        struct.iswarranty = iprot.readI32();
        struct.setIswarrantyIsSet(true);
      }
      if (incoming.get(30)) {
        struct.warrantytypes = iprot.readString();
        struct.setWarrantytypesIsSet(true);
      }
      if (incoming.get(31)) {
        struct.isshowmr = iprot.readI32();
        struct.setIsshowmrIsSet(true);
      }
      if (incoming.get(32)) {
        struct.carprovincename = iprot.readString();
        struct.setCarprovincenameIsSet(true);
      }
      if (incoming.get(33)) {
        struct.carcityname = iprot.readString();
        struct.setCarcitynameIsSet(true);
      }
      if (incoming.get(34)) {
        struct.cardistrictid = iprot.readI32();
        struct.setCardistrictidIsSet(true);
      }
      if (incoming.get(35)) {
        struct.cardistrictname = iprot.readString();
        struct.setCardistrictnameIsSet(true);
      }
      if (incoming.get(36)) {
        struct.slogan = iprot.readString();
        struct.setSloganIsSet(true);
      }
      if (incoming.get(37)) {
        struct.b2bprice = iprot.readDouble();
        struct.setB2bpriceIsSet(true);
      }
      if (incoming.get(38)) {
        struct.isb2b = iprot.readI32();
        struct.setIsb2bIsSet(true);
      }
      if (incoming.get(39)) {
        struct.mainbrandid = iprot.readI32();
        struct.setMainbrandidIsSet(true);
      }
      if (incoming.get(40)) {
        struct.producerid = iprot.readI32();
        struct.setProduceridIsSet(true);
      }
      if (incoming.get(41)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(42)) {
        struct.brandid = iprot.readI32();
        struct.setBrandidIsSet(true);
      }
      if (incoming.get(43)) {
        struct.carlevel = iprot.readString();
        struct.setCarlevelIsSet(true);
      }
      if (incoming.get(44)) {
        struct.carlevelvalue = iprot.readI32();
        struct.setCarlevelvalueIsSet(true);
      }
      if (incoming.get(45)) {
        struct.carid = iprot.readI64();
        struct.setCaridIsSet(true);
      }
      if (incoming.get(46)) {
        struct.gearboxtype = iprot.readI32();
        struct.setGearboxtypeIsSet(true);
      }
      if (incoming.get(47)) {
        struct.gearboxtypestring = iprot.readString();
        struct.setGearboxtypestringIsSet(true);
      }
      if (incoming.get(48)) {
        struct.exhaustvalue = iprot.readDouble();
        struct.setExhaustvalueIsSet(true);
      }
      if (incoming.get(49)) {
        struct.caryear = iprot.readI32();
        struct.setCaryearIsSet(true);
      }
      if (incoming.get(50)) {
        struct.carreferprice = iprot.readDouble();
        struct.setCarreferpriceIsSet(true);
      }
      if (incoming.get(51)) {
        struct.envirstandard = iprot.readString();
        struct.setEnvirstandardIsSet(true);
      }
      if (incoming.get(52)) {
        struct.consumption = iprot.readDouble();
        struct.setConsumptionIsSet(true);
      }
      if (incoming.get(53)) {
        struct.oiltype = iprot.readI32();
        struct.setOiltypeIsSet(true);
      }
      if (incoming.get(54)) {
        struct.enginelocation = iprot.readI32();
        struct.setEnginelocationIsSet(true);
      }
      if (incoming.get(55)) {
        struct.bodydoors = iprot.readI32();
        struct.setBodydoorsIsSet(true);
      }
      if (incoming.get(56)) {
        struct.seatnummin = iprot.readI32();
        struct.setSeatnumminIsSet(true);
      }
      if (incoming.get(57)) {
        struct.seatnummax = iprot.readI32();
        struct.setSeatnummaxIsSet(true);
      }
      if (incoming.get(58)) {
        struct.iswagon = iprot.readI32();
        struct.setIswagonIsSet(true);
      }
      if (incoming.get(59)) {
        struct.drivetype = iprot.readI32();
        struct.setDrivetypeIsSet(true);
      }
      if (incoming.get(60)) {
        struct.isagency = iprot.readI32();
        struct.setIsagencyIsSet(true);
      }
      if (incoming.get(61)) {
        struct.csbodyform = iprot.readI32();
        struct.setCsbodyformIsSet(true);
      }
      if (incoming.get(62)) {
        struct.brandattr = iprot.readI32();
        struct.setBrandattrIsSet(true);
      }
      if (incoming.get(63)) {
        struct.ismarkingvendor = iprot.readI32();
        struct.setIsmarkingvendorIsSet(true);
      }
      if (incoming.get(64)) {
        struct.countryvalue = iprot.readI32();
        struct.setCountryvalueIsSet(true);
      }
      if (incoming.get(65)) {
        struct.userid = iprot.readI32();
        struct.setUseridIsSet(true);
      }
      if (incoming.get(66)) {
        struct.superiorid = iprot.readI32();
        struct.setSuperioridIsSet(true);
      }
      if (incoming.get(67)) {
        struct.vendorname = iprot.readString();
        struct.setVendornameIsSet(true);
      }
      if (incoming.get(68)) {
        struct.vendortype = iprot.readI32();
        struct.setVendortypeIsSet(true);
      }
      if (incoming.get(69)) {
        struct.contact = iprot.readString();
        struct.setContactIsSet(true);
      }
      if (incoming.get(70)) {
        struct.isjdvendor = iprot.readI32();
        struct.setIsjdvendorIsSet(true);
      }
      if (incoming.get(71)) {
        struct.isinctransfer = iprot.readI32();
        struct.setIsinctransferIsSet(true);
      }
      if (incoming.get(72)) {
        struct.usertype = iprot.readI32();
        struct.setUsertypeIsSet(true);
      }
      if (incoming.get(73)) {
        struct.isactivity = iprot.readI32();
        struct.setIsactivityIsSet(true);
      }
      if (incoming.get(74)) {
        struct.membertype = iprot.readI32();
        struct.setMembertypeIsSet(true);
      }
      if (incoming.get(75)) {
        struct.isbangmai = iprot.readI32();
        struct.setIsbangmaiIsSet(true);
      }
      if (incoming.get(76)) {
        struct.dvqflag = iprot.readI32();
        struct.setDvqflagIsSet(true);
      }
      if (incoming.get(77)) {
        struct.isbangmaiche = iprot.readI32();
        struct.setIsbangmaicheIsSet(true);
      }
      if (incoming.get(78)) {
        struct.baidumap = iprot.readString();
        struct.setBaidumapIsSet(true);
      }
      if (incoming.get(79)) {
        struct.distance = iprot.readDouble();
        struct.setDistanceIsSet(true);
      }
      if (incoming.get(80)) {
        struct.linkman = iprot.readString();
        struct.setLinkmanIsSet(true);
      }
      if (incoming.get(81)) {
        struct.cartypeconfig = iprot.readString();
        struct.setCartypeconfigIsSet(true);
      }
      if (incoming.get(82)) {
        struct.siteid = iprot.readI32();
        struct.setSiteidIsSet(true);
      }
      if (incoming.get(83)) {
        struct.cartitle = iprot.readString();
        struct.setCartitleIsSet(true);
      }
      if (incoming.get(84)) {
        struct.carlevelsecond = iprot.readI32();
        struct.setCarlevelsecondIsSet(true);
      }
      if (incoming.get(85)) {
        struct.ischeckreportjson = iprot.readI32();
        struct.setIscheckreportjsonIsSet(true);
      }
      if (incoming.get(86)) {
        struct.clickcount = iprot.readI64();
        struct.setClickcountIsSet(true);
      }
      if (incoming.get(87)) {
        struct.crmcustomerid = iprot.readI32();
        struct.setCrmcustomeridIsSet(true);
      }
      if (incoming.get(88)) {
        struct.boost = iprot.readDouble();
        struct.setBoostIsSet(true);
      }
      if (incoming.get(89)) {
        struct.boostc = iprot.readDouble();
        struct.setBoostcIsSet(true);
      }
      if (incoming.get(90)) {
        struct.boostapp = iprot.readDouble();
        struct.setBoostappIsSet(true);
      }
      if (incoming.get(91)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(92)) {
        struct.costrate = iprot.readDouble();
        struct.setCostrateIsSet(true);
      }
    }
  }

}

