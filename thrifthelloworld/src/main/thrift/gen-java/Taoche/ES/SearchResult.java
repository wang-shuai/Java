/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class SearchResult implements org.apache.thrift.TBase<SearchResult, SearchResult._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResult");

  private static final org.apache.thrift.protocol.TField CAR_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("CarList", org.apache.thrift.protocol.TType.LIST, (short)100);
  private static final org.apache.thrift.protocol.TField FACET_FIELD_DESC = new org.apache.thrift.protocol.TField("Facet", org.apache.thrift.protocol.TType.LIST, (short)101);
  private static final org.apache.thrift.protocol.TField QUESTION_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("QuestionList", org.apache.thrift.protocol.TType.LIST, (short)102);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("Count", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("Message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_PARAMETERS_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("RequestParametersLog", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STEP_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("StepCount", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_ELAPSED_MILLISECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("TotalElapsedMilliseconds", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchResultStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchResultTupleSchemeFactory());
  }

  public List<DTOCarInfoIndexField> CarList; // required
  public List<AggrFieldResult> Facet; // required
  public List<DTOQuestionIndexField> QuestionList; // required
  public long Count; // required
  public String Message; // required
  public String RequestParametersLog; // required
  public List<Integer> StepCount; // required
  public long TotalElapsedMilliseconds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CAR_LIST((short)100, "CarList"),
    FACET((short)101, "Facet"),
    QUESTION_LIST((short)102, "QuestionList"),
    COUNT((short)1, "Count"),
    MESSAGE((short)2, "Message"),
    REQUEST_PARAMETERS_LOG((short)3, "RequestParametersLog"),
    STEP_COUNT((short)4, "StepCount"),
    TOTAL_ELAPSED_MILLISECONDS((short)5, "TotalElapsedMilliseconds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 100: // CAR_LIST
          return CAR_LIST;
        case 101: // FACET
          return FACET;
        case 102: // QUESTION_LIST
          return QUESTION_LIST;
        case 1: // COUNT
          return COUNT;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // REQUEST_PARAMETERS_LOG
          return REQUEST_PARAMETERS_LOG;
        case 4: // STEP_COUNT
          return STEP_COUNT;
        case 5: // TOTAL_ELAPSED_MILLISECONDS
          return TOTAL_ELAPSED_MILLISECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNT_ISSET_ID = 0;
  private static final int __TOTALELAPSEDMILLISECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CAR_LIST, new org.apache.thrift.meta_data.FieldMetaData("CarList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DTOCarInfoIndexField"))));
    tmpMap.put(_Fields.FACET, new org.apache.thrift.meta_data.FieldMetaData("Facet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "AggrFieldResult"))));
    tmpMap.put(_Fields.QUESTION_LIST, new org.apache.thrift.meta_data.FieldMetaData("QuestionList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "DTOQuestionIndexField"))));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("Count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("Message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_PARAMETERS_LOG, new org.apache.thrift.meta_data.FieldMetaData("RequestParametersLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEP_COUNT, new org.apache.thrift.meta_data.FieldMetaData("StepCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TOTAL_ELAPSED_MILLISECONDS, new org.apache.thrift.meta_data.FieldMetaData("TotalElapsedMilliseconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResult.class, metaDataMap);
  }

  public SearchResult() {
  }

  public SearchResult(
    List<DTOCarInfoIndexField> CarList,
    List<AggrFieldResult> Facet,
    List<DTOQuestionIndexField> QuestionList,
    long Count,
    String Message,
    String RequestParametersLog,
    List<Integer> StepCount,
    long TotalElapsedMilliseconds)
  {
    this();
    this.CarList = CarList;
    this.Facet = Facet;
    this.QuestionList = QuestionList;
    this.Count = Count;
    setCountIsSet(true);
    this.Message = Message;
    this.RequestParametersLog = RequestParametersLog;
    this.StepCount = StepCount;
    this.TotalElapsedMilliseconds = TotalElapsedMilliseconds;
    setTotalElapsedMillisecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResult(SearchResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCarList()) {
      List<DTOCarInfoIndexField> __this__CarList = new ArrayList<DTOCarInfoIndexField>(other.CarList.size());
      for (DTOCarInfoIndexField other_element : other.CarList) {
        __this__CarList.add(other_element);
      }
      this.CarList = __this__CarList;
    }
    if (other.isSetFacet()) {
      List<AggrFieldResult> __this__Facet = new ArrayList<AggrFieldResult>(other.Facet.size());
      for (AggrFieldResult other_element : other.Facet) {
        __this__Facet.add(other_element);
      }
      this.Facet = __this__Facet;
    }
    if (other.isSetQuestionList()) {
      List<DTOQuestionIndexField> __this__QuestionList = new ArrayList<DTOQuestionIndexField>(other.QuestionList.size());
      for (DTOQuestionIndexField other_element : other.QuestionList) {
        __this__QuestionList.add(other_element);
      }
      this.QuestionList = __this__QuestionList;
    }
    this.Count = other.Count;
    if (other.isSetMessage()) {
      this.Message = other.Message;
    }
    if (other.isSetRequestParametersLog()) {
      this.RequestParametersLog = other.RequestParametersLog;
    }
    if (other.isSetStepCount()) {
      List<Integer> __this__StepCount = new ArrayList<Integer>(other.StepCount);
      this.StepCount = __this__StepCount;
    }
    this.TotalElapsedMilliseconds = other.TotalElapsedMilliseconds;
  }

  public SearchResult deepCopy() {
    return new SearchResult(this);
  }

  @Override
  public void clear() {
    this.CarList = null;
    this.Facet = null;
    this.QuestionList = null;
    setCountIsSet(false);
    this.Count = 0;
    this.Message = null;
    this.RequestParametersLog = null;
    this.StepCount = null;
    setTotalElapsedMillisecondsIsSet(false);
    this.TotalElapsedMilliseconds = 0;
  }

  public int getCarListSize() {
    return (this.CarList == null) ? 0 : this.CarList.size();
  }

  public java.util.Iterator<DTOCarInfoIndexField> getCarListIterator() {
    return (this.CarList == null) ? null : this.CarList.iterator();
  }

  public void addToCarList(DTOCarInfoIndexField elem) {
    if (this.CarList == null) {
      this.CarList = new ArrayList<DTOCarInfoIndexField>();
    }
    this.CarList.add(elem);
  }

  public List<DTOCarInfoIndexField> getCarList() {
    return this.CarList;
  }

  public SearchResult setCarList(List<DTOCarInfoIndexField> CarList) {
    this.CarList = CarList;
    return this;
  }

  public void unsetCarList() {
    this.CarList = null;
  }

  /** Returns true if field CarList is set (has been assigned a value) and false otherwise */
  public boolean isSetCarList() {
    return this.CarList != null;
  }

  public void setCarListIsSet(boolean value) {
    if (!value) {
      this.CarList = null;
    }
  }

  public int getFacetSize() {
    return (this.Facet == null) ? 0 : this.Facet.size();
  }

  public java.util.Iterator<AggrFieldResult> getFacetIterator() {
    return (this.Facet == null) ? null : this.Facet.iterator();
  }

  public void addToFacet(AggrFieldResult elem) {
    if (this.Facet == null) {
      this.Facet = new ArrayList<AggrFieldResult>();
    }
    this.Facet.add(elem);
  }

  public List<AggrFieldResult> getFacet() {
    return this.Facet;
  }

  public SearchResult setFacet(List<AggrFieldResult> Facet) {
    this.Facet = Facet;
    return this;
  }

  public void unsetFacet() {
    this.Facet = null;
  }

  /** Returns true if field Facet is set (has been assigned a value) and false otherwise */
  public boolean isSetFacet() {
    return this.Facet != null;
  }

  public void setFacetIsSet(boolean value) {
    if (!value) {
      this.Facet = null;
    }
  }

  public int getQuestionListSize() {
    return (this.QuestionList == null) ? 0 : this.QuestionList.size();
  }

  public java.util.Iterator<DTOQuestionIndexField> getQuestionListIterator() {
    return (this.QuestionList == null) ? null : this.QuestionList.iterator();
  }

  public void addToQuestionList(DTOQuestionIndexField elem) {
    if (this.QuestionList == null) {
      this.QuestionList = new ArrayList<DTOQuestionIndexField>();
    }
    this.QuestionList.add(elem);
  }

  public List<DTOQuestionIndexField> getQuestionList() {
    return this.QuestionList;
  }

  public SearchResult setQuestionList(List<DTOQuestionIndexField> QuestionList) {
    this.QuestionList = QuestionList;
    return this;
  }

  public void unsetQuestionList() {
    this.QuestionList = null;
  }

  /** Returns true if field QuestionList is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionList() {
    return this.QuestionList != null;
  }

  public void setQuestionListIsSet(boolean value) {
    if (!value) {
      this.QuestionList = null;
    }
  }

  public long getCount() {
    return this.Count;
  }

  public SearchResult setCount(long Count) {
    this.Count = Count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field Count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public String getMessage() {
    return this.Message;
  }

  public SearchResult setMessage(String Message) {
    this.Message = Message;
    return this;
  }

  public void unsetMessage() {
    this.Message = null;
  }

  /** Returns true if field Message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.Message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.Message = null;
    }
  }

  public String getRequestParametersLog() {
    return this.RequestParametersLog;
  }

  public SearchResult setRequestParametersLog(String RequestParametersLog) {
    this.RequestParametersLog = RequestParametersLog;
    return this;
  }

  public void unsetRequestParametersLog() {
    this.RequestParametersLog = null;
  }

  /** Returns true if field RequestParametersLog is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestParametersLog() {
    return this.RequestParametersLog != null;
  }

  public void setRequestParametersLogIsSet(boolean value) {
    if (!value) {
      this.RequestParametersLog = null;
    }
  }

  public int getStepCountSize() {
    return (this.StepCount == null) ? 0 : this.StepCount.size();
  }

  public java.util.Iterator<Integer> getStepCountIterator() {
    return (this.StepCount == null) ? null : this.StepCount.iterator();
  }

  public void addToStepCount(int elem) {
    if (this.StepCount == null) {
      this.StepCount = new ArrayList<Integer>();
    }
    this.StepCount.add(elem);
  }

  public List<Integer> getStepCount() {
    return this.StepCount;
  }

  public SearchResult setStepCount(List<Integer> StepCount) {
    this.StepCount = StepCount;
    return this;
  }

  public void unsetStepCount() {
    this.StepCount = null;
  }

  /** Returns true if field StepCount is set (has been assigned a value) and false otherwise */
  public boolean isSetStepCount() {
    return this.StepCount != null;
  }

  public void setStepCountIsSet(boolean value) {
    if (!value) {
      this.StepCount = null;
    }
  }

  public long getTotalElapsedMilliseconds() {
    return this.TotalElapsedMilliseconds;
  }

  public SearchResult setTotalElapsedMilliseconds(long TotalElapsedMilliseconds) {
    this.TotalElapsedMilliseconds = TotalElapsedMilliseconds;
    setTotalElapsedMillisecondsIsSet(true);
    return this;
  }

  public void unsetTotalElapsedMilliseconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALELAPSEDMILLISECONDS_ISSET_ID);
  }

  /** Returns true if field TotalElapsedMilliseconds is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalElapsedMilliseconds() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALELAPSEDMILLISECONDS_ISSET_ID);
  }

  public void setTotalElapsedMillisecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALELAPSEDMILLISECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CAR_LIST:
      if (value == null) {
        unsetCarList();
      } else {
        setCarList((List<DTOCarInfoIndexField>)value);
      }
      break;

    case FACET:
      if (value == null) {
        unsetFacet();
      } else {
        setFacet((List<AggrFieldResult>)value);
      }
      break;

    case QUESTION_LIST:
      if (value == null) {
        unsetQuestionList();
      } else {
        setQuestionList((List<DTOQuestionIndexField>)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((Long)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case REQUEST_PARAMETERS_LOG:
      if (value == null) {
        unsetRequestParametersLog();
      } else {
        setRequestParametersLog((String)value);
      }
      break;

    case STEP_COUNT:
      if (value == null) {
        unsetStepCount();
      } else {
        setStepCount((List<Integer>)value);
      }
      break;

    case TOTAL_ELAPSED_MILLISECONDS:
      if (value == null) {
        unsetTotalElapsedMilliseconds();
      } else {
        setTotalElapsedMilliseconds((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CAR_LIST:
      return getCarList();

    case FACET:
      return getFacet();

    case QUESTION_LIST:
      return getQuestionList();

    case COUNT:
      return getCount();

    case MESSAGE:
      return getMessage();

    case REQUEST_PARAMETERS_LOG:
      return getRequestParametersLog();

    case STEP_COUNT:
      return getStepCount();

    case TOTAL_ELAPSED_MILLISECONDS:
      return getTotalElapsedMilliseconds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CAR_LIST:
      return isSetCarList();
    case FACET:
      return isSetFacet();
    case QUESTION_LIST:
      return isSetQuestionList();
    case COUNT:
      return isSetCount();
    case MESSAGE:
      return isSetMessage();
    case REQUEST_PARAMETERS_LOG:
      return isSetRequestParametersLog();
    case STEP_COUNT:
      return isSetStepCount();
    case TOTAL_ELAPSED_MILLISECONDS:
      return isSetTotalElapsedMilliseconds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResult)
      return this.equals((SearchResult)that);
    return false;
  }

  public boolean equals(SearchResult that) {
    if (that == null)
      return false;

    boolean this_present_CarList = true && this.isSetCarList();
    boolean that_present_CarList = true && that.isSetCarList();
    if (this_present_CarList || that_present_CarList) {
      if (!(this_present_CarList && that_present_CarList))
        return false;
      if (!this.CarList.equals(that.CarList))
        return false;
    }

    boolean this_present_Facet = true && this.isSetFacet();
    boolean that_present_Facet = true && that.isSetFacet();
    if (this_present_Facet || that_present_Facet) {
      if (!(this_present_Facet && that_present_Facet))
        return false;
      if (!this.Facet.equals(that.Facet))
        return false;
    }

    boolean this_present_QuestionList = true && this.isSetQuestionList();
    boolean that_present_QuestionList = true && that.isSetQuestionList();
    if (this_present_QuestionList || that_present_QuestionList) {
      if (!(this_present_QuestionList && that_present_QuestionList))
        return false;
      if (!this.QuestionList.equals(that.QuestionList))
        return false;
    }

    boolean this_present_Count = true;
    boolean that_present_Count = true;
    if (this_present_Count || that_present_Count) {
      if (!(this_present_Count && that_present_Count))
        return false;
      if (this.Count != that.Count)
        return false;
    }

    boolean this_present_Message = true && this.isSetMessage();
    boolean that_present_Message = true && that.isSetMessage();
    if (this_present_Message || that_present_Message) {
      if (!(this_present_Message && that_present_Message))
        return false;
      if (!this.Message.equals(that.Message))
        return false;
    }

    boolean this_present_RequestParametersLog = true && this.isSetRequestParametersLog();
    boolean that_present_RequestParametersLog = true && that.isSetRequestParametersLog();
    if (this_present_RequestParametersLog || that_present_RequestParametersLog) {
      if (!(this_present_RequestParametersLog && that_present_RequestParametersLog))
        return false;
      if (!this.RequestParametersLog.equals(that.RequestParametersLog))
        return false;
    }

    boolean this_present_StepCount = true && this.isSetStepCount();
    boolean that_present_StepCount = true && that.isSetStepCount();
    if (this_present_StepCount || that_present_StepCount) {
      if (!(this_present_StepCount && that_present_StepCount))
        return false;
      if (!this.StepCount.equals(that.StepCount))
        return false;
    }

    boolean this_present_TotalElapsedMilliseconds = true;
    boolean that_present_TotalElapsedMilliseconds = true;
    if (this_present_TotalElapsedMilliseconds || that_present_TotalElapsedMilliseconds) {
      if (!(this_present_TotalElapsedMilliseconds && that_present_TotalElapsedMilliseconds))
        return false;
      if (this.TotalElapsedMilliseconds != that.TotalElapsedMilliseconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_CarList = true && (isSetCarList());
    list.add(present_CarList);
    if (present_CarList)
      list.add(CarList);

    boolean present_Facet = true && (isSetFacet());
    list.add(present_Facet);
    if (present_Facet)
      list.add(Facet);

    boolean present_QuestionList = true && (isSetQuestionList());
    list.add(present_QuestionList);
    if (present_QuestionList)
      list.add(QuestionList);

    boolean present_Count = true;
    list.add(present_Count);
    if (present_Count)
      list.add(Count);

    boolean present_Message = true && (isSetMessage());
    list.add(present_Message);
    if (present_Message)
      list.add(Message);

    boolean present_RequestParametersLog = true && (isSetRequestParametersLog());
    list.add(present_RequestParametersLog);
    if (present_RequestParametersLog)
      list.add(RequestParametersLog);

    boolean present_StepCount = true && (isSetStepCount());
    list.add(present_StepCount);
    if (present_StepCount)
      list.add(StepCount);

    boolean present_TotalElapsedMilliseconds = true;
    list.add(present_TotalElapsedMilliseconds);
    if (present_TotalElapsedMilliseconds)
      list.add(TotalElapsedMilliseconds);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCarList()).compareTo(other.isSetCarList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarList, other.CarList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFacet()).compareTo(other.isSetFacet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFacet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Facet, other.Facet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionList()).compareTo(other.isSetQuestionList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.QuestionList, other.QuestionList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Count, other.Count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Message, other.Message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestParametersLog()).compareTo(other.isSetRequestParametersLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestParametersLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequestParametersLog, other.RequestParametersLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStepCount()).compareTo(other.isSetStepCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStepCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StepCount, other.StepCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalElapsedMilliseconds()).compareTo(other.isSetTotalElapsedMilliseconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalElapsedMilliseconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.TotalElapsedMilliseconds, other.TotalElapsedMilliseconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchResult(");
    boolean first = true;

    sb.append("CarList:");
    if (this.CarList == null) {
      sb.append("null");
    } else {
      sb.append(this.CarList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Facet:");
    if (this.Facet == null) {
      sb.append("null");
    } else {
      sb.append(this.Facet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("QuestionList:");
    if (this.QuestionList == null) {
      sb.append("null");
    } else {
      sb.append(this.QuestionList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Count:");
    sb.append(this.Count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Message:");
    if (this.Message == null) {
      sb.append("null");
    } else {
      sb.append(this.Message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequestParametersLog:");
    if (this.RequestParametersLog == null) {
      sb.append("null");
    } else {
      sb.append(this.RequestParametersLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("StepCount:");
    if (this.StepCount == null) {
      sb.append("null");
    } else {
      sb.append(this.StepCount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("TotalElapsedMilliseconds:");
    sb.append(this.TotalElapsedMilliseconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultStandardSchemeFactory implements SchemeFactory {
    public SearchResultStandardScheme getScheme() {
      return new SearchResultStandardScheme();
    }
  }

  private static class SearchResultStandardScheme extends StandardScheme<SearchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 100: // CAR_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list576 = iprot.readListBegin();
                struct.CarList = new ArrayList<DTOCarInfoIndexField>(_list576.size);
                DTOCarInfoIndexField _elem577;
                for (int _i578 = 0; _i578 < _list576.size; ++_i578)
                {
                  _elem577 = new DTOCarInfoIndexField();
                  _elem577.read(iprot);
                  struct.CarList.add(_elem577);
                }
                iprot.readListEnd();
              }
              struct.setCarListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // FACET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list579 = iprot.readListBegin();
                struct.Facet = new ArrayList<AggrFieldResult>(_list579.size);
                AggrFieldResult _elem580;
                for (int _i581 = 0; _i581 < _list579.size; ++_i581)
                {
                  _elem580 = new AggrFieldResult();
                  _elem580.read(iprot);
                  struct.Facet.add(_elem580);
                }
                iprot.readListEnd();
              }
              struct.setFacetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // QUESTION_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list582 = iprot.readListBegin();
                struct.QuestionList = new ArrayList<DTOQuestionIndexField>(_list582.size);
                DTOQuestionIndexField _elem583;
                for (int _i584 = 0; _i584 < _list582.size; ++_i584)
                {
                  _elem583 = new DTOQuestionIndexField();
                  _elem583.read(iprot);
                  struct.QuestionList.add(_elem583);
                }
                iprot.readListEnd();
              }
              struct.setQuestionListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.Count = iprot.readI64();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_PARAMETERS_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RequestParametersLog = iprot.readString();
              struct.setRequestParametersLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STEP_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list585 = iprot.readListBegin();
                struct.StepCount = new ArrayList<Integer>(_list585.size);
                int _elem586;
                for (int _i587 = 0; _i587 < _list585.size; ++_i587)
                {
                  _elem586 = iprot.readI32();
                  struct.StepCount.add(_elem586);
                }
                iprot.readListEnd();
              }
              struct.setStepCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_ELAPSED_MILLISECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.TotalElapsedMilliseconds = iprot.readI64();
              struct.setTotalElapsedMillisecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI64(struct.Count);
      oprot.writeFieldEnd();
      if (struct.Message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        oprot.writeString(struct.Message);
        oprot.writeFieldEnd();
      }
      if (struct.RequestParametersLog != null) {
        oprot.writeFieldBegin(REQUEST_PARAMETERS_LOG_FIELD_DESC);
        oprot.writeString(struct.RequestParametersLog);
        oprot.writeFieldEnd();
      }
      if (struct.StepCount != null) {
        oprot.writeFieldBegin(STEP_COUNT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.StepCount.size()));
          for (int _iter588 : struct.StepCount)
          {
            oprot.writeI32(_iter588);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_ELAPSED_MILLISECONDS_FIELD_DESC);
      oprot.writeI64(struct.TotalElapsedMilliseconds);
      oprot.writeFieldEnd();
      if (struct.CarList != null) {
        oprot.writeFieldBegin(CAR_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.CarList.size()));
          for (DTOCarInfoIndexField _iter589 : struct.CarList)
          {
            _iter589.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.Facet != null) {
        oprot.writeFieldBegin(FACET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.Facet.size()));
          for (AggrFieldResult _iter590 : struct.Facet)
          {
            _iter590.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.QuestionList != null) {
        oprot.writeFieldBegin(QUESTION_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.QuestionList.size()));
          for (DTOQuestionIndexField _iter591 : struct.QuestionList)
          {
            _iter591.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultTupleSchemeFactory implements SchemeFactory {
    public SearchResultTupleScheme getScheme() {
      return new SearchResultTupleScheme();
    }
  }

  private static class SearchResultTupleScheme extends TupleScheme<SearchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCarList()) {
        optionals.set(0);
      }
      if (struct.isSetFacet()) {
        optionals.set(1);
      }
      if (struct.isSetQuestionList()) {
        optionals.set(2);
      }
      if (struct.isSetCount()) {
        optionals.set(3);
      }
      if (struct.isSetMessage()) {
        optionals.set(4);
      }
      if (struct.isSetRequestParametersLog()) {
        optionals.set(5);
      }
      if (struct.isSetStepCount()) {
        optionals.set(6);
      }
      if (struct.isSetTotalElapsedMilliseconds()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCarList()) {
        {
          oprot.writeI32(struct.CarList.size());
          for (DTOCarInfoIndexField _iter592 : struct.CarList)
          {
            _iter592.write(oprot);
          }
        }
      }
      if (struct.isSetFacet()) {
        {
          oprot.writeI32(struct.Facet.size());
          for (AggrFieldResult _iter593 : struct.Facet)
          {
            _iter593.write(oprot);
          }
        }
      }
      if (struct.isSetQuestionList()) {
        {
          oprot.writeI32(struct.QuestionList.size());
          for (DTOQuestionIndexField _iter594 : struct.QuestionList)
          {
            _iter594.write(oprot);
          }
        }
      }
      if (struct.isSetCount()) {
        oprot.writeI64(struct.Count);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.Message);
      }
      if (struct.isSetRequestParametersLog()) {
        oprot.writeString(struct.RequestParametersLog);
      }
      if (struct.isSetStepCount()) {
        {
          oprot.writeI32(struct.StepCount.size());
          for (int _iter595 : struct.StepCount)
          {
            oprot.writeI32(_iter595);
          }
        }
      }
      if (struct.isSetTotalElapsedMilliseconds()) {
        oprot.writeI64(struct.TotalElapsedMilliseconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResult struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list596 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.CarList = new ArrayList<DTOCarInfoIndexField>(_list596.size);
          DTOCarInfoIndexField _elem597;
          for (int _i598 = 0; _i598 < _list596.size; ++_i598)
          {
            _elem597 = new DTOCarInfoIndexField();
            _elem597.read(iprot);
            struct.CarList.add(_elem597);
          }
        }
        struct.setCarListIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list599 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.Facet = new ArrayList<AggrFieldResult>(_list599.size);
          AggrFieldResult _elem600;
          for (int _i601 = 0; _i601 < _list599.size; ++_i601)
          {
            _elem600 = new AggrFieldResult();
            _elem600.read(iprot);
            struct.Facet.add(_elem600);
          }
        }
        struct.setFacetIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list602 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.QuestionList = new ArrayList<DTOQuestionIndexField>(_list602.size);
          DTOQuestionIndexField _elem603;
          for (int _i604 = 0; _i604 < _list602.size; ++_i604)
          {
            _elem603 = new DTOQuestionIndexField();
            _elem603.read(iprot);
            struct.QuestionList.add(_elem603);
          }
        }
        struct.setQuestionListIsSet(true);
      }
      if (incoming.get(3)) {
        struct.Count = iprot.readI64();
        struct.setCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.Message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.RequestParametersLog = iprot.readString();
        struct.setRequestParametersLogIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list605 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.StepCount = new ArrayList<Integer>(_list605.size);
          int _elem606;
          for (int _i607 = 0; _i607 < _list605.size; ++_i607)
          {
            _elem606 = iprot.readI32();
            struct.StepCount.add(_elem606);
          }
        }
        struct.setStepCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.TotalElapsedMilliseconds = iprot.readI64();
        struct.setTotalElapsedMillisecondsIsSet(true);
      }
    }
  }

}

