/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Taoche.ES;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-06-06")
public class SearchCondition implements org.apache.thrift.TBase<SearchCondition, SearchCondition._Fields>, java.io.Serializable, Cloneable, Comparable<SearchCondition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchCondition");

  private static final org.apache.thrift.protocol.TField COMMON_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("CommonFlag", org.apache.thrift.protocol.TType.I32, (short)101);
  private static final org.apache.thrift.protocol.TField REQUEST_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("RequestSource", org.apache.thrift.protocol.TType.I32, (short)102);
  private static final org.apache.thrift.protocol.TField RETURN_FIELD_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ReturnFieldArray", org.apache.thrift.protocol.TType.LIST, (short)103);
  private static final org.apache.thrift.protocol.TField ORDER_BY_FIELD_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("OrderByFieldArray", org.apache.thrift.protocol.TType.LIST, (short)104);
  private static final org.apache.thrift.protocol.TField ORDER_BY_IS_DESCARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("OrderByIsDESCArray", org.apache.thrift.protocol.TType.LIST, (short)105);
  private static final org.apache.thrift.protocol.TField SORT_BOOST_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("SortBoostFlag", org.apache.thrift.protocol.TType.I32, (short)106);
  private static final org.apache.thrift.protocol.TField PAGE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("PageSize", org.apache.thrift.protocol.TType.I32, (short)107);
  private static final org.apache.thrift.protocol.TField PAGE_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("PageIndex", org.apache.thrift.protocol.TType.I32, (short)108);
  private static final org.apache.thrift.protocol.TField DISTANCE_KM_FIELD_DESC = new org.apache.thrift.protocol.TField("DistanceKm", org.apache.thrift.protocol.TType.DOUBLE, (short)110);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("Location", org.apache.thrift.protocol.TType.STRING, (short)111);
  private static final org.apache.thrift.protocol.TField IS_COUNT_SEARCH_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCountSearch", org.apache.thrift.protocol.TType.BOOL, (short)112);
  private static final org.apache.thrift.protocol.TField REQUEST_PARAMETERS_LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("RequestParametersLog", org.apache.thrift.protocol.TType.STRING, (short)113);
  private static final org.apache.thrift.protocol.TField AGGR_FIELD_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("AggrFieldList", org.apache.thrift.protocol.TType.LIST, (short)114);
  private static final org.apache.thrift.protocol.TField UCAR_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("UcarIdArray", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("SiteId", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField UCAR_STATUS_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("UcarStatusArray", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NO_UCAR_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("NoUcarIdArray", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField IS_AUTHENTICATED_FIELD_DESC = new org.apache.thrift.protocol.TField("IsAuthenticated", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("Source", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField USER_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("UserIdArray", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField NO_USER_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("NoUserIdArray", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField UCAR_SERIAL_NUMBER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("UcarSerialNumberArray", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField KEY_WORD_FIELD_DESC = new org.apache.thrift.protocol.TField("KeyWord", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField COLOR_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ColorArray", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField CAR_SOURCE1_L_FIELD_DESC = new org.apache.thrift.protocol.TField("CarSource1L", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField PICTURE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("PictureCount", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField BIG_AREA_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BigAreaIdArray", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField PROVINCE_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ProvinceIdArray", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField CITY_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CityIdArray", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField NO_CITY_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("NoCityIdArray", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField RELATE_CITY_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("RelateCityArray", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField PRICE_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("PriceLowerArray", org.apache.thrift.protocol.TType.LIST, (short)25);
  private static final org.apache.thrift.protocol.TField PRICE_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("PriceHighArray", org.apache.thrift.protocol.TType.LIST, (short)26);
  private static final org.apache.thrift.protocol.TField CPRICE_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CPriceLowerArray", org.apache.thrift.protocol.TType.LIST, (short)27);
  private static final org.apache.thrift.protocol.TField CPRICE_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CPriceHighArray", org.apache.thrift.protocol.TType.LIST, (short)28);
  private static final org.apache.thrift.protocol.TField B2_BPRICE_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("B2BPriceLowerArray", org.apache.thrift.protocol.TType.LIST, (short)29);
  private static final org.apache.thrift.protocol.TField B2_BPRICE_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("B2BPriceHighArray", org.apache.thrift.protocol.TType.LIST, (short)30);
  private static final org.apache.thrift.protocol.TField CAR_AGE_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarAgeLowerArray", org.apache.thrift.protocol.TType.LIST, (short)31);
  private static final org.apache.thrift.protocol.TField CAR_AGE_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarAgeHighArray", org.apache.thrift.protocol.TType.LIST, (short)32);
  private static final org.apache.thrift.protocol.TField DRIVING_MILEAGE_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("DrivingMileageLowerArray", org.apache.thrift.protocol.TType.LIST, (short)36);
  private static final org.apache.thrift.protocol.TField DRIVING_MILEAGE_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("DrivingMileageHighArray", org.apache.thrift.protocol.TType.LIST, (short)37);
  private static final org.apache.thrift.protocol.TField SUPERIOR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("SuperiorId", org.apache.thrift.protocol.TType.I32, (short)39);
  private static final org.apache.thrift.protocol.TField USER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("UserType", org.apache.thrift.protocol.TType.I32, (short)41);
  private static final org.apache.thrift.protocol.TField IS_NEGLECT_FIELD_DESC = new org.apache.thrift.protocol.TField("IsNeglect", org.apache.thrift.protocol.TType.I32, (short)42);
  private static final org.apache.thrift.protocol.TField IS_VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("IsVideo", org.apache.thrift.protocol.TType.I32, (short)43);
  private static final org.apache.thrift.protocol.TField IS_FIRST_PIC_TRUE_FIELD_DESC = new org.apache.thrift.protocol.TField("IsFirstPicTrue", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField IS_DEALER_RECOMMEND_FIELD_DESC = new org.apache.thrift.protocol.TField("IsDealerRecommend", org.apache.thrift.protocol.TType.I32, (short)45);
  private static final org.apache.thrift.protocol.TField CAR_SOURCE_TYPE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarSourceTypeArray", org.apache.thrift.protocol.TType.LIST, (short)46);
  private static final org.apache.thrift.protocol.TField CAR_TYPE_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("CarTypeConfig", org.apache.thrift.protocol.TType.LIST, (short)50);
  private static final org.apache.thrift.protocol.TField IS_RECOMMEND_GL_FIELD_DESC = new org.apache.thrift.protocol.TField("IsRecommendGL", org.apache.thrift.protocol.TType.I32, (short)51);
  private static final org.apache.thrift.protocol.TField IS_WARRANTY_FIELD_DESC = new org.apache.thrift.protocol.TField("IsWarranty", org.apache.thrift.protocol.TType.I32, (short)52);
  private static final org.apache.thrift.protocol.TField WARRANTY_TYPE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("WarrantyTypeArray", org.apache.thrift.protocol.TType.LIST, (short)53);
  private static final org.apache.thrift.protocol.TField IS_TOP_FIELD_DESC = new org.apache.thrift.protocol.TField("IsTop", org.apache.thrift.protocol.TType.I32, (short)54);
  private static final org.apache.thrift.protocol.TField IS_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("IsActivity", org.apache.thrift.protocol.TType.I32, (short)55);
  private static final org.apache.thrift.protocol.TField IS_BANGMAI_FIELD_DESC = new org.apache.thrift.protocol.TField("IsBangmai", org.apache.thrift.protocol.TType.I32, (short)56);
  private static final org.apache.thrift.protocol.TField IS_BANGMAICHE_FIELD_DESC = new org.apache.thrift.protocol.TField("IsBangmaiche", org.apache.thrift.protocol.TType.I32, (short)57);
  private static final org.apache.thrift.protocol.TField IS_SHOW_MR_FIELD_DESC = new org.apache.thrift.protocol.TField("IsShowMr", org.apache.thrift.protocol.TType.I32, (short)58);
  private static final org.apache.thrift.protocol.TField IS_CAR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCarId", org.apache.thrift.protocol.TType.I32, (short)59);
  private static final org.apache.thrift.protocol.TField IS_B2_B_FIELD_DESC = new org.apache.thrift.protocol.TField("IsB2B", org.apache.thrift.protocol.TType.I32, (short)60);
  private static final org.apache.thrift.protocol.TField CRM_CUSTOMER_ID_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CrmCustomerIdArray", org.apache.thrift.protocol.TType.LIST, (short)61);
  private static final org.apache.thrift.protocol.TField IS_CHECK_REPORT_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("IsCheckReportJson", org.apache.thrift.protocol.TType.I32, (short)62);
  private static final org.apache.thrift.protocol.TField ENVIR_STANDARD_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("EnvirStandardArray", org.apache.thrift.protocol.TType.LIST, (short)201);
  private static final org.apache.thrift.protocol.TField CONSUMPTION_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ConsumptionLowerArray", org.apache.thrift.protocol.TType.LIST, (short)202);
  private static final org.apache.thrift.protocol.TField CONSUMPTION_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ConsumptionHighArray", org.apache.thrift.protocol.TType.LIST, (short)203);
  private static final org.apache.thrift.protocol.TField OIL_TYPE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("OilTypeArray", org.apache.thrift.protocol.TType.LIST, (short)204);
  private static final org.apache.thrift.protocol.TField ENGINE_LOCATION_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("EngineLocationArray", org.apache.thrift.protocol.TType.LIST, (short)205);
  private static final org.apache.thrift.protocol.TField BODY_DOORS_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BodyDoorsLowerArray", org.apache.thrift.protocol.TType.LIST, (short)206);
  private static final org.apache.thrift.protocol.TField BODY_DOORS_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BodyDoorsHighArray", org.apache.thrift.protocol.TType.LIST, (short)207);
  private static final org.apache.thrift.protocol.TField SEAT_NUM_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("SeatNumLowerArray", org.apache.thrift.protocol.TType.LIST, (short)208);
  private static final org.apache.thrift.protocol.TField SEAT_NUM_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("SeatNumHighArray", org.apache.thrift.protocol.TType.LIST, (short)209);
  private static final org.apache.thrift.protocol.TField IS_WAGON_FIELD_DESC = new org.apache.thrift.protocol.TField("IsWagon", org.apache.thrift.protocol.TType.I32, (short)210);
  private static final org.apache.thrift.protocol.TField DRIVE_TYPE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("DriveTypeArray", org.apache.thrift.protocol.TType.LIST, (short)211);
  private static final org.apache.thrift.protocol.TField CS_BODY_FORM_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CsBodyFormArray", org.apache.thrift.protocol.TType.LIST, (short)212);
  private static final org.apache.thrift.protocol.TField CAR_LEVEL_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarLevelArray", org.apache.thrift.protocol.TType.LIST, (short)213);
  private static final org.apache.thrift.protocol.TField CAR_LEVEL_SECOND_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarLevelSecondArray", org.apache.thrift.protocol.TType.LIST, (short)214);
  private static final org.apache.thrift.protocol.TField CAR_YEAR_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarYearArray", org.apache.thrift.protocol.TType.LIST, (short)215);
  private static final org.apache.thrift.protocol.TField MAIN_BRAND_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("MainBrandArray", org.apache.thrift.protocol.TType.LIST, (short)216);
  private static final org.apache.thrift.protocol.TField BRAND_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BrandArray", org.apache.thrift.protocol.TType.LIST, (short)217);
  private static final org.apache.thrift.protocol.TField CAR_SERIAL_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarSerialArray", org.apache.thrift.protocol.TType.LIST, (short)218);
  private static final org.apache.thrift.protocol.TField CAR_IDARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CarIDArray", org.apache.thrift.protocol.TType.LIST, (short)219);
  private static final org.apache.thrift.protocol.TField GEAR_BOX_TYPE_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("GearBoxTypeArray", org.apache.thrift.protocol.TType.LIST, (short)220);
  private static final org.apache.thrift.protocol.TField EXHAUST_LEVEL_LOWER_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ExhaustLevelLowerArray", org.apache.thrift.protocol.TType.LIST, (short)221);
  private static final org.apache.thrift.protocol.TField EXHAUST_LEVEL_HIGH_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ExhaustLevelHighArray", org.apache.thrift.protocol.TType.LIST, (short)222);
  private static final org.apache.thrift.protocol.TField EXHAUST_LEVEL_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("ExhaustLevelArray", org.apache.thrift.protocol.TType.LIST, (short)223);
  private static final org.apache.thrift.protocol.TField COUNTRY_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("CountryArray", org.apache.thrift.protocol.TType.LIST, (short)224);
  private static final org.apache.thrift.protocol.TField BRAND_ATTR_ARRAY_FIELD_DESC = new org.apache.thrift.protocol.TField("BrandAttrArray", org.apache.thrift.protocol.TType.LIST, (short)225);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchConditionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchConditionTupleSchemeFactory());
  }

  public int CommonFlag; // required
  public int RequestSource; // required
  public List<String> ReturnFieldArray; // required
  public List<String> OrderByFieldArray; // required
  public List<Boolean> OrderByIsDESCArray; // required
  public int SortBoostFlag; // required
  public int PageSize; // required
  public int PageIndex; // required
  public double DistanceKm; // required
  public String Location; // required
  public boolean IsCountSearch; // required
  public String RequestParametersLog; // required
  public List<AggrCondition> AggrFieldList; // required
  public List<Integer> UcarIdArray; // required
  public List<Integer> SiteId; // required
  public List<Integer> UcarStatusArray; // required
  public List<Integer> NoUcarIdArray; // required
  public int IsAuthenticated; // required
  public int Source; // required
  public List<Integer> UserIdArray; // required
  public List<Integer> NoUserIdArray; // required
  public List<String> UcarSerialNumberArray; // required
  public String KeyWord; // required
  public List<String> ColorArray; // required
  public int CarSource1L; // required
  public int PictureCount; // required
  public List<Integer> BigAreaIdArray; // required
  public List<Integer> ProvinceIdArray; // required
  public List<Integer> CityIdArray; // required
  public List<Integer> NoCityIdArray; // required
  public List<Integer> RelateCityArray; // required
  public List<Double> PriceLowerArray; // required
  public List<Double> PriceHighArray; // required
  public List<Double> CPriceLowerArray; // required
  public List<Double> CPriceHighArray; // required
  public List<Double> B2BPriceLowerArray; // required
  public List<Double> B2BPriceHighArray; // required
  public List<Integer> CarAgeLowerArray; // required
  public List<Integer> CarAgeHighArray; // required
  public List<Integer> DrivingMileageLowerArray; // required
  public List<Integer> DrivingMileageHighArray; // required
  public int SuperiorId; // required
  public int UserType; // required
  public int IsNeglect; // required
  public int IsVideo; // required
  public int IsFirstPicTrue; // required
  public int IsDealerRecommend; // required
  public List<Integer> CarSourceTypeArray; // required
  public List<Integer> CarTypeConfig; // required
  public int IsRecommendGL; // required
  public int IsWarranty; // required
  public List<Integer> WarrantyTypeArray; // required
  public int IsTop; // required
  public int IsActivity; // required
  public int IsBangmai; // required
  public int IsBangmaiche; // required
  public int IsShowMr; // required
  public int IsCarId; // required
  public int IsB2B; // required
  public List<Integer> CrmCustomerIdArray; // required
  public int IsCheckReportJson; // required
  public List<Integer> EnvirStandardArray; // required
  public List<Double> ConsumptionLowerArray; // required
  public List<Double> ConsumptionHighArray; // required
  public List<Integer> OilTypeArray; // required
  public List<Integer> EngineLocationArray; // required
  public List<Integer> BodyDoorsLowerArray; // required
  public List<Integer> BodyDoorsHighArray; // required
  public List<Integer> SeatNumLowerArray; // required
  public List<Integer> SeatNumHighArray; // required
  public int IsWagon; // required
  public List<Integer> DriveTypeArray; // required
  public List<Integer> CsBodyFormArray; // required
  public List<Integer> CarLevelArray; // required
  public List<Integer> CarLevelSecondArray; // required
  public List<String> CarYearArray; // required
  public List<Integer> MainBrandArray; // required
  public List<Integer> BrandArray; // required
  public List<Integer> CarSerialArray; // required
  public List<Integer> CarIDArray; // required
  public List<Integer> GearBoxTypeArray; // required
  public List<Double> ExhaustLevelLowerArray; // required
  public List<Double> ExhaustLevelHighArray; // required
  public List<Integer> ExhaustLevelArray; // required
  public List<Integer> CountryArray; // required
  public List<Integer> BrandAttrArray; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMON_FLAG((short)101, "CommonFlag"),
    REQUEST_SOURCE((short)102, "RequestSource"),
    RETURN_FIELD_ARRAY((short)103, "ReturnFieldArray"),
    ORDER_BY_FIELD_ARRAY((short)104, "OrderByFieldArray"),
    ORDER_BY_IS_DESCARRAY((short)105, "OrderByIsDESCArray"),
    SORT_BOOST_FLAG((short)106, "SortBoostFlag"),
    PAGE_SIZE((short)107, "PageSize"),
    PAGE_INDEX((short)108, "PageIndex"),
    DISTANCE_KM((short)110, "DistanceKm"),
    LOCATION((short)111, "Location"),
    IS_COUNT_SEARCH((short)112, "IsCountSearch"),
    REQUEST_PARAMETERS_LOG((short)113, "RequestParametersLog"),
    AGGR_FIELD_LIST((short)114, "AggrFieldList"),
    UCAR_ID_ARRAY((short)1, "UcarIdArray"),
    SITE_ID((short)2, "SiteId"),
    UCAR_STATUS_ARRAY((short)3, "UcarStatusArray"),
    NO_UCAR_ID_ARRAY((short)4, "NoUcarIdArray"),
    IS_AUTHENTICATED((short)5, "IsAuthenticated"),
    SOURCE((short)6, "Source"),
    USER_ID_ARRAY((short)8, "UserIdArray"),
    NO_USER_ID_ARRAY((short)9, "NoUserIdArray"),
    UCAR_SERIAL_NUMBER_ARRAY((short)10, "UcarSerialNumberArray"),
    KEY_WORD((short)11, "KeyWord"),
    COLOR_ARRAY((short)17, "ColorArray"),
    CAR_SOURCE1_L((short)18, "CarSource1L"),
    PICTURE_COUNT((short)19, "PictureCount"),
    BIG_AREA_ID_ARRAY((short)20, "BigAreaIdArray"),
    PROVINCE_ID_ARRAY((short)21, "ProvinceIdArray"),
    CITY_ID_ARRAY((short)22, "CityIdArray"),
    NO_CITY_ID_ARRAY((short)23, "NoCityIdArray"),
    RELATE_CITY_ARRAY((short)24, "RelateCityArray"),
    PRICE_LOWER_ARRAY((short)25, "PriceLowerArray"),
    PRICE_HIGH_ARRAY((short)26, "PriceHighArray"),
    CPRICE_LOWER_ARRAY((short)27, "CPriceLowerArray"),
    CPRICE_HIGH_ARRAY((short)28, "CPriceHighArray"),
    B2_BPRICE_LOWER_ARRAY((short)29, "B2BPriceLowerArray"),
    B2_BPRICE_HIGH_ARRAY((short)30, "B2BPriceHighArray"),
    CAR_AGE_LOWER_ARRAY((short)31, "CarAgeLowerArray"),
    CAR_AGE_HIGH_ARRAY((short)32, "CarAgeHighArray"),
    DRIVING_MILEAGE_LOWER_ARRAY((short)36, "DrivingMileageLowerArray"),
    DRIVING_MILEAGE_HIGH_ARRAY((short)37, "DrivingMileageHighArray"),
    SUPERIOR_ID((short)39, "SuperiorId"),
    USER_TYPE((short)41, "UserType"),
    IS_NEGLECT((short)42, "IsNeglect"),
    IS_VIDEO((short)43, "IsVideo"),
    IS_FIRST_PIC_TRUE((short)44, "IsFirstPicTrue"),
    IS_DEALER_RECOMMEND((short)45, "IsDealerRecommend"),
    CAR_SOURCE_TYPE_ARRAY((short)46, "CarSourceTypeArray"),
    CAR_TYPE_CONFIG((short)50, "CarTypeConfig"),
    IS_RECOMMEND_GL((short)51, "IsRecommendGL"),
    IS_WARRANTY((short)52, "IsWarranty"),
    WARRANTY_TYPE_ARRAY((short)53, "WarrantyTypeArray"),
    IS_TOP((short)54, "IsTop"),
    IS_ACTIVITY((short)55, "IsActivity"),
    IS_BANGMAI((short)56, "IsBangmai"),
    IS_BANGMAICHE((short)57, "IsBangmaiche"),
    IS_SHOW_MR((short)58, "IsShowMr"),
    IS_CAR_ID((short)59, "IsCarId"),
    IS_B2_B((short)60, "IsB2B"),
    CRM_CUSTOMER_ID_ARRAY((short)61, "CrmCustomerIdArray"),
    IS_CHECK_REPORT_JSON((short)62, "IsCheckReportJson"),
    ENVIR_STANDARD_ARRAY((short)201, "EnvirStandardArray"),
    CONSUMPTION_LOWER_ARRAY((short)202, "ConsumptionLowerArray"),
    CONSUMPTION_HIGH_ARRAY((short)203, "ConsumptionHighArray"),
    OIL_TYPE_ARRAY((short)204, "OilTypeArray"),
    ENGINE_LOCATION_ARRAY((short)205, "EngineLocationArray"),
    BODY_DOORS_LOWER_ARRAY((short)206, "BodyDoorsLowerArray"),
    BODY_DOORS_HIGH_ARRAY((short)207, "BodyDoorsHighArray"),
    SEAT_NUM_LOWER_ARRAY((short)208, "SeatNumLowerArray"),
    SEAT_NUM_HIGH_ARRAY((short)209, "SeatNumHighArray"),
    IS_WAGON((short)210, "IsWagon"),
    DRIVE_TYPE_ARRAY((short)211, "DriveTypeArray"),
    CS_BODY_FORM_ARRAY((short)212, "CsBodyFormArray"),
    CAR_LEVEL_ARRAY((short)213, "CarLevelArray"),
    CAR_LEVEL_SECOND_ARRAY((short)214, "CarLevelSecondArray"),
    CAR_YEAR_ARRAY((short)215, "CarYearArray"),
    MAIN_BRAND_ARRAY((short)216, "MainBrandArray"),
    BRAND_ARRAY((short)217, "BrandArray"),
    CAR_SERIAL_ARRAY((short)218, "CarSerialArray"),
    CAR_IDARRAY((short)219, "CarIDArray"),
    GEAR_BOX_TYPE_ARRAY((short)220, "GearBoxTypeArray"),
    EXHAUST_LEVEL_LOWER_ARRAY((short)221, "ExhaustLevelLowerArray"),
    EXHAUST_LEVEL_HIGH_ARRAY((short)222, "ExhaustLevelHighArray"),
    EXHAUST_LEVEL_ARRAY((short)223, "ExhaustLevelArray"),
    COUNTRY_ARRAY((short)224, "CountryArray"),
    BRAND_ATTR_ARRAY((short)225, "BrandAttrArray");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 101: // COMMON_FLAG
          return COMMON_FLAG;
        case 102: // REQUEST_SOURCE
          return REQUEST_SOURCE;
        case 103: // RETURN_FIELD_ARRAY
          return RETURN_FIELD_ARRAY;
        case 104: // ORDER_BY_FIELD_ARRAY
          return ORDER_BY_FIELD_ARRAY;
        case 105: // ORDER_BY_IS_DESCARRAY
          return ORDER_BY_IS_DESCARRAY;
        case 106: // SORT_BOOST_FLAG
          return SORT_BOOST_FLAG;
        case 107: // PAGE_SIZE
          return PAGE_SIZE;
        case 108: // PAGE_INDEX
          return PAGE_INDEX;
        case 110: // DISTANCE_KM
          return DISTANCE_KM;
        case 111: // LOCATION
          return LOCATION;
        case 112: // IS_COUNT_SEARCH
          return IS_COUNT_SEARCH;
        case 113: // REQUEST_PARAMETERS_LOG
          return REQUEST_PARAMETERS_LOG;
        case 114: // AGGR_FIELD_LIST
          return AGGR_FIELD_LIST;
        case 1: // UCAR_ID_ARRAY
          return UCAR_ID_ARRAY;
        case 2: // SITE_ID
          return SITE_ID;
        case 3: // UCAR_STATUS_ARRAY
          return UCAR_STATUS_ARRAY;
        case 4: // NO_UCAR_ID_ARRAY
          return NO_UCAR_ID_ARRAY;
        case 5: // IS_AUTHENTICATED
          return IS_AUTHENTICATED;
        case 6: // SOURCE
          return SOURCE;
        case 8: // USER_ID_ARRAY
          return USER_ID_ARRAY;
        case 9: // NO_USER_ID_ARRAY
          return NO_USER_ID_ARRAY;
        case 10: // UCAR_SERIAL_NUMBER_ARRAY
          return UCAR_SERIAL_NUMBER_ARRAY;
        case 11: // KEY_WORD
          return KEY_WORD;
        case 17: // COLOR_ARRAY
          return COLOR_ARRAY;
        case 18: // CAR_SOURCE1_L
          return CAR_SOURCE1_L;
        case 19: // PICTURE_COUNT
          return PICTURE_COUNT;
        case 20: // BIG_AREA_ID_ARRAY
          return BIG_AREA_ID_ARRAY;
        case 21: // PROVINCE_ID_ARRAY
          return PROVINCE_ID_ARRAY;
        case 22: // CITY_ID_ARRAY
          return CITY_ID_ARRAY;
        case 23: // NO_CITY_ID_ARRAY
          return NO_CITY_ID_ARRAY;
        case 24: // RELATE_CITY_ARRAY
          return RELATE_CITY_ARRAY;
        case 25: // PRICE_LOWER_ARRAY
          return PRICE_LOWER_ARRAY;
        case 26: // PRICE_HIGH_ARRAY
          return PRICE_HIGH_ARRAY;
        case 27: // CPRICE_LOWER_ARRAY
          return CPRICE_LOWER_ARRAY;
        case 28: // CPRICE_HIGH_ARRAY
          return CPRICE_HIGH_ARRAY;
        case 29: // B2_BPRICE_LOWER_ARRAY
          return B2_BPRICE_LOWER_ARRAY;
        case 30: // B2_BPRICE_HIGH_ARRAY
          return B2_BPRICE_HIGH_ARRAY;
        case 31: // CAR_AGE_LOWER_ARRAY
          return CAR_AGE_LOWER_ARRAY;
        case 32: // CAR_AGE_HIGH_ARRAY
          return CAR_AGE_HIGH_ARRAY;
        case 36: // DRIVING_MILEAGE_LOWER_ARRAY
          return DRIVING_MILEAGE_LOWER_ARRAY;
        case 37: // DRIVING_MILEAGE_HIGH_ARRAY
          return DRIVING_MILEAGE_HIGH_ARRAY;
        case 39: // SUPERIOR_ID
          return SUPERIOR_ID;
        case 41: // USER_TYPE
          return USER_TYPE;
        case 42: // IS_NEGLECT
          return IS_NEGLECT;
        case 43: // IS_VIDEO
          return IS_VIDEO;
        case 44: // IS_FIRST_PIC_TRUE
          return IS_FIRST_PIC_TRUE;
        case 45: // IS_DEALER_RECOMMEND
          return IS_DEALER_RECOMMEND;
        case 46: // CAR_SOURCE_TYPE_ARRAY
          return CAR_SOURCE_TYPE_ARRAY;
        case 50: // CAR_TYPE_CONFIG
          return CAR_TYPE_CONFIG;
        case 51: // IS_RECOMMEND_GL
          return IS_RECOMMEND_GL;
        case 52: // IS_WARRANTY
          return IS_WARRANTY;
        case 53: // WARRANTY_TYPE_ARRAY
          return WARRANTY_TYPE_ARRAY;
        case 54: // IS_TOP
          return IS_TOP;
        case 55: // IS_ACTIVITY
          return IS_ACTIVITY;
        case 56: // IS_BANGMAI
          return IS_BANGMAI;
        case 57: // IS_BANGMAICHE
          return IS_BANGMAICHE;
        case 58: // IS_SHOW_MR
          return IS_SHOW_MR;
        case 59: // IS_CAR_ID
          return IS_CAR_ID;
        case 60: // IS_B2_B
          return IS_B2_B;
        case 61: // CRM_CUSTOMER_ID_ARRAY
          return CRM_CUSTOMER_ID_ARRAY;
        case 62: // IS_CHECK_REPORT_JSON
          return IS_CHECK_REPORT_JSON;
        case 201: // ENVIR_STANDARD_ARRAY
          return ENVIR_STANDARD_ARRAY;
        case 202: // CONSUMPTION_LOWER_ARRAY
          return CONSUMPTION_LOWER_ARRAY;
        case 203: // CONSUMPTION_HIGH_ARRAY
          return CONSUMPTION_HIGH_ARRAY;
        case 204: // OIL_TYPE_ARRAY
          return OIL_TYPE_ARRAY;
        case 205: // ENGINE_LOCATION_ARRAY
          return ENGINE_LOCATION_ARRAY;
        case 206: // BODY_DOORS_LOWER_ARRAY
          return BODY_DOORS_LOWER_ARRAY;
        case 207: // BODY_DOORS_HIGH_ARRAY
          return BODY_DOORS_HIGH_ARRAY;
        case 208: // SEAT_NUM_LOWER_ARRAY
          return SEAT_NUM_LOWER_ARRAY;
        case 209: // SEAT_NUM_HIGH_ARRAY
          return SEAT_NUM_HIGH_ARRAY;
        case 210: // IS_WAGON
          return IS_WAGON;
        case 211: // DRIVE_TYPE_ARRAY
          return DRIVE_TYPE_ARRAY;
        case 212: // CS_BODY_FORM_ARRAY
          return CS_BODY_FORM_ARRAY;
        case 213: // CAR_LEVEL_ARRAY
          return CAR_LEVEL_ARRAY;
        case 214: // CAR_LEVEL_SECOND_ARRAY
          return CAR_LEVEL_SECOND_ARRAY;
        case 215: // CAR_YEAR_ARRAY
          return CAR_YEAR_ARRAY;
        case 216: // MAIN_BRAND_ARRAY
          return MAIN_BRAND_ARRAY;
        case 217: // BRAND_ARRAY
          return BRAND_ARRAY;
        case 218: // CAR_SERIAL_ARRAY
          return CAR_SERIAL_ARRAY;
        case 219: // CAR_IDARRAY
          return CAR_IDARRAY;
        case 220: // GEAR_BOX_TYPE_ARRAY
          return GEAR_BOX_TYPE_ARRAY;
        case 221: // EXHAUST_LEVEL_LOWER_ARRAY
          return EXHAUST_LEVEL_LOWER_ARRAY;
        case 222: // EXHAUST_LEVEL_HIGH_ARRAY
          return EXHAUST_LEVEL_HIGH_ARRAY;
        case 223: // EXHAUST_LEVEL_ARRAY
          return EXHAUST_LEVEL_ARRAY;
        case 224: // COUNTRY_ARRAY
          return COUNTRY_ARRAY;
        case 225: // BRAND_ATTR_ARRAY
          return BRAND_ATTR_ARRAY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMMONFLAG_ISSET_ID = 0;
  private static final int __REQUESTSOURCE_ISSET_ID = 1;
  private static final int __SORTBOOSTFLAG_ISSET_ID = 2;
  private static final int __PAGESIZE_ISSET_ID = 3;
  private static final int __PAGEINDEX_ISSET_ID = 4;
  private static final int __DISTANCEKM_ISSET_ID = 5;
  private static final int __ISCOUNTSEARCH_ISSET_ID = 6;
  private static final int __ISAUTHENTICATED_ISSET_ID = 7;
  private static final int __SOURCE_ISSET_ID = 8;
  private static final int __CARSOURCE1L_ISSET_ID = 9;
  private static final int __PICTURECOUNT_ISSET_ID = 10;
  private static final int __SUPERIORID_ISSET_ID = 11;
  private static final int __USERTYPE_ISSET_ID = 12;
  private static final int __ISNEGLECT_ISSET_ID = 13;
  private static final int __ISVIDEO_ISSET_ID = 14;
  private static final int __ISFIRSTPICTRUE_ISSET_ID = 15;
  private static final int __ISDEALERRECOMMEND_ISSET_ID = 16;
  private static final int __ISRECOMMENDGL_ISSET_ID = 17;
  private static final int __ISWARRANTY_ISSET_ID = 18;
  private static final int __ISTOP_ISSET_ID = 19;
  private static final int __ISACTIVITY_ISSET_ID = 20;
  private static final int __ISBANGMAI_ISSET_ID = 21;
  private static final int __ISBANGMAICHE_ISSET_ID = 22;
  private static final int __ISSHOWMR_ISSET_ID = 23;
  private static final int __ISCARID_ISSET_ID = 24;
  private static final int __ISB2B_ISSET_ID = 25;
  private static final int __ISCHECKREPORTJSON_ISSET_ID = 26;
  private static final int __ISWAGON_ISSET_ID = 27;
  private int __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMON_FLAG, new org.apache.thrift.meta_data.FieldMetaData("CommonFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REQUEST_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("RequestSource", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_FIELD_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ReturnFieldArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ORDER_BY_FIELD_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("OrderByFieldArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ORDER_BY_IS_DESCARRAY, new org.apache.thrift.meta_data.FieldMetaData("OrderByIsDESCArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.SORT_BOOST_FLAG, new org.apache.thrift.meta_data.FieldMetaData("SortBoostFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("PageSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PAGE_INDEX, new org.apache.thrift.meta_data.FieldMetaData("PageIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISTANCE_KM, new org.apache.thrift.meta_data.FieldMetaData("DistanceKm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("Location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_COUNT_SEARCH, new org.apache.thrift.meta_data.FieldMetaData("IsCountSearch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REQUEST_PARAMETERS_LOG, new org.apache.thrift.meta_data.FieldMetaData("RequestParametersLog", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGGR_FIELD_LIST, new org.apache.thrift.meta_data.FieldMetaData("AggrFieldList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "AggrCondition"))));
    tmpMap.put(_Fields.UCAR_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("UcarIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("SiteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UCAR_STATUS_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("UcarStatusArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NO_UCAR_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("NoUcarIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_AUTHENTICATED, new org.apache.thrift.meta_data.FieldMetaData("IsAuthenticated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("Source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("UserIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NO_USER_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("NoUserIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.UCAR_SERIAL_NUMBER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("UcarSerialNumberArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KEY_WORD, new org.apache.thrift.meta_data.FieldMetaData("KeyWord", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLOR_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ColorArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CAR_SOURCE1_L, new org.apache.thrift.meta_data.FieldMetaData("CarSource1L", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PICTURE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("PictureCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BIG_AREA_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("BigAreaIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PROVINCE_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ProvinceIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CITY_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CityIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NO_CITY_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("NoCityIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RELATE_CITY_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("RelateCityArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRICE_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("PriceLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.PRICE_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("PriceHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CPRICE_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CPriceLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CPRICE_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CPriceHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.B2_BPRICE_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("B2BPriceLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.B2_BPRICE_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("B2BPriceHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CAR_AGE_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarAgeLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_AGE_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarAgeHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DRIVING_MILEAGE_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("DrivingMileageLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DRIVING_MILEAGE_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("DrivingMileageHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SUPERIOR_ID, new org.apache.thrift.meta_data.FieldMetaData("SuperiorId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("UserType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_NEGLECT, new org.apache.thrift.meta_data.FieldMetaData("IsNeglect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_VIDEO, new org.apache.thrift.meta_data.FieldMetaData("IsVideo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FIRST_PIC_TRUE, new org.apache.thrift.meta_data.FieldMetaData("IsFirstPicTrue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_DEALER_RECOMMEND, new org.apache.thrift.meta_data.FieldMetaData("IsDealerRecommend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_SOURCE_TYPE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarSourceTypeArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_TYPE_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("CarTypeConfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_RECOMMEND_GL, new org.apache.thrift.meta_data.FieldMetaData("IsRecommendGL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_WARRANTY, new org.apache.thrift.meta_data.FieldMetaData("IsWarranty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WARRANTY_TYPE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("WarrantyTypeArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_TOP, new org.apache.thrift.meta_data.FieldMetaData("IsTop", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("IsActivity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_BANGMAI, new org.apache.thrift.meta_data.FieldMetaData("IsBangmai", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_BANGMAICHE, new org.apache.thrift.meta_data.FieldMetaData("IsBangmaiche", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SHOW_MR, new org.apache.thrift.meta_data.FieldMetaData("IsShowMr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_CAR_ID, new org.apache.thrift.meta_data.FieldMetaData("IsCarId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_B2_B, new org.apache.thrift.meta_data.FieldMetaData("IsB2B", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRM_CUSTOMER_ID_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CrmCustomerIdArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_CHECK_REPORT_JSON, new org.apache.thrift.meta_data.FieldMetaData("IsCheckReportJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENVIR_STANDARD_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("EnvirStandardArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CONSUMPTION_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ConsumptionLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CONSUMPTION_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ConsumptionHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.OIL_TYPE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("OilTypeArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ENGINE_LOCATION_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("EngineLocationArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BODY_DOORS_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("BodyDoorsLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BODY_DOORS_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("BodyDoorsHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SEAT_NUM_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("SeatNumLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SEAT_NUM_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("SeatNumHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.IS_WAGON, new org.apache.thrift.meta_data.FieldMetaData("IsWagon", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DRIVE_TYPE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("DriveTypeArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CS_BODY_FORM_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CsBodyFormArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_LEVEL_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarLevelArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_LEVEL_SECOND_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarLevelSecondArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_YEAR_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarYearArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAIN_BRAND_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("MainBrandArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BRAND_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("BrandArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_SERIAL_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarSerialArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CAR_IDARRAY, new org.apache.thrift.meta_data.FieldMetaData("CarIDArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.GEAR_BOX_TYPE_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("GearBoxTypeArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXHAUST_LEVEL_LOWER_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ExhaustLevelLowerArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.EXHAUST_LEVEL_HIGH_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ExhaustLevelHighArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.EXHAUST_LEVEL_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("ExhaustLevelArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COUNTRY_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("CountryArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BRAND_ATTR_ARRAY, new org.apache.thrift.meta_data.FieldMetaData("BrandAttrArray", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchCondition.class, metaDataMap);
  }

  public SearchCondition() {
  }

  public SearchCondition(
    int CommonFlag,
    int RequestSource,
    List<String> ReturnFieldArray,
    List<String> OrderByFieldArray,
    List<Boolean> OrderByIsDESCArray,
    int SortBoostFlag,
    int PageSize,
    int PageIndex,
    double DistanceKm,
    String Location,
    boolean IsCountSearch,
    String RequestParametersLog,
    List<AggrCondition> AggrFieldList,
    List<Integer> UcarIdArray,
    List<Integer> SiteId,
    List<Integer> UcarStatusArray,
    List<Integer> NoUcarIdArray,
    int IsAuthenticated,
    int Source,
    List<Integer> UserIdArray,
    List<Integer> NoUserIdArray,
    List<String> UcarSerialNumberArray,
    String KeyWord,
    List<String> ColorArray,
    int CarSource1L,
    int PictureCount,
    List<Integer> BigAreaIdArray,
    List<Integer> ProvinceIdArray,
    List<Integer> CityIdArray,
    List<Integer> NoCityIdArray,
    List<Integer> RelateCityArray,
    List<Double> PriceLowerArray,
    List<Double> PriceHighArray,
    List<Double> CPriceLowerArray,
    List<Double> CPriceHighArray,
    List<Double> B2BPriceLowerArray,
    List<Double> B2BPriceHighArray,
    List<Integer> CarAgeLowerArray,
    List<Integer> CarAgeHighArray,
    List<Integer> DrivingMileageLowerArray,
    List<Integer> DrivingMileageHighArray,
    int SuperiorId,
    int UserType,
    int IsNeglect,
    int IsVideo,
    int IsFirstPicTrue,
    int IsDealerRecommend,
    List<Integer> CarSourceTypeArray,
    List<Integer> CarTypeConfig,
    int IsRecommendGL,
    int IsWarranty,
    List<Integer> WarrantyTypeArray,
    int IsTop,
    int IsActivity,
    int IsBangmai,
    int IsBangmaiche,
    int IsShowMr,
    int IsCarId,
    int IsB2B,
    List<Integer> CrmCustomerIdArray,
    int IsCheckReportJson,
    List<Integer> EnvirStandardArray,
    List<Double> ConsumptionLowerArray,
    List<Double> ConsumptionHighArray,
    List<Integer> OilTypeArray,
    List<Integer> EngineLocationArray,
    List<Integer> BodyDoorsLowerArray,
    List<Integer> BodyDoorsHighArray,
    List<Integer> SeatNumLowerArray,
    List<Integer> SeatNumHighArray,
    int IsWagon,
    List<Integer> DriveTypeArray,
    List<Integer> CsBodyFormArray,
    List<Integer> CarLevelArray,
    List<Integer> CarLevelSecondArray,
    List<String> CarYearArray,
    List<Integer> MainBrandArray,
    List<Integer> BrandArray,
    List<Integer> CarSerialArray,
    List<Integer> CarIDArray,
    List<Integer> GearBoxTypeArray,
    List<Double> ExhaustLevelLowerArray,
    List<Double> ExhaustLevelHighArray,
    List<Integer> ExhaustLevelArray,
    List<Integer> CountryArray,
    List<Integer> BrandAttrArray)
  {
    this();
    this.CommonFlag = CommonFlag;
    setCommonFlagIsSet(true);
    this.RequestSource = RequestSource;
    setRequestSourceIsSet(true);
    this.ReturnFieldArray = ReturnFieldArray;
    this.OrderByFieldArray = OrderByFieldArray;
    this.OrderByIsDESCArray = OrderByIsDESCArray;
    this.SortBoostFlag = SortBoostFlag;
    setSortBoostFlagIsSet(true);
    this.PageSize = PageSize;
    setPageSizeIsSet(true);
    this.PageIndex = PageIndex;
    setPageIndexIsSet(true);
    this.DistanceKm = DistanceKm;
    setDistanceKmIsSet(true);
    this.Location = Location;
    this.IsCountSearch = IsCountSearch;
    setIsCountSearchIsSet(true);
    this.RequestParametersLog = RequestParametersLog;
    this.AggrFieldList = AggrFieldList;
    this.UcarIdArray = UcarIdArray;
    this.SiteId = SiteId;
    this.UcarStatusArray = UcarStatusArray;
    this.NoUcarIdArray = NoUcarIdArray;
    this.IsAuthenticated = IsAuthenticated;
    setIsAuthenticatedIsSet(true);
    this.Source = Source;
    setSourceIsSet(true);
    this.UserIdArray = UserIdArray;
    this.NoUserIdArray = NoUserIdArray;
    this.UcarSerialNumberArray = UcarSerialNumberArray;
    this.KeyWord = KeyWord;
    this.ColorArray = ColorArray;
    this.CarSource1L = CarSource1L;
    setCarSource1LIsSet(true);
    this.PictureCount = PictureCount;
    setPictureCountIsSet(true);
    this.BigAreaIdArray = BigAreaIdArray;
    this.ProvinceIdArray = ProvinceIdArray;
    this.CityIdArray = CityIdArray;
    this.NoCityIdArray = NoCityIdArray;
    this.RelateCityArray = RelateCityArray;
    this.PriceLowerArray = PriceLowerArray;
    this.PriceHighArray = PriceHighArray;
    this.CPriceLowerArray = CPriceLowerArray;
    this.CPriceHighArray = CPriceHighArray;
    this.B2BPriceLowerArray = B2BPriceLowerArray;
    this.B2BPriceHighArray = B2BPriceHighArray;
    this.CarAgeLowerArray = CarAgeLowerArray;
    this.CarAgeHighArray = CarAgeHighArray;
    this.DrivingMileageLowerArray = DrivingMileageLowerArray;
    this.DrivingMileageHighArray = DrivingMileageHighArray;
    this.SuperiorId = SuperiorId;
    setSuperiorIdIsSet(true);
    this.UserType = UserType;
    setUserTypeIsSet(true);
    this.IsNeglect = IsNeglect;
    setIsNeglectIsSet(true);
    this.IsVideo = IsVideo;
    setIsVideoIsSet(true);
    this.IsFirstPicTrue = IsFirstPicTrue;
    setIsFirstPicTrueIsSet(true);
    this.IsDealerRecommend = IsDealerRecommend;
    setIsDealerRecommendIsSet(true);
    this.CarSourceTypeArray = CarSourceTypeArray;
    this.CarTypeConfig = CarTypeConfig;
    this.IsRecommendGL = IsRecommendGL;
    setIsRecommendGLIsSet(true);
    this.IsWarranty = IsWarranty;
    setIsWarrantyIsSet(true);
    this.WarrantyTypeArray = WarrantyTypeArray;
    this.IsTop = IsTop;
    setIsTopIsSet(true);
    this.IsActivity = IsActivity;
    setIsActivityIsSet(true);
    this.IsBangmai = IsBangmai;
    setIsBangmaiIsSet(true);
    this.IsBangmaiche = IsBangmaiche;
    setIsBangmaicheIsSet(true);
    this.IsShowMr = IsShowMr;
    setIsShowMrIsSet(true);
    this.IsCarId = IsCarId;
    setIsCarIdIsSet(true);
    this.IsB2B = IsB2B;
    setIsB2BIsSet(true);
    this.CrmCustomerIdArray = CrmCustomerIdArray;
    this.IsCheckReportJson = IsCheckReportJson;
    setIsCheckReportJsonIsSet(true);
    this.EnvirStandardArray = EnvirStandardArray;
    this.ConsumptionLowerArray = ConsumptionLowerArray;
    this.ConsumptionHighArray = ConsumptionHighArray;
    this.OilTypeArray = OilTypeArray;
    this.EngineLocationArray = EngineLocationArray;
    this.BodyDoorsLowerArray = BodyDoorsLowerArray;
    this.BodyDoorsHighArray = BodyDoorsHighArray;
    this.SeatNumLowerArray = SeatNumLowerArray;
    this.SeatNumHighArray = SeatNumHighArray;
    this.IsWagon = IsWagon;
    setIsWagonIsSet(true);
    this.DriveTypeArray = DriveTypeArray;
    this.CsBodyFormArray = CsBodyFormArray;
    this.CarLevelArray = CarLevelArray;
    this.CarLevelSecondArray = CarLevelSecondArray;
    this.CarYearArray = CarYearArray;
    this.MainBrandArray = MainBrandArray;
    this.BrandArray = BrandArray;
    this.CarSerialArray = CarSerialArray;
    this.CarIDArray = CarIDArray;
    this.GearBoxTypeArray = GearBoxTypeArray;
    this.ExhaustLevelLowerArray = ExhaustLevelLowerArray;
    this.ExhaustLevelHighArray = ExhaustLevelHighArray;
    this.ExhaustLevelArray = ExhaustLevelArray;
    this.CountryArray = CountryArray;
    this.BrandAttrArray = BrandAttrArray;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchCondition(SearchCondition other) {
    __isset_bitfield = other.__isset_bitfield;
    this.CommonFlag = other.CommonFlag;
    this.RequestSource = other.RequestSource;
    if (other.isSetReturnFieldArray()) {
      List<String> __this__ReturnFieldArray = new ArrayList<String>(other.ReturnFieldArray);
      this.ReturnFieldArray = __this__ReturnFieldArray;
    }
    if (other.isSetOrderByFieldArray()) {
      List<String> __this__OrderByFieldArray = new ArrayList<String>(other.OrderByFieldArray);
      this.OrderByFieldArray = __this__OrderByFieldArray;
    }
    if (other.isSetOrderByIsDESCArray()) {
      List<Boolean> __this__OrderByIsDESCArray = new ArrayList<Boolean>(other.OrderByIsDESCArray);
      this.OrderByIsDESCArray = __this__OrderByIsDESCArray;
    }
    this.SortBoostFlag = other.SortBoostFlag;
    this.PageSize = other.PageSize;
    this.PageIndex = other.PageIndex;
    this.DistanceKm = other.DistanceKm;
    if (other.isSetLocation()) {
      this.Location = other.Location;
    }
    this.IsCountSearch = other.IsCountSearch;
    if (other.isSetRequestParametersLog()) {
      this.RequestParametersLog = other.RequestParametersLog;
    }
    if (other.isSetAggrFieldList()) {
      List<AggrCondition> __this__AggrFieldList = new ArrayList<AggrCondition>(other.AggrFieldList.size());
      for (AggrCondition other_element : other.AggrFieldList) {
        __this__AggrFieldList.add(other_element);
      }
      this.AggrFieldList = __this__AggrFieldList;
    }
    if (other.isSetUcarIdArray()) {
      List<Integer> __this__UcarIdArray = new ArrayList<Integer>(other.UcarIdArray);
      this.UcarIdArray = __this__UcarIdArray;
    }
    if (other.isSetSiteId()) {
      List<Integer> __this__SiteId = new ArrayList<Integer>(other.SiteId);
      this.SiteId = __this__SiteId;
    }
    if (other.isSetUcarStatusArray()) {
      List<Integer> __this__UcarStatusArray = new ArrayList<Integer>(other.UcarStatusArray);
      this.UcarStatusArray = __this__UcarStatusArray;
    }
    if (other.isSetNoUcarIdArray()) {
      List<Integer> __this__NoUcarIdArray = new ArrayList<Integer>(other.NoUcarIdArray);
      this.NoUcarIdArray = __this__NoUcarIdArray;
    }
    this.IsAuthenticated = other.IsAuthenticated;
    this.Source = other.Source;
    if (other.isSetUserIdArray()) {
      List<Integer> __this__UserIdArray = new ArrayList<Integer>(other.UserIdArray);
      this.UserIdArray = __this__UserIdArray;
    }
    if (other.isSetNoUserIdArray()) {
      List<Integer> __this__NoUserIdArray = new ArrayList<Integer>(other.NoUserIdArray);
      this.NoUserIdArray = __this__NoUserIdArray;
    }
    if (other.isSetUcarSerialNumberArray()) {
      List<String> __this__UcarSerialNumberArray = new ArrayList<String>(other.UcarSerialNumberArray);
      this.UcarSerialNumberArray = __this__UcarSerialNumberArray;
    }
    if (other.isSetKeyWord()) {
      this.KeyWord = other.KeyWord;
    }
    if (other.isSetColorArray()) {
      List<String> __this__ColorArray = new ArrayList<String>(other.ColorArray);
      this.ColorArray = __this__ColorArray;
    }
    this.CarSource1L = other.CarSource1L;
    this.PictureCount = other.PictureCount;
    if (other.isSetBigAreaIdArray()) {
      List<Integer> __this__BigAreaIdArray = new ArrayList<Integer>(other.BigAreaIdArray);
      this.BigAreaIdArray = __this__BigAreaIdArray;
    }
    if (other.isSetProvinceIdArray()) {
      List<Integer> __this__ProvinceIdArray = new ArrayList<Integer>(other.ProvinceIdArray);
      this.ProvinceIdArray = __this__ProvinceIdArray;
    }
    if (other.isSetCityIdArray()) {
      List<Integer> __this__CityIdArray = new ArrayList<Integer>(other.CityIdArray);
      this.CityIdArray = __this__CityIdArray;
    }
    if (other.isSetNoCityIdArray()) {
      List<Integer> __this__NoCityIdArray = new ArrayList<Integer>(other.NoCityIdArray);
      this.NoCityIdArray = __this__NoCityIdArray;
    }
    if (other.isSetRelateCityArray()) {
      List<Integer> __this__RelateCityArray = new ArrayList<Integer>(other.RelateCityArray);
      this.RelateCityArray = __this__RelateCityArray;
    }
    if (other.isSetPriceLowerArray()) {
      List<Double> __this__PriceLowerArray = new ArrayList<Double>(other.PriceLowerArray);
      this.PriceLowerArray = __this__PriceLowerArray;
    }
    if (other.isSetPriceHighArray()) {
      List<Double> __this__PriceHighArray = new ArrayList<Double>(other.PriceHighArray);
      this.PriceHighArray = __this__PriceHighArray;
    }
    if (other.isSetCPriceLowerArray()) {
      List<Double> __this__CPriceLowerArray = new ArrayList<Double>(other.CPriceLowerArray);
      this.CPriceLowerArray = __this__CPriceLowerArray;
    }
    if (other.isSetCPriceHighArray()) {
      List<Double> __this__CPriceHighArray = new ArrayList<Double>(other.CPriceHighArray);
      this.CPriceHighArray = __this__CPriceHighArray;
    }
    if (other.isSetB2BPriceLowerArray()) {
      List<Double> __this__B2BPriceLowerArray = new ArrayList<Double>(other.B2BPriceLowerArray);
      this.B2BPriceLowerArray = __this__B2BPriceLowerArray;
    }
    if (other.isSetB2BPriceHighArray()) {
      List<Double> __this__B2BPriceHighArray = new ArrayList<Double>(other.B2BPriceHighArray);
      this.B2BPriceHighArray = __this__B2BPriceHighArray;
    }
    if (other.isSetCarAgeLowerArray()) {
      List<Integer> __this__CarAgeLowerArray = new ArrayList<Integer>(other.CarAgeLowerArray);
      this.CarAgeLowerArray = __this__CarAgeLowerArray;
    }
    if (other.isSetCarAgeHighArray()) {
      List<Integer> __this__CarAgeHighArray = new ArrayList<Integer>(other.CarAgeHighArray);
      this.CarAgeHighArray = __this__CarAgeHighArray;
    }
    if (other.isSetDrivingMileageLowerArray()) {
      List<Integer> __this__DrivingMileageLowerArray = new ArrayList<Integer>(other.DrivingMileageLowerArray);
      this.DrivingMileageLowerArray = __this__DrivingMileageLowerArray;
    }
    if (other.isSetDrivingMileageHighArray()) {
      List<Integer> __this__DrivingMileageHighArray = new ArrayList<Integer>(other.DrivingMileageHighArray);
      this.DrivingMileageHighArray = __this__DrivingMileageHighArray;
    }
    this.SuperiorId = other.SuperiorId;
    this.UserType = other.UserType;
    this.IsNeglect = other.IsNeglect;
    this.IsVideo = other.IsVideo;
    this.IsFirstPicTrue = other.IsFirstPicTrue;
    this.IsDealerRecommend = other.IsDealerRecommend;
    if (other.isSetCarSourceTypeArray()) {
      List<Integer> __this__CarSourceTypeArray = new ArrayList<Integer>(other.CarSourceTypeArray);
      this.CarSourceTypeArray = __this__CarSourceTypeArray;
    }
    if (other.isSetCarTypeConfig()) {
      List<Integer> __this__CarTypeConfig = new ArrayList<Integer>(other.CarTypeConfig);
      this.CarTypeConfig = __this__CarTypeConfig;
    }
    this.IsRecommendGL = other.IsRecommendGL;
    this.IsWarranty = other.IsWarranty;
    if (other.isSetWarrantyTypeArray()) {
      List<Integer> __this__WarrantyTypeArray = new ArrayList<Integer>(other.WarrantyTypeArray);
      this.WarrantyTypeArray = __this__WarrantyTypeArray;
    }
    this.IsTop = other.IsTop;
    this.IsActivity = other.IsActivity;
    this.IsBangmai = other.IsBangmai;
    this.IsBangmaiche = other.IsBangmaiche;
    this.IsShowMr = other.IsShowMr;
    this.IsCarId = other.IsCarId;
    this.IsB2B = other.IsB2B;
    if (other.isSetCrmCustomerIdArray()) {
      List<Integer> __this__CrmCustomerIdArray = new ArrayList<Integer>(other.CrmCustomerIdArray);
      this.CrmCustomerIdArray = __this__CrmCustomerIdArray;
    }
    this.IsCheckReportJson = other.IsCheckReportJson;
    if (other.isSetEnvirStandardArray()) {
      List<Integer> __this__EnvirStandardArray = new ArrayList<Integer>(other.EnvirStandardArray);
      this.EnvirStandardArray = __this__EnvirStandardArray;
    }
    if (other.isSetConsumptionLowerArray()) {
      List<Double> __this__ConsumptionLowerArray = new ArrayList<Double>(other.ConsumptionLowerArray);
      this.ConsumptionLowerArray = __this__ConsumptionLowerArray;
    }
    if (other.isSetConsumptionHighArray()) {
      List<Double> __this__ConsumptionHighArray = new ArrayList<Double>(other.ConsumptionHighArray);
      this.ConsumptionHighArray = __this__ConsumptionHighArray;
    }
    if (other.isSetOilTypeArray()) {
      List<Integer> __this__OilTypeArray = new ArrayList<Integer>(other.OilTypeArray);
      this.OilTypeArray = __this__OilTypeArray;
    }
    if (other.isSetEngineLocationArray()) {
      List<Integer> __this__EngineLocationArray = new ArrayList<Integer>(other.EngineLocationArray);
      this.EngineLocationArray = __this__EngineLocationArray;
    }
    if (other.isSetBodyDoorsLowerArray()) {
      List<Integer> __this__BodyDoorsLowerArray = new ArrayList<Integer>(other.BodyDoorsLowerArray);
      this.BodyDoorsLowerArray = __this__BodyDoorsLowerArray;
    }
    if (other.isSetBodyDoorsHighArray()) {
      List<Integer> __this__BodyDoorsHighArray = new ArrayList<Integer>(other.BodyDoorsHighArray);
      this.BodyDoorsHighArray = __this__BodyDoorsHighArray;
    }
    if (other.isSetSeatNumLowerArray()) {
      List<Integer> __this__SeatNumLowerArray = new ArrayList<Integer>(other.SeatNumLowerArray);
      this.SeatNumLowerArray = __this__SeatNumLowerArray;
    }
    if (other.isSetSeatNumHighArray()) {
      List<Integer> __this__SeatNumHighArray = new ArrayList<Integer>(other.SeatNumHighArray);
      this.SeatNumHighArray = __this__SeatNumHighArray;
    }
    this.IsWagon = other.IsWagon;
    if (other.isSetDriveTypeArray()) {
      List<Integer> __this__DriveTypeArray = new ArrayList<Integer>(other.DriveTypeArray);
      this.DriveTypeArray = __this__DriveTypeArray;
    }
    if (other.isSetCsBodyFormArray()) {
      List<Integer> __this__CsBodyFormArray = new ArrayList<Integer>(other.CsBodyFormArray);
      this.CsBodyFormArray = __this__CsBodyFormArray;
    }
    if (other.isSetCarLevelArray()) {
      List<Integer> __this__CarLevelArray = new ArrayList<Integer>(other.CarLevelArray);
      this.CarLevelArray = __this__CarLevelArray;
    }
    if (other.isSetCarLevelSecondArray()) {
      List<Integer> __this__CarLevelSecondArray = new ArrayList<Integer>(other.CarLevelSecondArray);
      this.CarLevelSecondArray = __this__CarLevelSecondArray;
    }
    if (other.isSetCarYearArray()) {
      List<String> __this__CarYearArray = new ArrayList<String>(other.CarYearArray);
      this.CarYearArray = __this__CarYearArray;
    }
    if (other.isSetMainBrandArray()) {
      List<Integer> __this__MainBrandArray = new ArrayList<Integer>(other.MainBrandArray);
      this.MainBrandArray = __this__MainBrandArray;
    }
    if (other.isSetBrandArray()) {
      List<Integer> __this__BrandArray = new ArrayList<Integer>(other.BrandArray);
      this.BrandArray = __this__BrandArray;
    }
    if (other.isSetCarSerialArray()) {
      List<Integer> __this__CarSerialArray = new ArrayList<Integer>(other.CarSerialArray);
      this.CarSerialArray = __this__CarSerialArray;
    }
    if (other.isSetCarIDArray()) {
      List<Integer> __this__CarIDArray = new ArrayList<Integer>(other.CarIDArray);
      this.CarIDArray = __this__CarIDArray;
    }
    if (other.isSetGearBoxTypeArray()) {
      List<Integer> __this__GearBoxTypeArray = new ArrayList<Integer>(other.GearBoxTypeArray);
      this.GearBoxTypeArray = __this__GearBoxTypeArray;
    }
    if (other.isSetExhaustLevelLowerArray()) {
      List<Double> __this__ExhaustLevelLowerArray = new ArrayList<Double>(other.ExhaustLevelLowerArray);
      this.ExhaustLevelLowerArray = __this__ExhaustLevelLowerArray;
    }
    if (other.isSetExhaustLevelHighArray()) {
      List<Double> __this__ExhaustLevelHighArray = new ArrayList<Double>(other.ExhaustLevelHighArray);
      this.ExhaustLevelHighArray = __this__ExhaustLevelHighArray;
    }
    if (other.isSetExhaustLevelArray()) {
      List<Integer> __this__ExhaustLevelArray = new ArrayList<Integer>(other.ExhaustLevelArray);
      this.ExhaustLevelArray = __this__ExhaustLevelArray;
    }
    if (other.isSetCountryArray()) {
      List<Integer> __this__CountryArray = new ArrayList<Integer>(other.CountryArray);
      this.CountryArray = __this__CountryArray;
    }
    if (other.isSetBrandAttrArray()) {
      List<Integer> __this__BrandAttrArray = new ArrayList<Integer>(other.BrandAttrArray);
      this.BrandAttrArray = __this__BrandAttrArray;
    }
  }

  public SearchCondition deepCopy() {
    return new SearchCondition(this);
  }

  @Override
  public void clear() {
    setCommonFlagIsSet(false);
    this.CommonFlag = 0;
    setRequestSourceIsSet(false);
    this.RequestSource = 0;
    this.ReturnFieldArray = null;
    this.OrderByFieldArray = null;
    this.OrderByIsDESCArray = null;
    setSortBoostFlagIsSet(false);
    this.SortBoostFlag = 0;
    setPageSizeIsSet(false);
    this.PageSize = 0;
    setPageIndexIsSet(false);
    this.PageIndex = 0;
    setDistanceKmIsSet(false);
    this.DistanceKm = 0.0;
    this.Location = null;
    setIsCountSearchIsSet(false);
    this.IsCountSearch = false;
    this.RequestParametersLog = null;
    this.AggrFieldList = null;
    this.UcarIdArray = null;
    this.SiteId = null;
    this.UcarStatusArray = null;
    this.NoUcarIdArray = null;
    setIsAuthenticatedIsSet(false);
    this.IsAuthenticated = 0;
    setSourceIsSet(false);
    this.Source = 0;
    this.UserIdArray = null;
    this.NoUserIdArray = null;
    this.UcarSerialNumberArray = null;
    this.KeyWord = null;
    this.ColorArray = null;
    setCarSource1LIsSet(false);
    this.CarSource1L = 0;
    setPictureCountIsSet(false);
    this.PictureCount = 0;
    this.BigAreaIdArray = null;
    this.ProvinceIdArray = null;
    this.CityIdArray = null;
    this.NoCityIdArray = null;
    this.RelateCityArray = null;
    this.PriceLowerArray = null;
    this.PriceHighArray = null;
    this.CPriceLowerArray = null;
    this.CPriceHighArray = null;
    this.B2BPriceLowerArray = null;
    this.B2BPriceHighArray = null;
    this.CarAgeLowerArray = null;
    this.CarAgeHighArray = null;
    this.DrivingMileageLowerArray = null;
    this.DrivingMileageHighArray = null;
    setSuperiorIdIsSet(false);
    this.SuperiorId = 0;
    setUserTypeIsSet(false);
    this.UserType = 0;
    setIsNeglectIsSet(false);
    this.IsNeglect = 0;
    setIsVideoIsSet(false);
    this.IsVideo = 0;
    setIsFirstPicTrueIsSet(false);
    this.IsFirstPicTrue = 0;
    setIsDealerRecommendIsSet(false);
    this.IsDealerRecommend = 0;
    this.CarSourceTypeArray = null;
    this.CarTypeConfig = null;
    setIsRecommendGLIsSet(false);
    this.IsRecommendGL = 0;
    setIsWarrantyIsSet(false);
    this.IsWarranty = 0;
    this.WarrantyTypeArray = null;
    setIsTopIsSet(false);
    this.IsTop = 0;
    setIsActivityIsSet(false);
    this.IsActivity = 0;
    setIsBangmaiIsSet(false);
    this.IsBangmai = 0;
    setIsBangmaicheIsSet(false);
    this.IsBangmaiche = 0;
    setIsShowMrIsSet(false);
    this.IsShowMr = 0;
    setIsCarIdIsSet(false);
    this.IsCarId = 0;
    setIsB2BIsSet(false);
    this.IsB2B = 0;
    this.CrmCustomerIdArray = null;
    setIsCheckReportJsonIsSet(false);
    this.IsCheckReportJson = 0;
    this.EnvirStandardArray = null;
    this.ConsumptionLowerArray = null;
    this.ConsumptionHighArray = null;
    this.OilTypeArray = null;
    this.EngineLocationArray = null;
    this.BodyDoorsLowerArray = null;
    this.BodyDoorsHighArray = null;
    this.SeatNumLowerArray = null;
    this.SeatNumHighArray = null;
    setIsWagonIsSet(false);
    this.IsWagon = 0;
    this.DriveTypeArray = null;
    this.CsBodyFormArray = null;
    this.CarLevelArray = null;
    this.CarLevelSecondArray = null;
    this.CarYearArray = null;
    this.MainBrandArray = null;
    this.BrandArray = null;
    this.CarSerialArray = null;
    this.CarIDArray = null;
    this.GearBoxTypeArray = null;
    this.ExhaustLevelLowerArray = null;
    this.ExhaustLevelHighArray = null;
    this.ExhaustLevelArray = null;
    this.CountryArray = null;
    this.BrandAttrArray = null;
  }

  public int getCommonFlag() {
    return this.CommonFlag;
  }

  public SearchCondition setCommonFlag(int CommonFlag) {
    this.CommonFlag = CommonFlag;
    setCommonFlagIsSet(true);
    return this;
  }

  public void unsetCommonFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMONFLAG_ISSET_ID);
  }

  /** Returns true if field CommonFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCommonFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMONFLAG_ISSET_ID);
  }

  public void setCommonFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMONFLAG_ISSET_ID, value);
  }

  public int getRequestSource() {
    return this.RequestSource;
  }

  public SearchCondition setRequestSource(int RequestSource) {
    this.RequestSource = RequestSource;
    setRequestSourceIsSet(true);
    return this;
  }

  public void unsetRequestSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTSOURCE_ISSET_ID);
  }

  /** Returns true if field RequestSource is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestSource() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTSOURCE_ISSET_ID);
  }

  public void setRequestSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTSOURCE_ISSET_ID, value);
  }

  public int getReturnFieldArraySize() {
    return (this.ReturnFieldArray == null) ? 0 : this.ReturnFieldArray.size();
  }

  public java.util.Iterator<String> getReturnFieldArrayIterator() {
    return (this.ReturnFieldArray == null) ? null : this.ReturnFieldArray.iterator();
  }

  public void addToReturnFieldArray(String elem) {
    if (this.ReturnFieldArray == null) {
      this.ReturnFieldArray = new ArrayList<String>();
    }
    this.ReturnFieldArray.add(elem);
  }

  public List<String> getReturnFieldArray() {
    return this.ReturnFieldArray;
  }

  public SearchCondition setReturnFieldArray(List<String> ReturnFieldArray) {
    this.ReturnFieldArray = ReturnFieldArray;
    return this;
  }

  public void unsetReturnFieldArray() {
    this.ReturnFieldArray = null;
  }

  /** Returns true if field ReturnFieldArray is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnFieldArray() {
    return this.ReturnFieldArray != null;
  }

  public void setReturnFieldArrayIsSet(boolean value) {
    if (!value) {
      this.ReturnFieldArray = null;
    }
  }

  public int getOrderByFieldArraySize() {
    return (this.OrderByFieldArray == null) ? 0 : this.OrderByFieldArray.size();
  }

  public java.util.Iterator<String> getOrderByFieldArrayIterator() {
    return (this.OrderByFieldArray == null) ? null : this.OrderByFieldArray.iterator();
  }

  public void addToOrderByFieldArray(String elem) {
    if (this.OrderByFieldArray == null) {
      this.OrderByFieldArray = new ArrayList<String>();
    }
    this.OrderByFieldArray.add(elem);
  }

  public List<String> getOrderByFieldArray() {
    return this.OrderByFieldArray;
  }

  public SearchCondition setOrderByFieldArray(List<String> OrderByFieldArray) {
    this.OrderByFieldArray = OrderByFieldArray;
    return this;
  }

  public void unsetOrderByFieldArray() {
    this.OrderByFieldArray = null;
  }

  /** Returns true if field OrderByFieldArray is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderByFieldArray() {
    return this.OrderByFieldArray != null;
  }

  public void setOrderByFieldArrayIsSet(boolean value) {
    if (!value) {
      this.OrderByFieldArray = null;
    }
  }

  public int getOrderByIsDESCArraySize() {
    return (this.OrderByIsDESCArray == null) ? 0 : this.OrderByIsDESCArray.size();
  }

  public java.util.Iterator<Boolean> getOrderByIsDESCArrayIterator() {
    return (this.OrderByIsDESCArray == null) ? null : this.OrderByIsDESCArray.iterator();
  }

  public void addToOrderByIsDESCArray(boolean elem) {
    if (this.OrderByIsDESCArray == null) {
      this.OrderByIsDESCArray = new ArrayList<Boolean>();
    }
    this.OrderByIsDESCArray.add(elem);
  }

  public List<Boolean> getOrderByIsDESCArray() {
    return this.OrderByIsDESCArray;
  }

  public SearchCondition setOrderByIsDESCArray(List<Boolean> OrderByIsDESCArray) {
    this.OrderByIsDESCArray = OrderByIsDESCArray;
    return this;
  }

  public void unsetOrderByIsDESCArray() {
    this.OrderByIsDESCArray = null;
  }

  /** Returns true if field OrderByIsDESCArray is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderByIsDESCArray() {
    return this.OrderByIsDESCArray != null;
  }

  public void setOrderByIsDESCArrayIsSet(boolean value) {
    if (!value) {
      this.OrderByIsDESCArray = null;
    }
  }

  public int getSortBoostFlag() {
    return this.SortBoostFlag;
  }

  public SearchCondition setSortBoostFlag(int SortBoostFlag) {
    this.SortBoostFlag = SortBoostFlag;
    setSortBoostFlagIsSet(true);
    return this;
  }

  public void unsetSortBoostFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SORTBOOSTFLAG_ISSET_ID);
  }

  /** Returns true if field SortBoostFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetSortBoostFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __SORTBOOSTFLAG_ISSET_ID);
  }

  public void setSortBoostFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SORTBOOSTFLAG_ISSET_ID, value);
  }

  public int getPageSize() {
    return this.PageSize;
  }

  public SearchCondition setPageSize(int PageSize) {
    this.PageSize = PageSize;
    setPageSizeIsSet(true);
    return this;
  }

  public void unsetPageSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  /** Returns true if field PageSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPageSize() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGESIZE_ISSET_ID);
  }

  public void setPageSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGESIZE_ISSET_ID, value);
  }

  public int getPageIndex() {
    return this.PageIndex;
  }

  public SearchCondition setPageIndex(int PageIndex) {
    this.PageIndex = PageIndex;
    setPageIndexIsSet(true);
    return this;
  }

  public void unsetPageIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  /** Returns true if field PageIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetPageIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __PAGEINDEX_ISSET_ID);
  }

  public void setPageIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGEINDEX_ISSET_ID, value);
  }

  public double getDistanceKm() {
    return this.DistanceKm;
  }

  public SearchCondition setDistanceKm(double DistanceKm) {
    this.DistanceKm = DistanceKm;
    setDistanceKmIsSet(true);
    return this;
  }

  public void unsetDistanceKm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISTANCEKM_ISSET_ID);
  }

  /** Returns true if field DistanceKm is set (has been assigned a value) and false otherwise */
  public boolean isSetDistanceKm() {
    return EncodingUtils.testBit(__isset_bitfield, __DISTANCEKM_ISSET_ID);
  }

  public void setDistanceKmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISTANCEKM_ISSET_ID, value);
  }

  public String getLocation() {
    return this.Location;
  }

  public SearchCondition setLocation(String Location) {
    this.Location = Location;
    return this;
  }

  public void unsetLocation() {
    this.Location = null;
  }

  /** Returns true if field Location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.Location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.Location = null;
    }
  }

  public boolean isIsCountSearch() {
    return this.IsCountSearch;
  }

  public SearchCondition setIsCountSearch(boolean IsCountSearch) {
    this.IsCountSearch = IsCountSearch;
    setIsCountSearchIsSet(true);
    return this;
  }

  public void unsetIsCountSearch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCOUNTSEARCH_ISSET_ID);
  }

  /** Returns true if field IsCountSearch is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCountSearch() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCOUNTSEARCH_ISSET_ID);
  }

  public void setIsCountSearchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCOUNTSEARCH_ISSET_ID, value);
  }

  public String getRequestParametersLog() {
    return this.RequestParametersLog;
  }

  public SearchCondition setRequestParametersLog(String RequestParametersLog) {
    this.RequestParametersLog = RequestParametersLog;
    return this;
  }

  public void unsetRequestParametersLog() {
    this.RequestParametersLog = null;
  }

  /** Returns true if field RequestParametersLog is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestParametersLog() {
    return this.RequestParametersLog != null;
  }

  public void setRequestParametersLogIsSet(boolean value) {
    if (!value) {
      this.RequestParametersLog = null;
    }
  }

  public int getAggrFieldListSize() {
    return (this.AggrFieldList == null) ? 0 : this.AggrFieldList.size();
  }

  public java.util.Iterator<AggrCondition> getAggrFieldListIterator() {
    return (this.AggrFieldList == null) ? null : this.AggrFieldList.iterator();
  }

  public void addToAggrFieldList(AggrCondition elem) {
    if (this.AggrFieldList == null) {
      this.AggrFieldList = new ArrayList<AggrCondition>();
    }
    this.AggrFieldList.add(elem);
  }

  public List<AggrCondition> getAggrFieldList() {
    return this.AggrFieldList;
  }

  public SearchCondition setAggrFieldList(List<AggrCondition> AggrFieldList) {
    this.AggrFieldList = AggrFieldList;
    return this;
  }

  public void unsetAggrFieldList() {
    this.AggrFieldList = null;
  }

  /** Returns true if field AggrFieldList is set (has been assigned a value) and false otherwise */
  public boolean isSetAggrFieldList() {
    return this.AggrFieldList != null;
  }

  public void setAggrFieldListIsSet(boolean value) {
    if (!value) {
      this.AggrFieldList = null;
    }
  }

  public int getUcarIdArraySize() {
    return (this.UcarIdArray == null) ? 0 : this.UcarIdArray.size();
  }

  public java.util.Iterator<Integer> getUcarIdArrayIterator() {
    return (this.UcarIdArray == null) ? null : this.UcarIdArray.iterator();
  }

  public void addToUcarIdArray(int elem) {
    if (this.UcarIdArray == null) {
      this.UcarIdArray = new ArrayList<Integer>();
    }
    this.UcarIdArray.add(elem);
  }

  public List<Integer> getUcarIdArray() {
    return this.UcarIdArray;
  }

  public SearchCondition setUcarIdArray(List<Integer> UcarIdArray) {
    this.UcarIdArray = UcarIdArray;
    return this;
  }

  public void unsetUcarIdArray() {
    this.UcarIdArray = null;
  }

  /** Returns true if field UcarIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarIdArray() {
    return this.UcarIdArray != null;
  }

  public void setUcarIdArrayIsSet(boolean value) {
    if (!value) {
      this.UcarIdArray = null;
    }
  }

  public int getSiteIdSize() {
    return (this.SiteId == null) ? 0 : this.SiteId.size();
  }

  public java.util.Iterator<Integer> getSiteIdIterator() {
    return (this.SiteId == null) ? null : this.SiteId.iterator();
  }

  public void addToSiteId(int elem) {
    if (this.SiteId == null) {
      this.SiteId = new ArrayList<Integer>();
    }
    this.SiteId.add(elem);
  }

  public List<Integer> getSiteId() {
    return this.SiteId;
  }

  public SearchCondition setSiteId(List<Integer> SiteId) {
    this.SiteId = SiteId;
    return this;
  }

  public void unsetSiteId() {
    this.SiteId = null;
  }

  /** Returns true if field SiteId is set (has been assigned a value) and false otherwise */
  public boolean isSetSiteId() {
    return this.SiteId != null;
  }

  public void setSiteIdIsSet(boolean value) {
    if (!value) {
      this.SiteId = null;
    }
  }

  public int getUcarStatusArraySize() {
    return (this.UcarStatusArray == null) ? 0 : this.UcarStatusArray.size();
  }

  public java.util.Iterator<Integer> getUcarStatusArrayIterator() {
    return (this.UcarStatusArray == null) ? null : this.UcarStatusArray.iterator();
  }

  public void addToUcarStatusArray(int elem) {
    if (this.UcarStatusArray == null) {
      this.UcarStatusArray = new ArrayList<Integer>();
    }
    this.UcarStatusArray.add(elem);
  }

  public List<Integer> getUcarStatusArray() {
    return this.UcarStatusArray;
  }

  public SearchCondition setUcarStatusArray(List<Integer> UcarStatusArray) {
    this.UcarStatusArray = UcarStatusArray;
    return this;
  }

  public void unsetUcarStatusArray() {
    this.UcarStatusArray = null;
  }

  /** Returns true if field UcarStatusArray is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarStatusArray() {
    return this.UcarStatusArray != null;
  }

  public void setUcarStatusArrayIsSet(boolean value) {
    if (!value) {
      this.UcarStatusArray = null;
    }
  }

  public int getNoUcarIdArraySize() {
    return (this.NoUcarIdArray == null) ? 0 : this.NoUcarIdArray.size();
  }

  public java.util.Iterator<Integer> getNoUcarIdArrayIterator() {
    return (this.NoUcarIdArray == null) ? null : this.NoUcarIdArray.iterator();
  }

  public void addToNoUcarIdArray(int elem) {
    if (this.NoUcarIdArray == null) {
      this.NoUcarIdArray = new ArrayList<Integer>();
    }
    this.NoUcarIdArray.add(elem);
  }

  public List<Integer> getNoUcarIdArray() {
    return this.NoUcarIdArray;
  }

  public SearchCondition setNoUcarIdArray(List<Integer> NoUcarIdArray) {
    this.NoUcarIdArray = NoUcarIdArray;
    return this;
  }

  public void unsetNoUcarIdArray() {
    this.NoUcarIdArray = null;
  }

  /** Returns true if field NoUcarIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetNoUcarIdArray() {
    return this.NoUcarIdArray != null;
  }

  public void setNoUcarIdArrayIsSet(boolean value) {
    if (!value) {
      this.NoUcarIdArray = null;
    }
  }

  public int getIsAuthenticated() {
    return this.IsAuthenticated;
  }

  public SearchCondition setIsAuthenticated(int IsAuthenticated) {
    this.IsAuthenticated = IsAuthenticated;
    setIsAuthenticatedIsSet(true);
    return this;
  }

  public void unsetIsAuthenticated() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISAUTHENTICATED_ISSET_ID);
  }

  /** Returns true if field IsAuthenticated is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAuthenticated() {
    return EncodingUtils.testBit(__isset_bitfield, __ISAUTHENTICATED_ISSET_ID);
  }

  public void setIsAuthenticatedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISAUTHENTICATED_ISSET_ID, value);
  }

  public int getSource() {
    return this.Source;
  }

  public SearchCondition setSource(int Source) {
    this.Source = Source;
    setSourceIsSet(true);
    return this;
  }

  public void unsetSource() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  /** Returns true if field Source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCE_ISSET_ID);
  }

  public void setSourceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCE_ISSET_ID, value);
  }

  public int getUserIdArraySize() {
    return (this.UserIdArray == null) ? 0 : this.UserIdArray.size();
  }

  public java.util.Iterator<Integer> getUserIdArrayIterator() {
    return (this.UserIdArray == null) ? null : this.UserIdArray.iterator();
  }

  public void addToUserIdArray(int elem) {
    if (this.UserIdArray == null) {
      this.UserIdArray = new ArrayList<Integer>();
    }
    this.UserIdArray.add(elem);
  }

  public List<Integer> getUserIdArray() {
    return this.UserIdArray;
  }

  public SearchCondition setUserIdArray(List<Integer> UserIdArray) {
    this.UserIdArray = UserIdArray;
    return this;
  }

  public void unsetUserIdArray() {
    this.UserIdArray = null;
  }

  /** Returns true if field UserIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetUserIdArray() {
    return this.UserIdArray != null;
  }

  public void setUserIdArrayIsSet(boolean value) {
    if (!value) {
      this.UserIdArray = null;
    }
  }

  public int getNoUserIdArraySize() {
    return (this.NoUserIdArray == null) ? 0 : this.NoUserIdArray.size();
  }

  public java.util.Iterator<Integer> getNoUserIdArrayIterator() {
    return (this.NoUserIdArray == null) ? null : this.NoUserIdArray.iterator();
  }

  public void addToNoUserIdArray(int elem) {
    if (this.NoUserIdArray == null) {
      this.NoUserIdArray = new ArrayList<Integer>();
    }
    this.NoUserIdArray.add(elem);
  }

  public List<Integer> getNoUserIdArray() {
    return this.NoUserIdArray;
  }

  public SearchCondition setNoUserIdArray(List<Integer> NoUserIdArray) {
    this.NoUserIdArray = NoUserIdArray;
    return this;
  }

  public void unsetNoUserIdArray() {
    this.NoUserIdArray = null;
  }

  /** Returns true if field NoUserIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetNoUserIdArray() {
    return this.NoUserIdArray != null;
  }

  public void setNoUserIdArrayIsSet(boolean value) {
    if (!value) {
      this.NoUserIdArray = null;
    }
  }

  public int getUcarSerialNumberArraySize() {
    return (this.UcarSerialNumberArray == null) ? 0 : this.UcarSerialNumberArray.size();
  }

  public java.util.Iterator<String> getUcarSerialNumberArrayIterator() {
    return (this.UcarSerialNumberArray == null) ? null : this.UcarSerialNumberArray.iterator();
  }

  public void addToUcarSerialNumberArray(String elem) {
    if (this.UcarSerialNumberArray == null) {
      this.UcarSerialNumberArray = new ArrayList<String>();
    }
    this.UcarSerialNumberArray.add(elem);
  }

  public List<String> getUcarSerialNumberArray() {
    return this.UcarSerialNumberArray;
  }

  public SearchCondition setUcarSerialNumberArray(List<String> UcarSerialNumberArray) {
    this.UcarSerialNumberArray = UcarSerialNumberArray;
    return this;
  }

  public void unsetUcarSerialNumberArray() {
    this.UcarSerialNumberArray = null;
  }

  /** Returns true if field UcarSerialNumberArray is set (has been assigned a value) and false otherwise */
  public boolean isSetUcarSerialNumberArray() {
    return this.UcarSerialNumberArray != null;
  }

  public void setUcarSerialNumberArrayIsSet(boolean value) {
    if (!value) {
      this.UcarSerialNumberArray = null;
    }
  }

  public String getKeyWord() {
    return this.KeyWord;
  }

  public SearchCondition setKeyWord(String KeyWord) {
    this.KeyWord = KeyWord;
    return this;
  }

  public void unsetKeyWord() {
    this.KeyWord = null;
  }

  /** Returns true if field KeyWord is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyWord() {
    return this.KeyWord != null;
  }

  public void setKeyWordIsSet(boolean value) {
    if (!value) {
      this.KeyWord = null;
    }
  }

  public int getColorArraySize() {
    return (this.ColorArray == null) ? 0 : this.ColorArray.size();
  }

  public java.util.Iterator<String> getColorArrayIterator() {
    return (this.ColorArray == null) ? null : this.ColorArray.iterator();
  }

  public void addToColorArray(String elem) {
    if (this.ColorArray == null) {
      this.ColorArray = new ArrayList<String>();
    }
    this.ColorArray.add(elem);
  }

  public List<String> getColorArray() {
    return this.ColorArray;
  }

  public SearchCondition setColorArray(List<String> ColorArray) {
    this.ColorArray = ColorArray;
    return this;
  }

  public void unsetColorArray() {
    this.ColorArray = null;
  }

  /** Returns true if field ColorArray is set (has been assigned a value) and false otherwise */
  public boolean isSetColorArray() {
    return this.ColorArray != null;
  }

  public void setColorArrayIsSet(boolean value) {
    if (!value) {
      this.ColorArray = null;
    }
  }

  public int getCarSource1L() {
    return this.CarSource1L;
  }

  public SearchCondition setCarSource1L(int CarSource1L) {
    this.CarSource1L = CarSource1L;
    setCarSource1LIsSet(true);
    return this;
  }

  public void unsetCarSource1L() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CARSOURCE1L_ISSET_ID);
  }

  /** Returns true if field CarSource1L is set (has been assigned a value) and false otherwise */
  public boolean isSetCarSource1L() {
    return EncodingUtils.testBit(__isset_bitfield, __CARSOURCE1L_ISSET_ID);
  }

  public void setCarSource1LIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CARSOURCE1L_ISSET_ID, value);
  }

  public int getPictureCount() {
    return this.PictureCount;
  }

  public SearchCondition setPictureCount(int PictureCount) {
    this.PictureCount = PictureCount;
    setPictureCountIsSet(true);
    return this;
  }

  public void unsetPictureCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PICTURECOUNT_ISSET_ID);
  }

  /** Returns true if field PictureCount is set (has been assigned a value) and false otherwise */
  public boolean isSetPictureCount() {
    return EncodingUtils.testBit(__isset_bitfield, __PICTURECOUNT_ISSET_ID);
  }

  public void setPictureCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PICTURECOUNT_ISSET_ID, value);
  }

  public int getBigAreaIdArraySize() {
    return (this.BigAreaIdArray == null) ? 0 : this.BigAreaIdArray.size();
  }

  public java.util.Iterator<Integer> getBigAreaIdArrayIterator() {
    return (this.BigAreaIdArray == null) ? null : this.BigAreaIdArray.iterator();
  }

  public void addToBigAreaIdArray(int elem) {
    if (this.BigAreaIdArray == null) {
      this.BigAreaIdArray = new ArrayList<Integer>();
    }
    this.BigAreaIdArray.add(elem);
  }

  public List<Integer> getBigAreaIdArray() {
    return this.BigAreaIdArray;
  }

  public SearchCondition setBigAreaIdArray(List<Integer> BigAreaIdArray) {
    this.BigAreaIdArray = BigAreaIdArray;
    return this;
  }

  public void unsetBigAreaIdArray() {
    this.BigAreaIdArray = null;
  }

  /** Returns true if field BigAreaIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetBigAreaIdArray() {
    return this.BigAreaIdArray != null;
  }

  public void setBigAreaIdArrayIsSet(boolean value) {
    if (!value) {
      this.BigAreaIdArray = null;
    }
  }

  public int getProvinceIdArraySize() {
    return (this.ProvinceIdArray == null) ? 0 : this.ProvinceIdArray.size();
  }

  public java.util.Iterator<Integer> getProvinceIdArrayIterator() {
    return (this.ProvinceIdArray == null) ? null : this.ProvinceIdArray.iterator();
  }

  public void addToProvinceIdArray(int elem) {
    if (this.ProvinceIdArray == null) {
      this.ProvinceIdArray = new ArrayList<Integer>();
    }
    this.ProvinceIdArray.add(elem);
  }

  public List<Integer> getProvinceIdArray() {
    return this.ProvinceIdArray;
  }

  public SearchCondition setProvinceIdArray(List<Integer> ProvinceIdArray) {
    this.ProvinceIdArray = ProvinceIdArray;
    return this;
  }

  public void unsetProvinceIdArray() {
    this.ProvinceIdArray = null;
  }

  /** Returns true if field ProvinceIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetProvinceIdArray() {
    return this.ProvinceIdArray != null;
  }

  public void setProvinceIdArrayIsSet(boolean value) {
    if (!value) {
      this.ProvinceIdArray = null;
    }
  }

  public int getCityIdArraySize() {
    return (this.CityIdArray == null) ? 0 : this.CityIdArray.size();
  }

  public java.util.Iterator<Integer> getCityIdArrayIterator() {
    return (this.CityIdArray == null) ? null : this.CityIdArray.iterator();
  }

  public void addToCityIdArray(int elem) {
    if (this.CityIdArray == null) {
      this.CityIdArray = new ArrayList<Integer>();
    }
    this.CityIdArray.add(elem);
  }

  public List<Integer> getCityIdArray() {
    return this.CityIdArray;
  }

  public SearchCondition setCityIdArray(List<Integer> CityIdArray) {
    this.CityIdArray = CityIdArray;
    return this;
  }

  public void unsetCityIdArray() {
    this.CityIdArray = null;
  }

  /** Returns true if field CityIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCityIdArray() {
    return this.CityIdArray != null;
  }

  public void setCityIdArrayIsSet(boolean value) {
    if (!value) {
      this.CityIdArray = null;
    }
  }

  public int getNoCityIdArraySize() {
    return (this.NoCityIdArray == null) ? 0 : this.NoCityIdArray.size();
  }

  public java.util.Iterator<Integer> getNoCityIdArrayIterator() {
    return (this.NoCityIdArray == null) ? null : this.NoCityIdArray.iterator();
  }

  public void addToNoCityIdArray(int elem) {
    if (this.NoCityIdArray == null) {
      this.NoCityIdArray = new ArrayList<Integer>();
    }
    this.NoCityIdArray.add(elem);
  }

  public List<Integer> getNoCityIdArray() {
    return this.NoCityIdArray;
  }

  public SearchCondition setNoCityIdArray(List<Integer> NoCityIdArray) {
    this.NoCityIdArray = NoCityIdArray;
    return this;
  }

  public void unsetNoCityIdArray() {
    this.NoCityIdArray = null;
  }

  /** Returns true if field NoCityIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetNoCityIdArray() {
    return this.NoCityIdArray != null;
  }

  public void setNoCityIdArrayIsSet(boolean value) {
    if (!value) {
      this.NoCityIdArray = null;
    }
  }

  public int getRelateCityArraySize() {
    return (this.RelateCityArray == null) ? 0 : this.RelateCityArray.size();
  }

  public java.util.Iterator<Integer> getRelateCityArrayIterator() {
    return (this.RelateCityArray == null) ? null : this.RelateCityArray.iterator();
  }

  public void addToRelateCityArray(int elem) {
    if (this.RelateCityArray == null) {
      this.RelateCityArray = new ArrayList<Integer>();
    }
    this.RelateCityArray.add(elem);
  }

  public List<Integer> getRelateCityArray() {
    return this.RelateCityArray;
  }

  public SearchCondition setRelateCityArray(List<Integer> RelateCityArray) {
    this.RelateCityArray = RelateCityArray;
    return this;
  }

  public void unsetRelateCityArray() {
    this.RelateCityArray = null;
  }

  /** Returns true if field RelateCityArray is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateCityArray() {
    return this.RelateCityArray != null;
  }

  public void setRelateCityArrayIsSet(boolean value) {
    if (!value) {
      this.RelateCityArray = null;
    }
  }

  public int getPriceLowerArraySize() {
    return (this.PriceLowerArray == null) ? 0 : this.PriceLowerArray.size();
  }

  public java.util.Iterator<Double> getPriceLowerArrayIterator() {
    return (this.PriceLowerArray == null) ? null : this.PriceLowerArray.iterator();
  }

  public void addToPriceLowerArray(double elem) {
    if (this.PriceLowerArray == null) {
      this.PriceLowerArray = new ArrayList<Double>();
    }
    this.PriceLowerArray.add(elem);
  }

  public List<Double> getPriceLowerArray() {
    return this.PriceLowerArray;
  }

  public SearchCondition setPriceLowerArray(List<Double> PriceLowerArray) {
    this.PriceLowerArray = PriceLowerArray;
    return this;
  }

  public void unsetPriceLowerArray() {
    this.PriceLowerArray = null;
  }

  /** Returns true if field PriceLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceLowerArray() {
    return this.PriceLowerArray != null;
  }

  public void setPriceLowerArrayIsSet(boolean value) {
    if (!value) {
      this.PriceLowerArray = null;
    }
  }

  public int getPriceHighArraySize() {
    return (this.PriceHighArray == null) ? 0 : this.PriceHighArray.size();
  }

  public java.util.Iterator<Double> getPriceHighArrayIterator() {
    return (this.PriceHighArray == null) ? null : this.PriceHighArray.iterator();
  }

  public void addToPriceHighArray(double elem) {
    if (this.PriceHighArray == null) {
      this.PriceHighArray = new ArrayList<Double>();
    }
    this.PriceHighArray.add(elem);
  }

  public List<Double> getPriceHighArray() {
    return this.PriceHighArray;
  }

  public SearchCondition setPriceHighArray(List<Double> PriceHighArray) {
    this.PriceHighArray = PriceHighArray;
    return this;
  }

  public void unsetPriceHighArray() {
    this.PriceHighArray = null;
  }

  /** Returns true if field PriceHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceHighArray() {
    return this.PriceHighArray != null;
  }

  public void setPriceHighArrayIsSet(boolean value) {
    if (!value) {
      this.PriceHighArray = null;
    }
  }

  public int getCPriceLowerArraySize() {
    return (this.CPriceLowerArray == null) ? 0 : this.CPriceLowerArray.size();
  }

  public java.util.Iterator<Double> getCPriceLowerArrayIterator() {
    return (this.CPriceLowerArray == null) ? null : this.CPriceLowerArray.iterator();
  }

  public void addToCPriceLowerArray(double elem) {
    if (this.CPriceLowerArray == null) {
      this.CPriceLowerArray = new ArrayList<Double>();
    }
    this.CPriceLowerArray.add(elem);
  }

  public List<Double> getCPriceLowerArray() {
    return this.CPriceLowerArray;
  }

  public SearchCondition setCPriceLowerArray(List<Double> CPriceLowerArray) {
    this.CPriceLowerArray = CPriceLowerArray;
    return this;
  }

  public void unsetCPriceLowerArray() {
    this.CPriceLowerArray = null;
  }

  /** Returns true if field CPriceLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCPriceLowerArray() {
    return this.CPriceLowerArray != null;
  }

  public void setCPriceLowerArrayIsSet(boolean value) {
    if (!value) {
      this.CPriceLowerArray = null;
    }
  }

  public int getCPriceHighArraySize() {
    return (this.CPriceHighArray == null) ? 0 : this.CPriceHighArray.size();
  }

  public java.util.Iterator<Double> getCPriceHighArrayIterator() {
    return (this.CPriceHighArray == null) ? null : this.CPriceHighArray.iterator();
  }

  public void addToCPriceHighArray(double elem) {
    if (this.CPriceHighArray == null) {
      this.CPriceHighArray = new ArrayList<Double>();
    }
    this.CPriceHighArray.add(elem);
  }

  public List<Double> getCPriceHighArray() {
    return this.CPriceHighArray;
  }

  public SearchCondition setCPriceHighArray(List<Double> CPriceHighArray) {
    this.CPriceHighArray = CPriceHighArray;
    return this;
  }

  public void unsetCPriceHighArray() {
    this.CPriceHighArray = null;
  }

  /** Returns true if field CPriceHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCPriceHighArray() {
    return this.CPriceHighArray != null;
  }

  public void setCPriceHighArrayIsSet(boolean value) {
    if (!value) {
      this.CPriceHighArray = null;
    }
  }

  public int getB2BPriceLowerArraySize() {
    return (this.B2BPriceLowerArray == null) ? 0 : this.B2BPriceLowerArray.size();
  }

  public java.util.Iterator<Double> getB2BPriceLowerArrayIterator() {
    return (this.B2BPriceLowerArray == null) ? null : this.B2BPriceLowerArray.iterator();
  }

  public void addToB2BPriceLowerArray(double elem) {
    if (this.B2BPriceLowerArray == null) {
      this.B2BPriceLowerArray = new ArrayList<Double>();
    }
    this.B2BPriceLowerArray.add(elem);
  }

  public List<Double> getB2BPriceLowerArray() {
    return this.B2BPriceLowerArray;
  }

  public SearchCondition setB2BPriceLowerArray(List<Double> B2BPriceLowerArray) {
    this.B2BPriceLowerArray = B2BPriceLowerArray;
    return this;
  }

  public void unsetB2BPriceLowerArray() {
    this.B2BPriceLowerArray = null;
  }

  /** Returns true if field B2BPriceLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetB2BPriceLowerArray() {
    return this.B2BPriceLowerArray != null;
  }

  public void setB2BPriceLowerArrayIsSet(boolean value) {
    if (!value) {
      this.B2BPriceLowerArray = null;
    }
  }

  public int getB2BPriceHighArraySize() {
    return (this.B2BPriceHighArray == null) ? 0 : this.B2BPriceHighArray.size();
  }

  public java.util.Iterator<Double> getB2BPriceHighArrayIterator() {
    return (this.B2BPriceHighArray == null) ? null : this.B2BPriceHighArray.iterator();
  }

  public void addToB2BPriceHighArray(double elem) {
    if (this.B2BPriceHighArray == null) {
      this.B2BPriceHighArray = new ArrayList<Double>();
    }
    this.B2BPriceHighArray.add(elem);
  }

  public List<Double> getB2BPriceHighArray() {
    return this.B2BPriceHighArray;
  }

  public SearchCondition setB2BPriceHighArray(List<Double> B2BPriceHighArray) {
    this.B2BPriceHighArray = B2BPriceHighArray;
    return this;
  }

  public void unsetB2BPriceHighArray() {
    this.B2BPriceHighArray = null;
  }

  /** Returns true if field B2BPriceHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetB2BPriceHighArray() {
    return this.B2BPriceHighArray != null;
  }

  public void setB2BPriceHighArrayIsSet(boolean value) {
    if (!value) {
      this.B2BPriceHighArray = null;
    }
  }

  public int getCarAgeLowerArraySize() {
    return (this.CarAgeLowerArray == null) ? 0 : this.CarAgeLowerArray.size();
  }

  public java.util.Iterator<Integer> getCarAgeLowerArrayIterator() {
    return (this.CarAgeLowerArray == null) ? null : this.CarAgeLowerArray.iterator();
  }

  public void addToCarAgeLowerArray(int elem) {
    if (this.CarAgeLowerArray == null) {
      this.CarAgeLowerArray = new ArrayList<Integer>();
    }
    this.CarAgeLowerArray.add(elem);
  }

  public List<Integer> getCarAgeLowerArray() {
    return this.CarAgeLowerArray;
  }

  public SearchCondition setCarAgeLowerArray(List<Integer> CarAgeLowerArray) {
    this.CarAgeLowerArray = CarAgeLowerArray;
    return this;
  }

  public void unsetCarAgeLowerArray() {
    this.CarAgeLowerArray = null;
  }

  /** Returns true if field CarAgeLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarAgeLowerArray() {
    return this.CarAgeLowerArray != null;
  }

  public void setCarAgeLowerArrayIsSet(boolean value) {
    if (!value) {
      this.CarAgeLowerArray = null;
    }
  }

  public int getCarAgeHighArraySize() {
    return (this.CarAgeHighArray == null) ? 0 : this.CarAgeHighArray.size();
  }

  public java.util.Iterator<Integer> getCarAgeHighArrayIterator() {
    return (this.CarAgeHighArray == null) ? null : this.CarAgeHighArray.iterator();
  }

  public void addToCarAgeHighArray(int elem) {
    if (this.CarAgeHighArray == null) {
      this.CarAgeHighArray = new ArrayList<Integer>();
    }
    this.CarAgeHighArray.add(elem);
  }

  public List<Integer> getCarAgeHighArray() {
    return this.CarAgeHighArray;
  }

  public SearchCondition setCarAgeHighArray(List<Integer> CarAgeHighArray) {
    this.CarAgeHighArray = CarAgeHighArray;
    return this;
  }

  public void unsetCarAgeHighArray() {
    this.CarAgeHighArray = null;
  }

  /** Returns true if field CarAgeHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarAgeHighArray() {
    return this.CarAgeHighArray != null;
  }

  public void setCarAgeHighArrayIsSet(boolean value) {
    if (!value) {
      this.CarAgeHighArray = null;
    }
  }

  public int getDrivingMileageLowerArraySize() {
    return (this.DrivingMileageLowerArray == null) ? 0 : this.DrivingMileageLowerArray.size();
  }

  public java.util.Iterator<Integer> getDrivingMileageLowerArrayIterator() {
    return (this.DrivingMileageLowerArray == null) ? null : this.DrivingMileageLowerArray.iterator();
  }

  public void addToDrivingMileageLowerArray(int elem) {
    if (this.DrivingMileageLowerArray == null) {
      this.DrivingMileageLowerArray = new ArrayList<Integer>();
    }
    this.DrivingMileageLowerArray.add(elem);
  }

  public List<Integer> getDrivingMileageLowerArray() {
    return this.DrivingMileageLowerArray;
  }

  public SearchCondition setDrivingMileageLowerArray(List<Integer> DrivingMileageLowerArray) {
    this.DrivingMileageLowerArray = DrivingMileageLowerArray;
    return this;
  }

  public void unsetDrivingMileageLowerArray() {
    this.DrivingMileageLowerArray = null;
  }

  /** Returns true if field DrivingMileageLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetDrivingMileageLowerArray() {
    return this.DrivingMileageLowerArray != null;
  }

  public void setDrivingMileageLowerArrayIsSet(boolean value) {
    if (!value) {
      this.DrivingMileageLowerArray = null;
    }
  }

  public int getDrivingMileageHighArraySize() {
    return (this.DrivingMileageHighArray == null) ? 0 : this.DrivingMileageHighArray.size();
  }

  public java.util.Iterator<Integer> getDrivingMileageHighArrayIterator() {
    return (this.DrivingMileageHighArray == null) ? null : this.DrivingMileageHighArray.iterator();
  }

  public void addToDrivingMileageHighArray(int elem) {
    if (this.DrivingMileageHighArray == null) {
      this.DrivingMileageHighArray = new ArrayList<Integer>();
    }
    this.DrivingMileageHighArray.add(elem);
  }

  public List<Integer> getDrivingMileageHighArray() {
    return this.DrivingMileageHighArray;
  }

  public SearchCondition setDrivingMileageHighArray(List<Integer> DrivingMileageHighArray) {
    this.DrivingMileageHighArray = DrivingMileageHighArray;
    return this;
  }

  public void unsetDrivingMileageHighArray() {
    this.DrivingMileageHighArray = null;
  }

  /** Returns true if field DrivingMileageHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetDrivingMileageHighArray() {
    return this.DrivingMileageHighArray != null;
  }

  public void setDrivingMileageHighArrayIsSet(boolean value) {
    if (!value) {
      this.DrivingMileageHighArray = null;
    }
  }

  public int getSuperiorId() {
    return this.SuperiorId;
  }

  public SearchCondition setSuperiorId(int SuperiorId) {
    this.SuperiorId = SuperiorId;
    setSuperiorIdIsSet(true);
    return this;
  }

  public void unsetSuperiorId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPERIORID_ISSET_ID);
  }

  /** Returns true if field SuperiorId is set (has been assigned a value) and false otherwise */
  public boolean isSetSuperiorId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPERIORID_ISSET_ID);
  }

  public void setSuperiorIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPERIORID_ISSET_ID, value);
  }

  public int getUserType() {
    return this.UserType;
  }

  public SearchCondition setUserType(int UserType) {
    this.UserType = UserType;
    setUserTypeIsSet(true);
    return this;
  }

  public void unsetUserType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  /** Returns true if field UserType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserType() {
    return EncodingUtils.testBit(__isset_bitfield, __USERTYPE_ISSET_ID);
  }

  public void setUserTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTYPE_ISSET_ID, value);
  }

  public int getIsNeglect() {
    return this.IsNeglect;
  }

  public SearchCondition setIsNeglect(int IsNeglect) {
    this.IsNeglect = IsNeglect;
    setIsNeglectIsSet(true);
    return this;
  }

  public void unsetIsNeglect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISNEGLECT_ISSET_ID);
  }

  /** Returns true if field IsNeglect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsNeglect() {
    return EncodingUtils.testBit(__isset_bitfield, __ISNEGLECT_ISSET_ID);
  }

  public void setIsNeglectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISNEGLECT_ISSET_ID, value);
  }

  public int getIsVideo() {
    return this.IsVideo;
  }

  public SearchCondition setIsVideo(int IsVideo) {
    this.IsVideo = IsVideo;
    setIsVideoIsSet(true);
    return this;
  }

  public void unsetIsVideo() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISVIDEO_ISSET_ID);
  }

  /** Returns true if field IsVideo is set (has been assigned a value) and false otherwise */
  public boolean isSetIsVideo() {
    return EncodingUtils.testBit(__isset_bitfield, __ISVIDEO_ISSET_ID);
  }

  public void setIsVideoIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISVIDEO_ISSET_ID, value);
  }

  public int getIsFirstPicTrue() {
    return this.IsFirstPicTrue;
  }

  public SearchCondition setIsFirstPicTrue(int IsFirstPicTrue) {
    this.IsFirstPicTrue = IsFirstPicTrue;
    setIsFirstPicTrueIsSet(true);
    return this;
  }

  public void unsetIsFirstPicTrue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFIRSTPICTRUE_ISSET_ID);
  }

  /** Returns true if field IsFirstPicTrue is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFirstPicTrue() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFIRSTPICTRUE_ISSET_ID);
  }

  public void setIsFirstPicTrueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFIRSTPICTRUE_ISSET_ID, value);
  }

  public int getIsDealerRecommend() {
    return this.IsDealerRecommend;
  }

  public SearchCondition setIsDealerRecommend(int IsDealerRecommend) {
    this.IsDealerRecommend = IsDealerRecommend;
    setIsDealerRecommendIsSet(true);
    return this;
  }

  public void unsetIsDealerRecommend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISDEALERRECOMMEND_ISSET_ID);
  }

  /** Returns true if field IsDealerRecommend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsDealerRecommend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISDEALERRECOMMEND_ISSET_ID);
  }

  public void setIsDealerRecommendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISDEALERRECOMMEND_ISSET_ID, value);
  }

  public int getCarSourceTypeArraySize() {
    return (this.CarSourceTypeArray == null) ? 0 : this.CarSourceTypeArray.size();
  }

  public java.util.Iterator<Integer> getCarSourceTypeArrayIterator() {
    return (this.CarSourceTypeArray == null) ? null : this.CarSourceTypeArray.iterator();
  }

  public void addToCarSourceTypeArray(int elem) {
    if (this.CarSourceTypeArray == null) {
      this.CarSourceTypeArray = new ArrayList<Integer>();
    }
    this.CarSourceTypeArray.add(elem);
  }

  public List<Integer> getCarSourceTypeArray() {
    return this.CarSourceTypeArray;
  }

  public SearchCondition setCarSourceTypeArray(List<Integer> CarSourceTypeArray) {
    this.CarSourceTypeArray = CarSourceTypeArray;
    return this;
  }

  public void unsetCarSourceTypeArray() {
    this.CarSourceTypeArray = null;
  }

  /** Returns true if field CarSourceTypeArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarSourceTypeArray() {
    return this.CarSourceTypeArray != null;
  }

  public void setCarSourceTypeArrayIsSet(boolean value) {
    if (!value) {
      this.CarSourceTypeArray = null;
    }
  }

  public int getCarTypeConfigSize() {
    return (this.CarTypeConfig == null) ? 0 : this.CarTypeConfig.size();
  }

  public java.util.Iterator<Integer> getCarTypeConfigIterator() {
    return (this.CarTypeConfig == null) ? null : this.CarTypeConfig.iterator();
  }

  public void addToCarTypeConfig(int elem) {
    if (this.CarTypeConfig == null) {
      this.CarTypeConfig = new ArrayList<Integer>();
    }
    this.CarTypeConfig.add(elem);
  }

  public List<Integer> getCarTypeConfig() {
    return this.CarTypeConfig;
  }

  public SearchCondition setCarTypeConfig(List<Integer> CarTypeConfig) {
    this.CarTypeConfig = CarTypeConfig;
    return this;
  }

  public void unsetCarTypeConfig() {
    this.CarTypeConfig = null;
  }

  /** Returns true if field CarTypeConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetCarTypeConfig() {
    return this.CarTypeConfig != null;
  }

  public void setCarTypeConfigIsSet(boolean value) {
    if (!value) {
      this.CarTypeConfig = null;
    }
  }

  public int getIsRecommendGL() {
    return this.IsRecommendGL;
  }

  public SearchCondition setIsRecommendGL(int IsRecommendGL) {
    this.IsRecommendGL = IsRecommendGL;
    setIsRecommendGLIsSet(true);
    return this;
  }

  public void unsetIsRecommendGL() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISRECOMMENDGL_ISSET_ID);
  }

  /** Returns true if field IsRecommendGL is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRecommendGL() {
    return EncodingUtils.testBit(__isset_bitfield, __ISRECOMMENDGL_ISSET_ID);
  }

  public void setIsRecommendGLIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISRECOMMENDGL_ISSET_ID, value);
  }

  public int getIsWarranty() {
    return this.IsWarranty;
  }

  public SearchCondition setIsWarranty(int IsWarranty) {
    this.IsWarranty = IsWarranty;
    setIsWarrantyIsSet(true);
    return this;
  }

  public void unsetIsWarranty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISWARRANTY_ISSET_ID);
  }

  /** Returns true if field IsWarranty is set (has been assigned a value) and false otherwise */
  public boolean isSetIsWarranty() {
    return EncodingUtils.testBit(__isset_bitfield, __ISWARRANTY_ISSET_ID);
  }

  public void setIsWarrantyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISWARRANTY_ISSET_ID, value);
  }

  public int getWarrantyTypeArraySize() {
    return (this.WarrantyTypeArray == null) ? 0 : this.WarrantyTypeArray.size();
  }

  public java.util.Iterator<Integer> getWarrantyTypeArrayIterator() {
    return (this.WarrantyTypeArray == null) ? null : this.WarrantyTypeArray.iterator();
  }

  public void addToWarrantyTypeArray(int elem) {
    if (this.WarrantyTypeArray == null) {
      this.WarrantyTypeArray = new ArrayList<Integer>();
    }
    this.WarrantyTypeArray.add(elem);
  }

  public List<Integer> getWarrantyTypeArray() {
    return this.WarrantyTypeArray;
  }

  public SearchCondition setWarrantyTypeArray(List<Integer> WarrantyTypeArray) {
    this.WarrantyTypeArray = WarrantyTypeArray;
    return this;
  }

  public void unsetWarrantyTypeArray() {
    this.WarrantyTypeArray = null;
  }

  /** Returns true if field WarrantyTypeArray is set (has been assigned a value) and false otherwise */
  public boolean isSetWarrantyTypeArray() {
    return this.WarrantyTypeArray != null;
  }

  public void setWarrantyTypeArrayIsSet(boolean value) {
    if (!value) {
      this.WarrantyTypeArray = null;
    }
  }

  public int getIsTop() {
    return this.IsTop;
  }

  public SearchCondition setIsTop(int IsTop) {
    this.IsTop = IsTop;
    setIsTopIsSet(true);
    return this;
  }

  public void unsetIsTop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISTOP_ISSET_ID);
  }

  /** Returns true if field IsTop is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTop() {
    return EncodingUtils.testBit(__isset_bitfield, __ISTOP_ISSET_ID);
  }

  public void setIsTopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISTOP_ISSET_ID, value);
  }

  public int getIsActivity() {
    return this.IsActivity;
  }

  public SearchCondition setIsActivity(int IsActivity) {
    this.IsActivity = IsActivity;
    setIsActivityIsSet(true);
    return this;
  }

  public void unsetIsActivity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISACTIVITY_ISSET_ID);
  }

  /** Returns true if field IsActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActivity() {
    return EncodingUtils.testBit(__isset_bitfield, __ISACTIVITY_ISSET_ID);
  }

  public void setIsActivityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISACTIVITY_ISSET_ID, value);
  }

  public int getIsBangmai() {
    return this.IsBangmai;
  }

  public SearchCondition setIsBangmai(int IsBangmai) {
    this.IsBangmai = IsBangmai;
    setIsBangmaiIsSet(true);
    return this;
  }

  public void unsetIsBangmai() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBANGMAI_ISSET_ID);
  }

  /** Returns true if field IsBangmai is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBangmai() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBANGMAI_ISSET_ID);
  }

  public void setIsBangmaiIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBANGMAI_ISSET_ID, value);
  }

  public int getIsBangmaiche() {
    return this.IsBangmaiche;
  }

  public SearchCondition setIsBangmaiche(int IsBangmaiche) {
    this.IsBangmaiche = IsBangmaiche;
    setIsBangmaicheIsSet(true);
    return this;
  }

  public void unsetIsBangmaiche() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISBANGMAICHE_ISSET_ID);
  }

  /** Returns true if field IsBangmaiche is set (has been assigned a value) and false otherwise */
  public boolean isSetIsBangmaiche() {
    return EncodingUtils.testBit(__isset_bitfield, __ISBANGMAICHE_ISSET_ID);
  }

  public void setIsBangmaicheIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISBANGMAICHE_ISSET_ID, value);
  }

  public int getIsShowMr() {
    return this.IsShowMr;
  }

  public SearchCondition setIsShowMr(int IsShowMr) {
    this.IsShowMr = IsShowMr;
    setIsShowMrIsSet(true);
    return this;
  }

  public void unsetIsShowMr() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSHOWMR_ISSET_ID);
  }

  /** Returns true if field IsShowMr is set (has been assigned a value) and false otherwise */
  public boolean isSetIsShowMr() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSHOWMR_ISSET_ID);
  }

  public void setIsShowMrIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSHOWMR_ISSET_ID, value);
  }

  public int getIsCarId() {
    return this.IsCarId;
  }

  public SearchCondition setIsCarId(int IsCarId) {
    this.IsCarId = IsCarId;
    setIsCarIdIsSet(true);
    return this;
  }

  public void unsetIsCarId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCARID_ISSET_ID);
  }

  /** Returns true if field IsCarId is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCarId() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCARID_ISSET_ID);
  }

  public void setIsCarIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCARID_ISSET_ID, value);
  }

  public int getIsB2B() {
    return this.IsB2B;
  }

  public SearchCondition setIsB2B(int IsB2B) {
    this.IsB2B = IsB2B;
    setIsB2BIsSet(true);
    return this;
  }

  public void unsetIsB2B() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISB2B_ISSET_ID);
  }

  /** Returns true if field IsB2B is set (has been assigned a value) and false otherwise */
  public boolean isSetIsB2B() {
    return EncodingUtils.testBit(__isset_bitfield, __ISB2B_ISSET_ID);
  }

  public void setIsB2BIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISB2B_ISSET_ID, value);
  }

  public int getCrmCustomerIdArraySize() {
    return (this.CrmCustomerIdArray == null) ? 0 : this.CrmCustomerIdArray.size();
  }

  public java.util.Iterator<Integer> getCrmCustomerIdArrayIterator() {
    return (this.CrmCustomerIdArray == null) ? null : this.CrmCustomerIdArray.iterator();
  }

  public void addToCrmCustomerIdArray(int elem) {
    if (this.CrmCustomerIdArray == null) {
      this.CrmCustomerIdArray = new ArrayList<Integer>();
    }
    this.CrmCustomerIdArray.add(elem);
  }

  public List<Integer> getCrmCustomerIdArray() {
    return this.CrmCustomerIdArray;
  }

  public SearchCondition setCrmCustomerIdArray(List<Integer> CrmCustomerIdArray) {
    this.CrmCustomerIdArray = CrmCustomerIdArray;
    return this;
  }

  public void unsetCrmCustomerIdArray() {
    this.CrmCustomerIdArray = null;
  }

  /** Returns true if field CrmCustomerIdArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCrmCustomerIdArray() {
    return this.CrmCustomerIdArray != null;
  }

  public void setCrmCustomerIdArrayIsSet(boolean value) {
    if (!value) {
      this.CrmCustomerIdArray = null;
    }
  }

  public int getIsCheckReportJson() {
    return this.IsCheckReportJson;
  }

  public SearchCondition setIsCheckReportJson(int IsCheckReportJson) {
    this.IsCheckReportJson = IsCheckReportJson;
    setIsCheckReportJsonIsSet(true);
    return this;
  }

  public void unsetIsCheckReportJson() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISCHECKREPORTJSON_ISSET_ID);
  }

  /** Returns true if field IsCheckReportJson is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCheckReportJson() {
    return EncodingUtils.testBit(__isset_bitfield, __ISCHECKREPORTJSON_ISSET_ID);
  }

  public void setIsCheckReportJsonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISCHECKREPORTJSON_ISSET_ID, value);
  }

  public int getEnvirStandardArraySize() {
    return (this.EnvirStandardArray == null) ? 0 : this.EnvirStandardArray.size();
  }

  public java.util.Iterator<Integer> getEnvirStandardArrayIterator() {
    return (this.EnvirStandardArray == null) ? null : this.EnvirStandardArray.iterator();
  }

  public void addToEnvirStandardArray(int elem) {
    if (this.EnvirStandardArray == null) {
      this.EnvirStandardArray = new ArrayList<Integer>();
    }
    this.EnvirStandardArray.add(elem);
  }

  public List<Integer> getEnvirStandardArray() {
    return this.EnvirStandardArray;
  }

  public SearchCondition setEnvirStandardArray(List<Integer> EnvirStandardArray) {
    this.EnvirStandardArray = EnvirStandardArray;
    return this;
  }

  public void unsetEnvirStandardArray() {
    this.EnvirStandardArray = null;
  }

  /** Returns true if field EnvirStandardArray is set (has been assigned a value) and false otherwise */
  public boolean isSetEnvirStandardArray() {
    return this.EnvirStandardArray != null;
  }

  public void setEnvirStandardArrayIsSet(boolean value) {
    if (!value) {
      this.EnvirStandardArray = null;
    }
  }

  public int getConsumptionLowerArraySize() {
    return (this.ConsumptionLowerArray == null) ? 0 : this.ConsumptionLowerArray.size();
  }

  public java.util.Iterator<Double> getConsumptionLowerArrayIterator() {
    return (this.ConsumptionLowerArray == null) ? null : this.ConsumptionLowerArray.iterator();
  }

  public void addToConsumptionLowerArray(double elem) {
    if (this.ConsumptionLowerArray == null) {
      this.ConsumptionLowerArray = new ArrayList<Double>();
    }
    this.ConsumptionLowerArray.add(elem);
  }

  public List<Double> getConsumptionLowerArray() {
    return this.ConsumptionLowerArray;
  }

  public SearchCondition setConsumptionLowerArray(List<Double> ConsumptionLowerArray) {
    this.ConsumptionLowerArray = ConsumptionLowerArray;
    return this;
  }

  public void unsetConsumptionLowerArray() {
    this.ConsumptionLowerArray = null;
  }

  /** Returns true if field ConsumptionLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumptionLowerArray() {
    return this.ConsumptionLowerArray != null;
  }

  public void setConsumptionLowerArrayIsSet(boolean value) {
    if (!value) {
      this.ConsumptionLowerArray = null;
    }
  }

  public int getConsumptionHighArraySize() {
    return (this.ConsumptionHighArray == null) ? 0 : this.ConsumptionHighArray.size();
  }

  public java.util.Iterator<Double> getConsumptionHighArrayIterator() {
    return (this.ConsumptionHighArray == null) ? null : this.ConsumptionHighArray.iterator();
  }

  public void addToConsumptionHighArray(double elem) {
    if (this.ConsumptionHighArray == null) {
      this.ConsumptionHighArray = new ArrayList<Double>();
    }
    this.ConsumptionHighArray.add(elem);
  }

  public List<Double> getConsumptionHighArray() {
    return this.ConsumptionHighArray;
  }

  public SearchCondition setConsumptionHighArray(List<Double> ConsumptionHighArray) {
    this.ConsumptionHighArray = ConsumptionHighArray;
    return this;
  }

  public void unsetConsumptionHighArray() {
    this.ConsumptionHighArray = null;
  }

  /** Returns true if field ConsumptionHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumptionHighArray() {
    return this.ConsumptionHighArray != null;
  }

  public void setConsumptionHighArrayIsSet(boolean value) {
    if (!value) {
      this.ConsumptionHighArray = null;
    }
  }

  public int getOilTypeArraySize() {
    return (this.OilTypeArray == null) ? 0 : this.OilTypeArray.size();
  }

  public java.util.Iterator<Integer> getOilTypeArrayIterator() {
    return (this.OilTypeArray == null) ? null : this.OilTypeArray.iterator();
  }

  public void addToOilTypeArray(int elem) {
    if (this.OilTypeArray == null) {
      this.OilTypeArray = new ArrayList<Integer>();
    }
    this.OilTypeArray.add(elem);
  }

  public List<Integer> getOilTypeArray() {
    return this.OilTypeArray;
  }

  public SearchCondition setOilTypeArray(List<Integer> OilTypeArray) {
    this.OilTypeArray = OilTypeArray;
    return this;
  }

  public void unsetOilTypeArray() {
    this.OilTypeArray = null;
  }

  /** Returns true if field OilTypeArray is set (has been assigned a value) and false otherwise */
  public boolean isSetOilTypeArray() {
    return this.OilTypeArray != null;
  }

  public void setOilTypeArrayIsSet(boolean value) {
    if (!value) {
      this.OilTypeArray = null;
    }
  }

  public int getEngineLocationArraySize() {
    return (this.EngineLocationArray == null) ? 0 : this.EngineLocationArray.size();
  }

  public java.util.Iterator<Integer> getEngineLocationArrayIterator() {
    return (this.EngineLocationArray == null) ? null : this.EngineLocationArray.iterator();
  }

  public void addToEngineLocationArray(int elem) {
    if (this.EngineLocationArray == null) {
      this.EngineLocationArray = new ArrayList<Integer>();
    }
    this.EngineLocationArray.add(elem);
  }

  public List<Integer> getEngineLocationArray() {
    return this.EngineLocationArray;
  }

  public SearchCondition setEngineLocationArray(List<Integer> EngineLocationArray) {
    this.EngineLocationArray = EngineLocationArray;
    return this;
  }

  public void unsetEngineLocationArray() {
    this.EngineLocationArray = null;
  }

  /** Returns true if field EngineLocationArray is set (has been assigned a value) and false otherwise */
  public boolean isSetEngineLocationArray() {
    return this.EngineLocationArray != null;
  }

  public void setEngineLocationArrayIsSet(boolean value) {
    if (!value) {
      this.EngineLocationArray = null;
    }
  }

  public int getBodyDoorsLowerArraySize() {
    return (this.BodyDoorsLowerArray == null) ? 0 : this.BodyDoorsLowerArray.size();
  }

  public java.util.Iterator<Integer> getBodyDoorsLowerArrayIterator() {
    return (this.BodyDoorsLowerArray == null) ? null : this.BodyDoorsLowerArray.iterator();
  }

  public void addToBodyDoorsLowerArray(int elem) {
    if (this.BodyDoorsLowerArray == null) {
      this.BodyDoorsLowerArray = new ArrayList<Integer>();
    }
    this.BodyDoorsLowerArray.add(elem);
  }

  public List<Integer> getBodyDoorsLowerArray() {
    return this.BodyDoorsLowerArray;
  }

  public SearchCondition setBodyDoorsLowerArray(List<Integer> BodyDoorsLowerArray) {
    this.BodyDoorsLowerArray = BodyDoorsLowerArray;
    return this;
  }

  public void unsetBodyDoorsLowerArray() {
    this.BodyDoorsLowerArray = null;
  }

  /** Returns true if field BodyDoorsLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyDoorsLowerArray() {
    return this.BodyDoorsLowerArray != null;
  }

  public void setBodyDoorsLowerArrayIsSet(boolean value) {
    if (!value) {
      this.BodyDoorsLowerArray = null;
    }
  }

  public int getBodyDoorsHighArraySize() {
    return (this.BodyDoorsHighArray == null) ? 0 : this.BodyDoorsHighArray.size();
  }

  public java.util.Iterator<Integer> getBodyDoorsHighArrayIterator() {
    return (this.BodyDoorsHighArray == null) ? null : this.BodyDoorsHighArray.iterator();
  }

  public void addToBodyDoorsHighArray(int elem) {
    if (this.BodyDoorsHighArray == null) {
      this.BodyDoorsHighArray = new ArrayList<Integer>();
    }
    this.BodyDoorsHighArray.add(elem);
  }

  public List<Integer> getBodyDoorsHighArray() {
    return this.BodyDoorsHighArray;
  }

  public SearchCondition setBodyDoorsHighArray(List<Integer> BodyDoorsHighArray) {
    this.BodyDoorsHighArray = BodyDoorsHighArray;
    return this;
  }

  public void unsetBodyDoorsHighArray() {
    this.BodyDoorsHighArray = null;
  }

  /** Returns true if field BodyDoorsHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetBodyDoorsHighArray() {
    return this.BodyDoorsHighArray != null;
  }

  public void setBodyDoorsHighArrayIsSet(boolean value) {
    if (!value) {
      this.BodyDoorsHighArray = null;
    }
  }

  public int getSeatNumLowerArraySize() {
    return (this.SeatNumLowerArray == null) ? 0 : this.SeatNumLowerArray.size();
  }

  public java.util.Iterator<Integer> getSeatNumLowerArrayIterator() {
    return (this.SeatNumLowerArray == null) ? null : this.SeatNumLowerArray.iterator();
  }

  public void addToSeatNumLowerArray(int elem) {
    if (this.SeatNumLowerArray == null) {
      this.SeatNumLowerArray = new ArrayList<Integer>();
    }
    this.SeatNumLowerArray.add(elem);
  }

  public List<Integer> getSeatNumLowerArray() {
    return this.SeatNumLowerArray;
  }

  public SearchCondition setSeatNumLowerArray(List<Integer> SeatNumLowerArray) {
    this.SeatNumLowerArray = SeatNumLowerArray;
    return this;
  }

  public void unsetSeatNumLowerArray() {
    this.SeatNumLowerArray = null;
  }

  /** Returns true if field SeatNumLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatNumLowerArray() {
    return this.SeatNumLowerArray != null;
  }

  public void setSeatNumLowerArrayIsSet(boolean value) {
    if (!value) {
      this.SeatNumLowerArray = null;
    }
  }

  public int getSeatNumHighArraySize() {
    return (this.SeatNumHighArray == null) ? 0 : this.SeatNumHighArray.size();
  }

  public java.util.Iterator<Integer> getSeatNumHighArrayIterator() {
    return (this.SeatNumHighArray == null) ? null : this.SeatNumHighArray.iterator();
  }

  public void addToSeatNumHighArray(int elem) {
    if (this.SeatNumHighArray == null) {
      this.SeatNumHighArray = new ArrayList<Integer>();
    }
    this.SeatNumHighArray.add(elem);
  }

  public List<Integer> getSeatNumHighArray() {
    return this.SeatNumHighArray;
  }

  public SearchCondition setSeatNumHighArray(List<Integer> SeatNumHighArray) {
    this.SeatNumHighArray = SeatNumHighArray;
    return this;
  }

  public void unsetSeatNumHighArray() {
    this.SeatNumHighArray = null;
  }

  /** Returns true if field SeatNumHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatNumHighArray() {
    return this.SeatNumHighArray != null;
  }

  public void setSeatNumHighArrayIsSet(boolean value) {
    if (!value) {
      this.SeatNumHighArray = null;
    }
  }

  public int getIsWagon() {
    return this.IsWagon;
  }

  public SearchCondition setIsWagon(int IsWagon) {
    this.IsWagon = IsWagon;
    setIsWagonIsSet(true);
    return this;
  }

  public void unsetIsWagon() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISWAGON_ISSET_ID);
  }

  /** Returns true if field IsWagon is set (has been assigned a value) and false otherwise */
  public boolean isSetIsWagon() {
    return EncodingUtils.testBit(__isset_bitfield, __ISWAGON_ISSET_ID);
  }

  public void setIsWagonIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISWAGON_ISSET_ID, value);
  }

  public int getDriveTypeArraySize() {
    return (this.DriveTypeArray == null) ? 0 : this.DriveTypeArray.size();
  }

  public java.util.Iterator<Integer> getDriveTypeArrayIterator() {
    return (this.DriveTypeArray == null) ? null : this.DriveTypeArray.iterator();
  }

  public void addToDriveTypeArray(int elem) {
    if (this.DriveTypeArray == null) {
      this.DriveTypeArray = new ArrayList<Integer>();
    }
    this.DriveTypeArray.add(elem);
  }

  public List<Integer> getDriveTypeArray() {
    return this.DriveTypeArray;
  }

  public SearchCondition setDriveTypeArray(List<Integer> DriveTypeArray) {
    this.DriveTypeArray = DriveTypeArray;
    return this;
  }

  public void unsetDriveTypeArray() {
    this.DriveTypeArray = null;
  }

  /** Returns true if field DriveTypeArray is set (has been assigned a value) and false otherwise */
  public boolean isSetDriveTypeArray() {
    return this.DriveTypeArray != null;
  }

  public void setDriveTypeArrayIsSet(boolean value) {
    if (!value) {
      this.DriveTypeArray = null;
    }
  }

  public int getCsBodyFormArraySize() {
    return (this.CsBodyFormArray == null) ? 0 : this.CsBodyFormArray.size();
  }

  public java.util.Iterator<Integer> getCsBodyFormArrayIterator() {
    return (this.CsBodyFormArray == null) ? null : this.CsBodyFormArray.iterator();
  }

  public void addToCsBodyFormArray(int elem) {
    if (this.CsBodyFormArray == null) {
      this.CsBodyFormArray = new ArrayList<Integer>();
    }
    this.CsBodyFormArray.add(elem);
  }

  public List<Integer> getCsBodyFormArray() {
    return this.CsBodyFormArray;
  }

  public SearchCondition setCsBodyFormArray(List<Integer> CsBodyFormArray) {
    this.CsBodyFormArray = CsBodyFormArray;
    return this;
  }

  public void unsetCsBodyFormArray() {
    this.CsBodyFormArray = null;
  }

  /** Returns true if field CsBodyFormArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCsBodyFormArray() {
    return this.CsBodyFormArray != null;
  }

  public void setCsBodyFormArrayIsSet(boolean value) {
    if (!value) {
      this.CsBodyFormArray = null;
    }
  }

  public int getCarLevelArraySize() {
    return (this.CarLevelArray == null) ? 0 : this.CarLevelArray.size();
  }

  public java.util.Iterator<Integer> getCarLevelArrayIterator() {
    return (this.CarLevelArray == null) ? null : this.CarLevelArray.iterator();
  }

  public void addToCarLevelArray(int elem) {
    if (this.CarLevelArray == null) {
      this.CarLevelArray = new ArrayList<Integer>();
    }
    this.CarLevelArray.add(elem);
  }

  public List<Integer> getCarLevelArray() {
    return this.CarLevelArray;
  }

  public SearchCondition setCarLevelArray(List<Integer> CarLevelArray) {
    this.CarLevelArray = CarLevelArray;
    return this;
  }

  public void unsetCarLevelArray() {
    this.CarLevelArray = null;
  }

  /** Returns true if field CarLevelArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarLevelArray() {
    return this.CarLevelArray != null;
  }

  public void setCarLevelArrayIsSet(boolean value) {
    if (!value) {
      this.CarLevelArray = null;
    }
  }

  public int getCarLevelSecondArraySize() {
    return (this.CarLevelSecondArray == null) ? 0 : this.CarLevelSecondArray.size();
  }

  public java.util.Iterator<Integer> getCarLevelSecondArrayIterator() {
    return (this.CarLevelSecondArray == null) ? null : this.CarLevelSecondArray.iterator();
  }

  public void addToCarLevelSecondArray(int elem) {
    if (this.CarLevelSecondArray == null) {
      this.CarLevelSecondArray = new ArrayList<Integer>();
    }
    this.CarLevelSecondArray.add(elem);
  }

  public List<Integer> getCarLevelSecondArray() {
    return this.CarLevelSecondArray;
  }

  public SearchCondition setCarLevelSecondArray(List<Integer> CarLevelSecondArray) {
    this.CarLevelSecondArray = CarLevelSecondArray;
    return this;
  }

  public void unsetCarLevelSecondArray() {
    this.CarLevelSecondArray = null;
  }

  /** Returns true if field CarLevelSecondArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarLevelSecondArray() {
    return this.CarLevelSecondArray != null;
  }

  public void setCarLevelSecondArrayIsSet(boolean value) {
    if (!value) {
      this.CarLevelSecondArray = null;
    }
  }

  public int getCarYearArraySize() {
    return (this.CarYearArray == null) ? 0 : this.CarYearArray.size();
  }

  public java.util.Iterator<String> getCarYearArrayIterator() {
    return (this.CarYearArray == null) ? null : this.CarYearArray.iterator();
  }

  public void addToCarYearArray(String elem) {
    if (this.CarYearArray == null) {
      this.CarYearArray = new ArrayList<String>();
    }
    this.CarYearArray.add(elem);
  }

  public List<String> getCarYearArray() {
    return this.CarYearArray;
  }

  public SearchCondition setCarYearArray(List<String> CarYearArray) {
    this.CarYearArray = CarYearArray;
    return this;
  }

  public void unsetCarYearArray() {
    this.CarYearArray = null;
  }

  /** Returns true if field CarYearArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarYearArray() {
    return this.CarYearArray != null;
  }

  public void setCarYearArrayIsSet(boolean value) {
    if (!value) {
      this.CarYearArray = null;
    }
  }

  public int getMainBrandArraySize() {
    return (this.MainBrandArray == null) ? 0 : this.MainBrandArray.size();
  }

  public java.util.Iterator<Integer> getMainBrandArrayIterator() {
    return (this.MainBrandArray == null) ? null : this.MainBrandArray.iterator();
  }

  public void addToMainBrandArray(int elem) {
    if (this.MainBrandArray == null) {
      this.MainBrandArray = new ArrayList<Integer>();
    }
    this.MainBrandArray.add(elem);
  }

  public List<Integer> getMainBrandArray() {
    return this.MainBrandArray;
  }

  public SearchCondition setMainBrandArray(List<Integer> MainBrandArray) {
    this.MainBrandArray = MainBrandArray;
    return this;
  }

  public void unsetMainBrandArray() {
    this.MainBrandArray = null;
  }

  /** Returns true if field MainBrandArray is set (has been assigned a value) and false otherwise */
  public boolean isSetMainBrandArray() {
    return this.MainBrandArray != null;
  }

  public void setMainBrandArrayIsSet(boolean value) {
    if (!value) {
      this.MainBrandArray = null;
    }
  }

  public int getBrandArraySize() {
    return (this.BrandArray == null) ? 0 : this.BrandArray.size();
  }

  public java.util.Iterator<Integer> getBrandArrayIterator() {
    return (this.BrandArray == null) ? null : this.BrandArray.iterator();
  }

  public void addToBrandArray(int elem) {
    if (this.BrandArray == null) {
      this.BrandArray = new ArrayList<Integer>();
    }
    this.BrandArray.add(elem);
  }

  public List<Integer> getBrandArray() {
    return this.BrandArray;
  }

  public SearchCondition setBrandArray(List<Integer> BrandArray) {
    this.BrandArray = BrandArray;
    return this;
  }

  public void unsetBrandArray() {
    this.BrandArray = null;
  }

  /** Returns true if field BrandArray is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandArray() {
    return this.BrandArray != null;
  }

  public void setBrandArrayIsSet(boolean value) {
    if (!value) {
      this.BrandArray = null;
    }
  }

  public int getCarSerialArraySize() {
    return (this.CarSerialArray == null) ? 0 : this.CarSerialArray.size();
  }

  public java.util.Iterator<Integer> getCarSerialArrayIterator() {
    return (this.CarSerialArray == null) ? null : this.CarSerialArray.iterator();
  }

  public void addToCarSerialArray(int elem) {
    if (this.CarSerialArray == null) {
      this.CarSerialArray = new ArrayList<Integer>();
    }
    this.CarSerialArray.add(elem);
  }

  public List<Integer> getCarSerialArray() {
    return this.CarSerialArray;
  }

  public SearchCondition setCarSerialArray(List<Integer> CarSerialArray) {
    this.CarSerialArray = CarSerialArray;
    return this;
  }

  public void unsetCarSerialArray() {
    this.CarSerialArray = null;
  }

  /** Returns true if field CarSerialArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarSerialArray() {
    return this.CarSerialArray != null;
  }

  public void setCarSerialArrayIsSet(boolean value) {
    if (!value) {
      this.CarSerialArray = null;
    }
  }

  public int getCarIDArraySize() {
    return (this.CarIDArray == null) ? 0 : this.CarIDArray.size();
  }

  public java.util.Iterator<Integer> getCarIDArrayIterator() {
    return (this.CarIDArray == null) ? null : this.CarIDArray.iterator();
  }

  public void addToCarIDArray(int elem) {
    if (this.CarIDArray == null) {
      this.CarIDArray = new ArrayList<Integer>();
    }
    this.CarIDArray.add(elem);
  }

  public List<Integer> getCarIDArray() {
    return this.CarIDArray;
  }

  public SearchCondition setCarIDArray(List<Integer> CarIDArray) {
    this.CarIDArray = CarIDArray;
    return this;
  }

  public void unsetCarIDArray() {
    this.CarIDArray = null;
  }

  /** Returns true if field CarIDArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCarIDArray() {
    return this.CarIDArray != null;
  }

  public void setCarIDArrayIsSet(boolean value) {
    if (!value) {
      this.CarIDArray = null;
    }
  }

  public int getGearBoxTypeArraySize() {
    return (this.GearBoxTypeArray == null) ? 0 : this.GearBoxTypeArray.size();
  }

  public java.util.Iterator<Integer> getGearBoxTypeArrayIterator() {
    return (this.GearBoxTypeArray == null) ? null : this.GearBoxTypeArray.iterator();
  }

  public void addToGearBoxTypeArray(int elem) {
    if (this.GearBoxTypeArray == null) {
      this.GearBoxTypeArray = new ArrayList<Integer>();
    }
    this.GearBoxTypeArray.add(elem);
  }

  public List<Integer> getGearBoxTypeArray() {
    return this.GearBoxTypeArray;
  }

  public SearchCondition setGearBoxTypeArray(List<Integer> GearBoxTypeArray) {
    this.GearBoxTypeArray = GearBoxTypeArray;
    return this;
  }

  public void unsetGearBoxTypeArray() {
    this.GearBoxTypeArray = null;
  }

  /** Returns true if field GearBoxTypeArray is set (has been assigned a value) and false otherwise */
  public boolean isSetGearBoxTypeArray() {
    return this.GearBoxTypeArray != null;
  }

  public void setGearBoxTypeArrayIsSet(boolean value) {
    if (!value) {
      this.GearBoxTypeArray = null;
    }
  }

  public int getExhaustLevelLowerArraySize() {
    return (this.ExhaustLevelLowerArray == null) ? 0 : this.ExhaustLevelLowerArray.size();
  }

  public java.util.Iterator<Double> getExhaustLevelLowerArrayIterator() {
    return (this.ExhaustLevelLowerArray == null) ? null : this.ExhaustLevelLowerArray.iterator();
  }

  public void addToExhaustLevelLowerArray(double elem) {
    if (this.ExhaustLevelLowerArray == null) {
      this.ExhaustLevelLowerArray = new ArrayList<Double>();
    }
    this.ExhaustLevelLowerArray.add(elem);
  }

  public List<Double> getExhaustLevelLowerArray() {
    return this.ExhaustLevelLowerArray;
  }

  public SearchCondition setExhaustLevelLowerArray(List<Double> ExhaustLevelLowerArray) {
    this.ExhaustLevelLowerArray = ExhaustLevelLowerArray;
    return this;
  }

  public void unsetExhaustLevelLowerArray() {
    this.ExhaustLevelLowerArray = null;
  }

  /** Returns true if field ExhaustLevelLowerArray is set (has been assigned a value) and false otherwise */
  public boolean isSetExhaustLevelLowerArray() {
    return this.ExhaustLevelLowerArray != null;
  }

  public void setExhaustLevelLowerArrayIsSet(boolean value) {
    if (!value) {
      this.ExhaustLevelLowerArray = null;
    }
  }

  public int getExhaustLevelHighArraySize() {
    return (this.ExhaustLevelHighArray == null) ? 0 : this.ExhaustLevelHighArray.size();
  }

  public java.util.Iterator<Double> getExhaustLevelHighArrayIterator() {
    return (this.ExhaustLevelHighArray == null) ? null : this.ExhaustLevelHighArray.iterator();
  }

  public void addToExhaustLevelHighArray(double elem) {
    if (this.ExhaustLevelHighArray == null) {
      this.ExhaustLevelHighArray = new ArrayList<Double>();
    }
    this.ExhaustLevelHighArray.add(elem);
  }

  public List<Double> getExhaustLevelHighArray() {
    return this.ExhaustLevelHighArray;
  }

  public SearchCondition setExhaustLevelHighArray(List<Double> ExhaustLevelHighArray) {
    this.ExhaustLevelHighArray = ExhaustLevelHighArray;
    return this;
  }

  public void unsetExhaustLevelHighArray() {
    this.ExhaustLevelHighArray = null;
  }

  /** Returns true if field ExhaustLevelHighArray is set (has been assigned a value) and false otherwise */
  public boolean isSetExhaustLevelHighArray() {
    return this.ExhaustLevelHighArray != null;
  }

  public void setExhaustLevelHighArrayIsSet(boolean value) {
    if (!value) {
      this.ExhaustLevelHighArray = null;
    }
  }

  public int getExhaustLevelArraySize() {
    return (this.ExhaustLevelArray == null) ? 0 : this.ExhaustLevelArray.size();
  }

  public java.util.Iterator<Integer> getExhaustLevelArrayIterator() {
    return (this.ExhaustLevelArray == null) ? null : this.ExhaustLevelArray.iterator();
  }

  public void addToExhaustLevelArray(int elem) {
    if (this.ExhaustLevelArray == null) {
      this.ExhaustLevelArray = new ArrayList<Integer>();
    }
    this.ExhaustLevelArray.add(elem);
  }

  public List<Integer> getExhaustLevelArray() {
    return this.ExhaustLevelArray;
  }

  public SearchCondition setExhaustLevelArray(List<Integer> ExhaustLevelArray) {
    this.ExhaustLevelArray = ExhaustLevelArray;
    return this;
  }

  public void unsetExhaustLevelArray() {
    this.ExhaustLevelArray = null;
  }

  /** Returns true if field ExhaustLevelArray is set (has been assigned a value) and false otherwise */
  public boolean isSetExhaustLevelArray() {
    return this.ExhaustLevelArray != null;
  }

  public void setExhaustLevelArrayIsSet(boolean value) {
    if (!value) {
      this.ExhaustLevelArray = null;
    }
  }

  public int getCountryArraySize() {
    return (this.CountryArray == null) ? 0 : this.CountryArray.size();
  }

  public java.util.Iterator<Integer> getCountryArrayIterator() {
    return (this.CountryArray == null) ? null : this.CountryArray.iterator();
  }

  public void addToCountryArray(int elem) {
    if (this.CountryArray == null) {
      this.CountryArray = new ArrayList<Integer>();
    }
    this.CountryArray.add(elem);
  }

  public List<Integer> getCountryArray() {
    return this.CountryArray;
  }

  public SearchCondition setCountryArray(List<Integer> CountryArray) {
    this.CountryArray = CountryArray;
    return this;
  }

  public void unsetCountryArray() {
    this.CountryArray = null;
  }

  /** Returns true if field CountryArray is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryArray() {
    return this.CountryArray != null;
  }

  public void setCountryArrayIsSet(boolean value) {
    if (!value) {
      this.CountryArray = null;
    }
  }

  public int getBrandAttrArraySize() {
    return (this.BrandAttrArray == null) ? 0 : this.BrandAttrArray.size();
  }

  public java.util.Iterator<Integer> getBrandAttrArrayIterator() {
    return (this.BrandAttrArray == null) ? null : this.BrandAttrArray.iterator();
  }

  public void addToBrandAttrArray(int elem) {
    if (this.BrandAttrArray == null) {
      this.BrandAttrArray = new ArrayList<Integer>();
    }
    this.BrandAttrArray.add(elem);
  }

  public List<Integer> getBrandAttrArray() {
    return this.BrandAttrArray;
  }

  public SearchCondition setBrandAttrArray(List<Integer> BrandAttrArray) {
    this.BrandAttrArray = BrandAttrArray;
    return this;
  }

  public void unsetBrandAttrArray() {
    this.BrandAttrArray = null;
  }

  /** Returns true if field BrandAttrArray is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandAttrArray() {
    return this.BrandAttrArray != null;
  }

  public void setBrandAttrArrayIsSet(boolean value) {
    if (!value) {
      this.BrandAttrArray = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMON_FLAG:
      if (value == null) {
        unsetCommonFlag();
      } else {
        setCommonFlag((Integer)value);
      }
      break;

    case REQUEST_SOURCE:
      if (value == null) {
        unsetRequestSource();
      } else {
        setRequestSource((Integer)value);
      }
      break;

    case RETURN_FIELD_ARRAY:
      if (value == null) {
        unsetReturnFieldArray();
      } else {
        setReturnFieldArray((List<String>)value);
      }
      break;

    case ORDER_BY_FIELD_ARRAY:
      if (value == null) {
        unsetOrderByFieldArray();
      } else {
        setOrderByFieldArray((List<String>)value);
      }
      break;

    case ORDER_BY_IS_DESCARRAY:
      if (value == null) {
        unsetOrderByIsDESCArray();
      } else {
        setOrderByIsDESCArray((List<Boolean>)value);
      }
      break;

    case SORT_BOOST_FLAG:
      if (value == null) {
        unsetSortBoostFlag();
      } else {
        setSortBoostFlag((Integer)value);
      }
      break;

    case PAGE_SIZE:
      if (value == null) {
        unsetPageSize();
      } else {
        setPageSize((Integer)value);
      }
      break;

    case PAGE_INDEX:
      if (value == null) {
        unsetPageIndex();
      } else {
        setPageIndex((Integer)value);
      }
      break;

    case DISTANCE_KM:
      if (value == null) {
        unsetDistanceKm();
      } else {
        setDistanceKm((Double)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((String)value);
      }
      break;

    case IS_COUNT_SEARCH:
      if (value == null) {
        unsetIsCountSearch();
      } else {
        setIsCountSearch((Boolean)value);
      }
      break;

    case REQUEST_PARAMETERS_LOG:
      if (value == null) {
        unsetRequestParametersLog();
      } else {
        setRequestParametersLog((String)value);
      }
      break;

    case AGGR_FIELD_LIST:
      if (value == null) {
        unsetAggrFieldList();
      } else {
        setAggrFieldList((List<AggrCondition>)value);
      }
      break;

    case UCAR_ID_ARRAY:
      if (value == null) {
        unsetUcarIdArray();
      } else {
        setUcarIdArray((List<Integer>)value);
      }
      break;

    case SITE_ID:
      if (value == null) {
        unsetSiteId();
      } else {
        setSiteId((List<Integer>)value);
      }
      break;

    case UCAR_STATUS_ARRAY:
      if (value == null) {
        unsetUcarStatusArray();
      } else {
        setUcarStatusArray((List<Integer>)value);
      }
      break;

    case NO_UCAR_ID_ARRAY:
      if (value == null) {
        unsetNoUcarIdArray();
      } else {
        setNoUcarIdArray((List<Integer>)value);
      }
      break;

    case IS_AUTHENTICATED:
      if (value == null) {
        unsetIsAuthenticated();
      } else {
        setIsAuthenticated((Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((Integer)value);
      }
      break;

    case USER_ID_ARRAY:
      if (value == null) {
        unsetUserIdArray();
      } else {
        setUserIdArray((List<Integer>)value);
      }
      break;

    case NO_USER_ID_ARRAY:
      if (value == null) {
        unsetNoUserIdArray();
      } else {
        setNoUserIdArray((List<Integer>)value);
      }
      break;

    case UCAR_SERIAL_NUMBER_ARRAY:
      if (value == null) {
        unsetUcarSerialNumberArray();
      } else {
        setUcarSerialNumberArray((List<String>)value);
      }
      break;

    case KEY_WORD:
      if (value == null) {
        unsetKeyWord();
      } else {
        setKeyWord((String)value);
      }
      break;

    case COLOR_ARRAY:
      if (value == null) {
        unsetColorArray();
      } else {
        setColorArray((List<String>)value);
      }
      break;

    case CAR_SOURCE1_L:
      if (value == null) {
        unsetCarSource1L();
      } else {
        setCarSource1L((Integer)value);
      }
      break;

    case PICTURE_COUNT:
      if (value == null) {
        unsetPictureCount();
      } else {
        setPictureCount((Integer)value);
      }
      break;

    case BIG_AREA_ID_ARRAY:
      if (value == null) {
        unsetBigAreaIdArray();
      } else {
        setBigAreaIdArray((List<Integer>)value);
      }
      break;

    case PROVINCE_ID_ARRAY:
      if (value == null) {
        unsetProvinceIdArray();
      } else {
        setProvinceIdArray((List<Integer>)value);
      }
      break;

    case CITY_ID_ARRAY:
      if (value == null) {
        unsetCityIdArray();
      } else {
        setCityIdArray((List<Integer>)value);
      }
      break;

    case NO_CITY_ID_ARRAY:
      if (value == null) {
        unsetNoCityIdArray();
      } else {
        setNoCityIdArray((List<Integer>)value);
      }
      break;

    case RELATE_CITY_ARRAY:
      if (value == null) {
        unsetRelateCityArray();
      } else {
        setRelateCityArray((List<Integer>)value);
      }
      break;

    case PRICE_LOWER_ARRAY:
      if (value == null) {
        unsetPriceLowerArray();
      } else {
        setPriceLowerArray((List<Double>)value);
      }
      break;

    case PRICE_HIGH_ARRAY:
      if (value == null) {
        unsetPriceHighArray();
      } else {
        setPriceHighArray((List<Double>)value);
      }
      break;

    case CPRICE_LOWER_ARRAY:
      if (value == null) {
        unsetCPriceLowerArray();
      } else {
        setCPriceLowerArray((List<Double>)value);
      }
      break;

    case CPRICE_HIGH_ARRAY:
      if (value == null) {
        unsetCPriceHighArray();
      } else {
        setCPriceHighArray((List<Double>)value);
      }
      break;

    case B2_BPRICE_LOWER_ARRAY:
      if (value == null) {
        unsetB2BPriceLowerArray();
      } else {
        setB2BPriceLowerArray((List<Double>)value);
      }
      break;

    case B2_BPRICE_HIGH_ARRAY:
      if (value == null) {
        unsetB2BPriceHighArray();
      } else {
        setB2BPriceHighArray((List<Double>)value);
      }
      break;

    case CAR_AGE_LOWER_ARRAY:
      if (value == null) {
        unsetCarAgeLowerArray();
      } else {
        setCarAgeLowerArray((List<Integer>)value);
      }
      break;

    case CAR_AGE_HIGH_ARRAY:
      if (value == null) {
        unsetCarAgeHighArray();
      } else {
        setCarAgeHighArray((List<Integer>)value);
      }
      break;

    case DRIVING_MILEAGE_LOWER_ARRAY:
      if (value == null) {
        unsetDrivingMileageLowerArray();
      } else {
        setDrivingMileageLowerArray((List<Integer>)value);
      }
      break;

    case DRIVING_MILEAGE_HIGH_ARRAY:
      if (value == null) {
        unsetDrivingMileageHighArray();
      } else {
        setDrivingMileageHighArray((List<Integer>)value);
      }
      break;

    case SUPERIOR_ID:
      if (value == null) {
        unsetSuperiorId();
      } else {
        setSuperiorId((Integer)value);
      }
      break;

    case USER_TYPE:
      if (value == null) {
        unsetUserType();
      } else {
        setUserType((Integer)value);
      }
      break;

    case IS_NEGLECT:
      if (value == null) {
        unsetIsNeglect();
      } else {
        setIsNeglect((Integer)value);
      }
      break;

    case IS_VIDEO:
      if (value == null) {
        unsetIsVideo();
      } else {
        setIsVideo((Integer)value);
      }
      break;

    case IS_FIRST_PIC_TRUE:
      if (value == null) {
        unsetIsFirstPicTrue();
      } else {
        setIsFirstPicTrue((Integer)value);
      }
      break;

    case IS_DEALER_RECOMMEND:
      if (value == null) {
        unsetIsDealerRecommend();
      } else {
        setIsDealerRecommend((Integer)value);
      }
      break;

    case CAR_SOURCE_TYPE_ARRAY:
      if (value == null) {
        unsetCarSourceTypeArray();
      } else {
        setCarSourceTypeArray((List<Integer>)value);
      }
      break;

    case CAR_TYPE_CONFIG:
      if (value == null) {
        unsetCarTypeConfig();
      } else {
        setCarTypeConfig((List<Integer>)value);
      }
      break;

    case IS_RECOMMEND_GL:
      if (value == null) {
        unsetIsRecommendGL();
      } else {
        setIsRecommendGL((Integer)value);
      }
      break;

    case IS_WARRANTY:
      if (value == null) {
        unsetIsWarranty();
      } else {
        setIsWarranty((Integer)value);
      }
      break;

    case WARRANTY_TYPE_ARRAY:
      if (value == null) {
        unsetWarrantyTypeArray();
      } else {
        setWarrantyTypeArray((List<Integer>)value);
      }
      break;

    case IS_TOP:
      if (value == null) {
        unsetIsTop();
      } else {
        setIsTop((Integer)value);
      }
      break;

    case IS_ACTIVITY:
      if (value == null) {
        unsetIsActivity();
      } else {
        setIsActivity((Integer)value);
      }
      break;

    case IS_BANGMAI:
      if (value == null) {
        unsetIsBangmai();
      } else {
        setIsBangmai((Integer)value);
      }
      break;

    case IS_BANGMAICHE:
      if (value == null) {
        unsetIsBangmaiche();
      } else {
        setIsBangmaiche((Integer)value);
      }
      break;

    case IS_SHOW_MR:
      if (value == null) {
        unsetIsShowMr();
      } else {
        setIsShowMr((Integer)value);
      }
      break;

    case IS_CAR_ID:
      if (value == null) {
        unsetIsCarId();
      } else {
        setIsCarId((Integer)value);
      }
      break;

    case IS_B2_B:
      if (value == null) {
        unsetIsB2B();
      } else {
        setIsB2B((Integer)value);
      }
      break;

    case CRM_CUSTOMER_ID_ARRAY:
      if (value == null) {
        unsetCrmCustomerIdArray();
      } else {
        setCrmCustomerIdArray((List<Integer>)value);
      }
      break;

    case IS_CHECK_REPORT_JSON:
      if (value == null) {
        unsetIsCheckReportJson();
      } else {
        setIsCheckReportJson((Integer)value);
      }
      break;

    case ENVIR_STANDARD_ARRAY:
      if (value == null) {
        unsetEnvirStandardArray();
      } else {
        setEnvirStandardArray((List<Integer>)value);
      }
      break;

    case CONSUMPTION_LOWER_ARRAY:
      if (value == null) {
        unsetConsumptionLowerArray();
      } else {
        setConsumptionLowerArray((List<Double>)value);
      }
      break;

    case CONSUMPTION_HIGH_ARRAY:
      if (value == null) {
        unsetConsumptionHighArray();
      } else {
        setConsumptionHighArray((List<Double>)value);
      }
      break;

    case OIL_TYPE_ARRAY:
      if (value == null) {
        unsetOilTypeArray();
      } else {
        setOilTypeArray((List<Integer>)value);
      }
      break;

    case ENGINE_LOCATION_ARRAY:
      if (value == null) {
        unsetEngineLocationArray();
      } else {
        setEngineLocationArray((List<Integer>)value);
      }
      break;

    case BODY_DOORS_LOWER_ARRAY:
      if (value == null) {
        unsetBodyDoorsLowerArray();
      } else {
        setBodyDoorsLowerArray((List<Integer>)value);
      }
      break;

    case BODY_DOORS_HIGH_ARRAY:
      if (value == null) {
        unsetBodyDoorsHighArray();
      } else {
        setBodyDoorsHighArray((List<Integer>)value);
      }
      break;

    case SEAT_NUM_LOWER_ARRAY:
      if (value == null) {
        unsetSeatNumLowerArray();
      } else {
        setSeatNumLowerArray((List<Integer>)value);
      }
      break;

    case SEAT_NUM_HIGH_ARRAY:
      if (value == null) {
        unsetSeatNumHighArray();
      } else {
        setSeatNumHighArray((List<Integer>)value);
      }
      break;

    case IS_WAGON:
      if (value == null) {
        unsetIsWagon();
      } else {
        setIsWagon((Integer)value);
      }
      break;

    case DRIVE_TYPE_ARRAY:
      if (value == null) {
        unsetDriveTypeArray();
      } else {
        setDriveTypeArray((List<Integer>)value);
      }
      break;

    case CS_BODY_FORM_ARRAY:
      if (value == null) {
        unsetCsBodyFormArray();
      } else {
        setCsBodyFormArray((List<Integer>)value);
      }
      break;

    case CAR_LEVEL_ARRAY:
      if (value == null) {
        unsetCarLevelArray();
      } else {
        setCarLevelArray((List<Integer>)value);
      }
      break;

    case CAR_LEVEL_SECOND_ARRAY:
      if (value == null) {
        unsetCarLevelSecondArray();
      } else {
        setCarLevelSecondArray((List<Integer>)value);
      }
      break;

    case CAR_YEAR_ARRAY:
      if (value == null) {
        unsetCarYearArray();
      } else {
        setCarYearArray((List<String>)value);
      }
      break;

    case MAIN_BRAND_ARRAY:
      if (value == null) {
        unsetMainBrandArray();
      } else {
        setMainBrandArray((List<Integer>)value);
      }
      break;

    case BRAND_ARRAY:
      if (value == null) {
        unsetBrandArray();
      } else {
        setBrandArray((List<Integer>)value);
      }
      break;

    case CAR_SERIAL_ARRAY:
      if (value == null) {
        unsetCarSerialArray();
      } else {
        setCarSerialArray((List<Integer>)value);
      }
      break;

    case CAR_IDARRAY:
      if (value == null) {
        unsetCarIDArray();
      } else {
        setCarIDArray((List<Integer>)value);
      }
      break;

    case GEAR_BOX_TYPE_ARRAY:
      if (value == null) {
        unsetGearBoxTypeArray();
      } else {
        setGearBoxTypeArray((List<Integer>)value);
      }
      break;

    case EXHAUST_LEVEL_LOWER_ARRAY:
      if (value == null) {
        unsetExhaustLevelLowerArray();
      } else {
        setExhaustLevelLowerArray((List<Double>)value);
      }
      break;

    case EXHAUST_LEVEL_HIGH_ARRAY:
      if (value == null) {
        unsetExhaustLevelHighArray();
      } else {
        setExhaustLevelHighArray((List<Double>)value);
      }
      break;

    case EXHAUST_LEVEL_ARRAY:
      if (value == null) {
        unsetExhaustLevelArray();
      } else {
        setExhaustLevelArray((List<Integer>)value);
      }
      break;

    case COUNTRY_ARRAY:
      if (value == null) {
        unsetCountryArray();
      } else {
        setCountryArray((List<Integer>)value);
      }
      break;

    case BRAND_ATTR_ARRAY:
      if (value == null) {
        unsetBrandAttrArray();
      } else {
        setBrandAttrArray((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMON_FLAG:
      return getCommonFlag();

    case REQUEST_SOURCE:
      return getRequestSource();

    case RETURN_FIELD_ARRAY:
      return getReturnFieldArray();

    case ORDER_BY_FIELD_ARRAY:
      return getOrderByFieldArray();

    case ORDER_BY_IS_DESCARRAY:
      return getOrderByIsDESCArray();

    case SORT_BOOST_FLAG:
      return getSortBoostFlag();

    case PAGE_SIZE:
      return getPageSize();

    case PAGE_INDEX:
      return getPageIndex();

    case DISTANCE_KM:
      return getDistanceKm();

    case LOCATION:
      return getLocation();

    case IS_COUNT_SEARCH:
      return isIsCountSearch();

    case REQUEST_PARAMETERS_LOG:
      return getRequestParametersLog();

    case AGGR_FIELD_LIST:
      return getAggrFieldList();

    case UCAR_ID_ARRAY:
      return getUcarIdArray();

    case SITE_ID:
      return getSiteId();

    case UCAR_STATUS_ARRAY:
      return getUcarStatusArray();

    case NO_UCAR_ID_ARRAY:
      return getNoUcarIdArray();

    case IS_AUTHENTICATED:
      return getIsAuthenticated();

    case SOURCE:
      return getSource();

    case USER_ID_ARRAY:
      return getUserIdArray();

    case NO_USER_ID_ARRAY:
      return getNoUserIdArray();

    case UCAR_SERIAL_NUMBER_ARRAY:
      return getUcarSerialNumberArray();

    case KEY_WORD:
      return getKeyWord();

    case COLOR_ARRAY:
      return getColorArray();

    case CAR_SOURCE1_L:
      return getCarSource1L();

    case PICTURE_COUNT:
      return getPictureCount();

    case BIG_AREA_ID_ARRAY:
      return getBigAreaIdArray();

    case PROVINCE_ID_ARRAY:
      return getProvinceIdArray();

    case CITY_ID_ARRAY:
      return getCityIdArray();

    case NO_CITY_ID_ARRAY:
      return getNoCityIdArray();

    case RELATE_CITY_ARRAY:
      return getRelateCityArray();

    case PRICE_LOWER_ARRAY:
      return getPriceLowerArray();

    case PRICE_HIGH_ARRAY:
      return getPriceHighArray();

    case CPRICE_LOWER_ARRAY:
      return getCPriceLowerArray();

    case CPRICE_HIGH_ARRAY:
      return getCPriceHighArray();

    case B2_BPRICE_LOWER_ARRAY:
      return getB2BPriceLowerArray();

    case B2_BPRICE_HIGH_ARRAY:
      return getB2BPriceHighArray();

    case CAR_AGE_LOWER_ARRAY:
      return getCarAgeLowerArray();

    case CAR_AGE_HIGH_ARRAY:
      return getCarAgeHighArray();

    case DRIVING_MILEAGE_LOWER_ARRAY:
      return getDrivingMileageLowerArray();

    case DRIVING_MILEAGE_HIGH_ARRAY:
      return getDrivingMileageHighArray();

    case SUPERIOR_ID:
      return getSuperiorId();

    case USER_TYPE:
      return getUserType();

    case IS_NEGLECT:
      return getIsNeglect();

    case IS_VIDEO:
      return getIsVideo();

    case IS_FIRST_PIC_TRUE:
      return getIsFirstPicTrue();

    case IS_DEALER_RECOMMEND:
      return getIsDealerRecommend();

    case CAR_SOURCE_TYPE_ARRAY:
      return getCarSourceTypeArray();

    case CAR_TYPE_CONFIG:
      return getCarTypeConfig();

    case IS_RECOMMEND_GL:
      return getIsRecommendGL();

    case IS_WARRANTY:
      return getIsWarranty();

    case WARRANTY_TYPE_ARRAY:
      return getWarrantyTypeArray();

    case IS_TOP:
      return getIsTop();

    case IS_ACTIVITY:
      return getIsActivity();

    case IS_BANGMAI:
      return getIsBangmai();

    case IS_BANGMAICHE:
      return getIsBangmaiche();

    case IS_SHOW_MR:
      return getIsShowMr();

    case IS_CAR_ID:
      return getIsCarId();

    case IS_B2_B:
      return getIsB2B();

    case CRM_CUSTOMER_ID_ARRAY:
      return getCrmCustomerIdArray();

    case IS_CHECK_REPORT_JSON:
      return getIsCheckReportJson();

    case ENVIR_STANDARD_ARRAY:
      return getEnvirStandardArray();

    case CONSUMPTION_LOWER_ARRAY:
      return getConsumptionLowerArray();

    case CONSUMPTION_HIGH_ARRAY:
      return getConsumptionHighArray();

    case OIL_TYPE_ARRAY:
      return getOilTypeArray();

    case ENGINE_LOCATION_ARRAY:
      return getEngineLocationArray();

    case BODY_DOORS_LOWER_ARRAY:
      return getBodyDoorsLowerArray();

    case BODY_DOORS_HIGH_ARRAY:
      return getBodyDoorsHighArray();

    case SEAT_NUM_LOWER_ARRAY:
      return getSeatNumLowerArray();

    case SEAT_NUM_HIGH_ARRAY:
      return getSeatNumHighArray();

    case IS_WAGON:
      return getIsWagon();

    case DRIVE_TYPE_ARRAY:
      return getDriveTypeArray();

    case CS_BODY_FORM_ARRAY:
      return getCsBodyFormArray();

    case CAR_LEVEL_ARRAY:
      return getCarLevelArray();

    case CAR_LEVEL_SECOND_ARRAY:
      return getCarLevelSecondArray();

    case CAR_YEAR_ARRAY:
      return getCarYearArray();

    case MAIN_BRAND_ARRAY:
      return getMainBrandArray();

    case BRAND_ARRAY:
      return getBrandArray();

    case CAR_SERIAL_ARRAY:
      return getCarSerialArray();

    case CAR_IDARRAY:
      return getCarIDArray();

    case GEAR_BOX_TYPE_ARRAY:
      return getGearBoxTypeArray();

    case EXHAUST_LEVEL_LOWER_ARRAY:
      return getExhaustLevelLowerArray();

    case EXHAUST_LEVEL_HIGH_ARRAY:
      return getExhaustLevelHighArray();

    case EXHAUST_LEVEL_ARRAY:
      return getExhaustLevelArray();

    case COUNTRY_ARRAY:
      return getCountryArray();

    case BRAND_ATTR_ARRAY:
      return getBrandAttrArray();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMON_FLAG:
      return isSetCommonFlag();
    case REQUEST_SOURCE:
      return isSetRequestSource();
    case RETURN_FIELD_ARRAY:
      return isSetReturnFieldArray();
    case ORDER_BY_FIELD_ARRAY:
      return isSetOrderByFieldArray();
    case ORDER_BY_IS_DESCARRAY:
      return isSetOrderByIsDESCArray();
    case SORT_BOOST_FLAG:
      return isSetSortBoostFlag();
    case PAGE_SIZE:
      return isSetPageSize();
    case PAGE_INDEX:
      return isSetPageIndex();
    case DISTANCE_KM:
      return isSetDistanceKm();
    case LOCATION:
      return isSetLocation();
    case IS_COUNT_SEARCH:
      return isSetIsCountSearch();
    case REQUEST_PARAMETERS_LOG:
      return isSetRequestParametersLog();
    case AGGR_FIELD_LIST:
      return isSetAggrFieldList();
    case UCAR_ID_ARRAY:
      return isSetUcarIdArray();
    case SITE_ID:
      return isSetSiteId();
    case UCAR_STATUS_ARRAY:
      return isSetUcarStatusArray();
    case NO_UCAR_ID_ARRAY:
      return isSetNoUcarIdArray();
    case IS_AUTHENTICATED:
      return isSetIsAuthenticated();
    case SOURCE:
      return isSetSource();
    case USER_ID_ARRAY:
      return isSetUserIdArray();
    case NO_USER_ID_ARRAY:
      return isSetNoUserIdArray();
    case UCAR_SERIAL_NUMBER_ARRAY:
      return isSetUcarSerialNumberArray();
    case KEY_WORD:
      return isSetKeyWord();
    case COLOR_ARRAY:
      return isSetColorArray();
    case CAR_SOURCE1_L:
      return isSetCarSource1L();
    case PICTURE_COUNT:
      return isSetPictureCount();
    case BIG_AREA_ID_ARRAY:
      return isSetBigAreaIdArray();
    case PROVINCE_ID_ARRAY:
      return isSetProvinceIdArray();
    case CITY_ID_ARRAY:
      return isSetCityIdArray();
    case NO_CITY_ID_ARRAY:
      return isSetNoCityIdArray();
    case RELATE_CITY_ARRAY:
      return isSetRelateCityArray();
    case PRICE_LOWER_ARRAY:
      return isSetPriceLowerArray();
    case PRICE_HIGH_ARRAY:
      return isSetPriceHighArray();
    case CPRICE_LOWER_ARRAY:
      return isSetCPriceLowerArray();
    case CPRICE_HIGH_ARRAY:
      return isSetCPriceHighArray();
    case B2_BPRICE_LOWER_ARRAY:
      return isSetB2BPriceLowerArray();
    case B2_BPRICE_HIGH_ARRAY:
      return isSetB2BPriceHighArray();
    case CAR_AGE_LOWER_ARRAY:
      return isSetCarAgeLowerArray();
    case CAR_AGE_HIGH_ARRAY:
      return isSetCarAgeHighArray();
    case DRIVING_MILEAGE_LOWER_ARRAY:
      return isSetDrivingMileageLowerArray();
    case DRIVING_MILEAGE_HIGH_ARRAY:
      return isSetDrivingMileageHighArray();
    case SUPERIOR_ID:
      return isSetSuperiorId();
    case USER_TYPE:
      return isSetUserType();
    case IS_NEGLECT:
      return isSetIsNeglect();
    case IS_VIDEO:
      return isSetIsVideo();
    case IS_FIRST_PIC_TRUE:
      return isSetIsFirstPicTrue();
    case IS_DEALER_RECOMMEND:
      return isSetIsDealerRecommend();
    case CAR_SOURCE_TYPE_ARRAY:
      return isSetCarSourceTypeArray();
    case CAR_TYPE_CONFIG:
      return isSetCarTypeConfig();
    case IS_RECOMMEND_GL:
      return isSetIsRecommendGL();
    case IS_WARRANTY:
      return isSetIsWarranty();
    case WARRANTY_TYPE_ARRAY:
      return isSetWarrantyTypeArray();
    case IS_TOP:
      return isSetIsTop();
    case IS_ACTIVITY:
      return isSetIsActivity();
    case IS_BANGMAI:
      return isSetIsBangmai();
    case IS_BANGMAICHE:
      return isSetIsBangmaiche();
    case IS_SHOW_MR:
      return isSetIsShowMr();
    case IS_CAR_ID:
      return isSetIsCarId();
    case IS_B2_B:
      return isSetIsB2B();
    case CRM_CUSTOMER_ID_ARRAY:
      return isSetCrmCustomerIdArray();
    case IS_CHECK_REPORT_JSON:
      return isSetIsCheckReportJson();
    case ENVIR_STANDARD_ARRAY:
      return isSetEnvirStandardArray();
    case CONSUMPTION_LOWER_ARRAY:
      return isSetConsumptionLowerArray();
    case CONSUMPTION_HIGH_ARRAY:
      return isSetConsumptionHighArray();
    case OIL_TYPE_ARRAY:
      return isSetOilTypeArray();
    case ENGINE_LOCATION_ARRAY:
      return isSetEngineLocationArray();
    case BODY_DOORS_LOWER_ARRAY:
      return isSetBodyDoorsLowerArray();
    case BODY_DOORS_HIGH_ARRAY:
      return isSetBodyDoorsHighArray();
    case SEAT_NUM_LOWER_ARRAY:
      return isSetSeatNumLowerArray();
    case SEAT_NUM_HIGH_ARRAY:
      return isSetSeatNumHighArray();
    case IS_WAGON:
      return isSetIsWagon();
    case DRIVE_TYPE_ARRAY:
      return isSetDriveTypeArray();
    case CS_BODY_FORM_ARRAY:
      return isSetCsBodyFormArray();
    case CAR_LEVEL_ARRAY:
      return isSetCarLevelArray();
    case CAR_LEVEL_SECOND_ARRAY:
      return isSetCarLevelSecondArray();
    case CAR_YEAR_ARRAY:
      return isSetCarYearArray();
    case MAIN_BRAND_ARRAY:
      return isSetMainBrandArray();
    case BRAND_ARRAY:
      return isSetBrandArray();
    case CAR_SERIAL_ARRAY:
      return isSetCarSerialArray();
    case CAR_IDARRAY:
      return isSetCarIDArray();
    case GEAR_BOX_TYPE_ARRAY:
      return isSetGearBoxTypeArray();
    case EXHAUST_LEVEL_LOWER_ARRAY:
      return isSetExhaustLevelLowerArray();
    case EXHAUST_LEVEL_HIGH_ARRAY:
      return isSetExhaustLevelHighArray();
    case EXHAUST_LEVEL_ARRAY:
      return isSetExhaustLevelArray();
    case COUNTRY_ARRAY:
      return isSetCountryArray();
    case BRAND_ATTR_ARRAY:
      return isSetBrandAttrArray();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchCondition)
      return this.equals((SearchCondition)that);
    return false;
  }

  public boolean equals(SearchCondition that) {
    if (that == null)
      return false;

    boolean this_present_CommonFlag = true;
    boolean that_present_CommonFlag = true;
    if (this_present_CommonFlag || that_present_CommonFlag) {
      if (!(this_present_CommonFlag && that_present_CommonFlag))
        return false;
      if (this.CommonFlag != that.CommonFlag)
        return false;
    }

    boolean this_present_RequestSource = true;
    boolean that_present_RequestSource = true;
    if (this_present_RequestSource || that_present_RequestSource) {
      if (!(this_present_RequestSource && that_present_RequestSource))
        return false;
      if (this.RequestSource != that.RequestSource)
        return false;
    }

    boolean this_present_ReturnFieldArray = true && this.isSetReturnFieldArray();
    boolean that_present_ReturnFieldArray = true && that.isSetReturnFieldArray();
    if (this_present_ReturnFieldArray || that_present_ReturnFieldArray) {
      if (!(this_present_ReturnFieldArray && that_present_ReturnFieldArray))
        return false;
      if (!this.ReturnFieldArray.equals(that.ReturnFieldArray))
        return false;
    }

    boolean this_present_OrderByFieldArray = true && this.isSetOrderByFieldArray();
    boolean that_present_OrderByFieldArray = true && that.isSetOrderByFieldArray();
    if (this_present_OrderByFieldArray || that_present_OrderByFieldArray) {
      if (!(this_present_OrderByFieldArray && that_present_OrderByFieldArray))
        return false;
      if (!this.OrderByFieldArray.equals(that.OrderByFieldArray))
        return false;
    }

    boolean this_present_OrderByIsDESCArray = true && this.isSetOrderByIsDESCArray();
    boolean that_present_OrderByIsDESCArray = true && that.isSetOrderByIsDESCArray();
    if (this_present_OrderByIsDESCArray || that_present_OrderByIsDESCArray) {
      if (!(this_present_OrderByIsDESCArray && that_present_OrderByIsDESCArray))
        return false;
      if (!this.OrderByIsDESCArray.equals(that.OrderByIsDESCArray))
        return false;
    }

    boolean this_present_SortBoostFlag = true;
    boolean that_present_SortBoostFlag = true;
    if (this_present_SortBoostFlag || that_present_SortBoostFlag) {
      if (!(this_present_SortBoostFlag && that_present_SortBoostFlag))
        return false;
      if (this.SortBoostFlag != that.SortBoostFlag)
        return false;
    }

    boolean this_present_PageSize = true;
    boolean that_present_PageSize = true;
    if (this_present_PageSize || that_present_PageSize) {
      if (!(this_present_PageSize && that_present_PageSize))
        return false;
      if (this.PageSize != that.PageSize)
        return false;
    }

    boolean this_present_PageIndex = true;
    boolean that_present_PageIndex = true;
    if (this_present_PageIndex || that_present_PageIndex) {
      if (!(this_present_PageIndex && that_present_PageIndex))
        return false;
      if (this.PageIndex != that.PageIndex)
        return false;
    }

    boolean this_present_DistanceKm = true;
    boolean that_present_DistanceKm = true;
    if (this_present_DistanceKm || that_present_DistanceKm) {
      if (!(this_present_DistanceKm && that_present_DistanceKm))
        return false;
      if (this.DistanceKm != that.DistanceKm)
        return false;
    }

    boolean this_present_Location = true && this.isSetLocation();
    boolean that_present_Location = true && that.isSetLocation();
    if (this_present_Location || that_present_Location) {
      if (!(this_present_Location && that_present_Location))
        return false;
      if (!this.Location.equals(that.Location))
        return false;
    }

    boolean this_present_IsCountSearch = true;
    boolean that_present_IsCountSearch = true;
    if (this_present_IsCountSearch || that_present_IsCountSearch) {
      if (!(this_present_IsCountSearch && that_present_IsCountSearch))
        return false;
      if (this.IsCountSearch != that.IsCountSearch)
        return false;
    }

    boolean this_present_RequestParametersLog = true && this.isSetRequestParametersLog();
    boolean that_present_RequestParametersLog = true && that.isSetRequestParametersLog();
    if (this_present_RequestParametersLog || that_present_RequestParametersLog) {
      if (!(this_present_RequestParametersLog && that_present_RequestParametersLog))
        return false;
      if (!this.RequestParametersLog.equals(that.RequestParametersLog))
        return false;
    }

    boolean this_present_AggrFieldList = true && this.isSetAggrFieldList();
    boolean that_present_AggrFieldList = true && that.isSetAggrFieldList();
    if (this_present_AggrFieldList || that_present_AggrFieldList) {
      if (!(this_present_AggrFieldList && that_present_AggrFieldList))
        return false;
      if (!this.AggrFieldList.equals(that.AggrFieldList))
        return false;
    }

    boolean this_present_UcarIdArray = true && this.isSetUcarIdArray();
    boolean that_present_UcarIdArray = true && that.isSetUcarIdArray();
    if (this_present_UcarIdArray || that_present_UcarIdArray) {
      if (!(this_present_UcarIdArray && that_present_UcarIdArray))
        return false;
      if (!this.UcarIdArray.equals(that.UcarIdArray))
        return false;
    }

    boolean this_present_SiteId = true && this.isSetSiteId();
    boolean that_present_SiteId = true && that.isSetSiteId();
    if (this_present_SiteId || that_present_SiteId) {
      if (!(this_present_SiteId && that_present_SiteId))
        return false;
      if (!this.SiteId.equals(that.SiteId))
        return false;
    }

    boolean this_present_UcarStatusArray = true && this.isSetUcarStatusArray();
    boolean that_present_UcarStatusArray = true && that.isSetUcarStatusArray();
    if (this_present_UcarStatusArray || that_present_UcarStatusArray) {
      if (!(this_present_UcarStatusArray && that_present_UcarStatusArray))
        return false;
      if (!this.UcarStatusArray.equals(that.UcarStatusArray))
        return false;
    }

    boolean this_present_NoUcarIdArray = true && this.isSetNoUcarIdArray();
    boolean that_present_NoUcarIdArray = true && that.isSetNoUcarIdArray();
    if (this_present_NoUcarIdArray || that_present_NoUcarIdArray) {
      if (!(this_present_NoUcarIdArray && that_present_NoUcarIdArray))
        return false;
      if (!this.NoUcarIdArray.equals(that.NoUcarIdArray))
        return false;
    }

    boolean this_present_IsAuthenticated = true;
    boolean that_present_IsAuthenticated = true;
    if (this_present_IsAuthenticated || that_present_IsAuthenticated) {
      if (!(this_present_IsAuthenticated && that_present_IsAuthenticated))
        return false;
      if (this.IsAuthenticated != that.IsAuthenticated)
        return false;
    }

    boolean this_present_Source = true;
    boolean that_present_Source = true;
    if (this_present_Source || that_present_Source) {
      if (!(this_present_Source && that_present_Source))
        return false;
      if (this.Source != that.Source)
        return false;
    }

    boolean this_present_UserIdArray = true && this.isSetUserIdArray();
    boolean that_present_UserIdArray = true && that.isSetUserIdArray();
    if (this_present_UserIdArray || that_present_UserIdArray) {
      if (!(this_present_UserIdArray && that_present_UserIdArray))
        return false;
      if (!this.UserIdArray.equals(that.UserIdArray))
        return false;
    }

    boolean this_present_NoUserIdArray = true && this.isSetNoUserIdArray();
    boolean that_present_NoUserIdArray = true && that.isSetNoUserIdArray();
    if (this_present_NoUserIdArray || that_present_NoUserIdArray) {
      if (!(this_present_NoUserIdArray && that_present_NoUserIdArray))
        return false;
      if (!this.NoUserIdArray.equals(that.NoUserIdArray))
        return false;
    }

    boolean this_present_UcarSerialNumberArray = true && this.isSetUcarSerialNumberArray();
    boolean that_present_UcarSerialNumberArray = true && that.isSetUcarSerialNumberArray();
    if (this_present_UcarSerialNumberArray || that_present_UcarSerialNumberArray) {
      if (!(this_present_UcarSerialNumberArray && that_present_UcarSerialNumberArray))
        return false;
      if (!this.UcarSerialNumberArray.equals(that.UcarSerialNumberArray))
        return false;
    }

    boolean this_present_KeyWord = true && this.isSetKeyWord();
    boolean that_present_KeyWord = true && that.isSetKeyWord();
    if (this_present_KeyWord || that_present_KeyWord) {
      if (!(this_present_KeyWord && that_present_KeyWord))
        return false;
      if (!this.KeyWord.equals(that.KeyWord))
        return false;
    }

    boolean this_present_ColorArray = true && this.isSetColorArray();
    boolean that_present_ColorArray = true && that.isSetColorArray();
    if (this_present_ColorArray || that_present_ColorArray) {
      if (!(this_present_ColorArray && that_present_ColorArray))
        return false;
      if (!this.ColorArray.equals(that.ColorArray))
        return false;
    }

    boolean this_present_CarSource1L = true;
    boolean that_present_CarSource1L = true;
    if (this_present_CarSource1L || that_present_CarSource1L) {
      if (!(this_present_CarSource1L && that_present_CarSource1L))
        return false;
      if (this.CarSource1L != that.CarSource1L)
        return false;
    }

    boolean this_present_PictureCount = true;
    boolean that_present_PictureCount = true;
    if (this_present_PictureCount || that_present_PictureCount) {
      if (!(this_present_PictureCount && that_present_PictureCount))
        return false;
      if (this.PictureCount != that.PictureCount)
        return false;
    }

    boolean this_present_BigAreaIdArray = true && this.isSetBigAreaIdArray();
    boolean that_present_BigAreaIdArray = true && that.isSetBigAreaIdArray();
    if (this_present_BigAreaIdArray || that_present_BigAreaIdArray) {
      if (!(this_present_BigAreaIdArray && that_present_BigAreaIdArray))
        return false;
      if (!this.BigAreaIdArray.equals(that.BigAreaIdArray))
        return false;
    }

    boolean this_present_ProvinceIdArray = true && this.isSetProvinceIdArray();
    boolean that_present_ProvinceIdArray = true && that.isSetProvinceIdArray();
    if (this_present_ProvinceIdArray || that_present_ProvinceIdArray) {
      if (!(this_present_ProvinceIdArray && that_present_ProvinceIdArray))
        return false;
      if (!this.ProvinceIdArray.equals(that.ProvinceIdArray))
        return false;
    }

    boolean this_present_CityIdArray = true && this.isSetCityIdArray();
    boolean that_present_CityIdArray = true && that.isSetCityIdArray();
    if (this_present_CityIdArray || that_present_CityIdArray) {
      if (!(this_present_CityIdArray && that_present_CityIdArray))
        return false;
      if (!this.CityIdArray.equals(that.CityIdArray))
        return false;
    }

    boolean this_present_NoCityIdArray = true && this.isSetNoCityIdArray();
    boolean that_present_NoCityIdArray = true && that.isSetNoCityIdArray();
    if (this_present_NoCityIdArray || that_present_NoCityIdArray) {
      if (!(this_present_NoCityIdArray && that_present_NoCityIdArray))
        return false;
      if (!this.NoCityIdArray.equals(that.NoCityIdArray))
        return false;
    }

    boolean this_present_RelateCityArray = true && this.isSetRelateCityArray();
    boolean that_present_RelateCityArray = true && that.isSetRelateCityArray();
    if (this_present_RelateCityArray || that_present_RelateCityArray) {
      if (!(this_present_RelateCityArray && that_present_RelateCityArray))
        return false;
      if (!this.RelateCityArray.equals(that.RelateCityArray))
        return false;
    }

    boolean this_present_PriceLowerArray = true && this.isSetPriceLowerArray();
    boolean that_present_PriceLowerArray = true && that.isSetPriceLowerArray();
    if (this_present_PriceLowerArray || that_present_PriceLowerArray) {
      if (!(this_present_PriceLowerArray && that_present_PriceLowerArray))
        return false;
      if (!this.PriceLowerArray.equals(that.PriceLowerArray))
        return false;
    }

    boolean this_present_PriceHighArray = true && this.isSetPriceHighArray();
    boolean that_present_PriceHighArray = true && that.isSetPriceHighArray();
    if (this_present_PriceHighArray || that_present_PriceHighArray) {
      if (!(this_present_PriceHighArray && that_present_PriceHighArray))
        return false;
      if (!this.PriceHighArray.equals(that.PriceHighArray))
        return false;
    }

    boolean this_present_CPriceLowerArray = true && this.isSetCPriceLowerArray();
    boolean that_present_CPriceLowerArray = true && that.isSetCPriceLowerArray();
    if (this_present_CPriceLowerArray || that_present_CPriceLowerArray) {
      if (!(this_present_CPriceLowerArray && that_present_CPriceLowerArray))
        return false;
      if (!this.CPriceLowerArray.equals(that.CPriceLowerArray))
        return false;
    }

    boolean this_present_CPriceHighArray = true && this.isSetCPriceHighArray();
    boolean that_present_CPriceHighArray = true && that.isSetCPriceHighArray();
    if (this_present_CPriceHighArray || that_present_CPriceHighArray) {
      if (!(this_present_CPriceHighArray && that_present_CPriceHighArray))
        return false;
      if (!this.CPriceHighArray.equals(that.CPriceHighArray))
        return false;
    }

    boolean this_present_B2BPriceLowerArray = true && this.isSetB2BPriceLowerArray();
    boolean that_present_B2BPriceLowerArray = true && that.isSetB2BPriceLowerArray();
    if (this_present_B2BPriceLowerArray || that_present_B2BPriceLowerArray) {
      if (!(this_present_B2BPriceLowerArray && that_present_B2BPriceLowerArray))
        return false;
      if (!this.B2BPriceLowerArray.equals(that.B2BPriceLowerArray))
        return false;
    }

    boolean this_present_B2BPriceHighArray = true && this.isSetB2BPriceHighArray();
    boolean that_present_B2BPriceHighArray = true && that.isSetB2BPriceHighArray();
    if (this_present_B2BPriceHighArray || that_present_B2BPriceHighArray) {
      if (!(this_present_B2BPriceHighArray && that_present_B2BPriceHighArray))
        return false;
      if (!this.B2BPriceHighArray.equals(that.B2BPriceHighArray))
        return false;
    }

    boolean this_present_CarAgeLowerArray = true && this.isSetCarAgeLowerArray();
    boolean that_present_CarAgeLowerArray = true && that.isSetCarAgeLowerArray();
    if (this_present_CarAgeLowerArray || that_present_CarAgeLowerArray) {
      if (!(this_present_CarAgeLowerArray && that_present_CarAgeLowerArray))
        return false;
      if (!this.CarAgeLowerArray.equals(that.CarAgeLowerArray))
        return false;
    }

    boolean this_present_CarAgeHighArray = true && this.isSetCarAgeHighArray();
    boolean that_present_CarAgeHighArray = true && that.isSetCarAgeHighArray();
    if (this_present_CarAgeHighArray || that_present_CarAgeHighArray) {
      if (!(this_present_CarAgeHighArray && that_present_CarAgeHighArray))
        return false;
      if (!this.CarAgeHighArray.equals(that.CarAgeHighArray))
        return false;
    }

    boolean this_present_DrivingMileageLowerArray = true && this.isSetDrivingMileageLowerArray();
    boolean that_present_DrivingMileageLowerArray = true && that.isSetDrivingMileageLowerArray();
    if (this_present_DrivingMileageLowerArray || that_present_DrivingMileageLowerArray) {
      if (!(this_present_DrivingMileageLowerArray && that_present_DrivingMileageLowerArray))
        return false;
      if (!this.DrivingMileageLowerArray.equals(that.DrivingMileageLowerArray))
        return false;
    }

    boolean this_present_DrivingMileageHighArray = true && this.isSetDrivingMileageHighArray();
    boolean that_present_DrivingMileageHighArray = true && that.isSetDrivingMileageHighArray();
    if (this_present_DrivingMileageHighArray || that_present_DrivingMileageHighArray) {
      if (!(this_present_DrivingMileageHighArray && that_present_DrivingMileageHighArray))
        return false;
      if (!this.DrivingMileageHighArray.equals(that.DrivingMileageHighArray))
        return false;
    }

    boolean this_present_SuperiorId = true;
    boolean that_present_SuperiorId = true;
    if (this_present_SuperiorId || that_present_SuperiorId) {
      if (!(this_present_SuperiorId && that_present_SuperiorId))
        return false;
      if (this.SuperiorId != that.SuperiorId)
        return false;
    }

    boolean this_present_UserType = true;
    boolean that_present_UserType = true;
    if (this_present_UserType || that_present_UserType) {
      if (!(this_present_UserType && that_present_UserType))
        return false;
      if (this.UserType != that.UserType)
        return false;
    }

    boolean this_present_IsNeglect = true;
    boolean that_present_IsNeglect = true;
    if (this_present_IsNeglect || that_present_IsNeglect) {
      if (!(this_present_IsNeglect && that_present_IsNeglect))
        return false;
      if (this.IsNeglect != that.IsNeglect)
        return false;
    }

    boolean this_present_IsVideo = true;
    boolean that_present_IsVideo = true;
    if (this_present_IsVideo || that_present_IsVideo) {
      if (!(this_present_IsVideo && that_present_IsVideo))
        return false;
      if (this.IsVideo != that.IsVideo)
        return false;
    }

    boolean this_present_IsFirstPicTrue = true;
    boolean that_present_IsFirstPicTrue = true;
    if (this_present_IsFirstPicTrue || that_present_IsFirstPicTrue) {
      if (!(this_present_IsFirstPicTrue && that_present_IsFirstPicTrue))
        return false;
      if (this.IsFirstPicTrue != that.IsFirstPicTrue)
        return false;
    }

    boolean this_present_IsDealerRecommend = true;
    boolean that_present_IsDealerRecommend = true;
    if (this_present_IsDealerRecommend || that_present_IsDealerRecommend) {
      if (!(this_present_IsDealerRecommend && that_present_IsDealerRecommend))
        return false;
      if (this.IsDealerRecommend != that.IsDealerRecommend)
        return false;
    }

    boolean this_present_CarSourceTypeArray = true && this.isSetCarSourceTypeArray();
    boolean that_present_CarSourceTypeArray = true && that.isSetCarSourceTypeArray();
    if (this_present_CarSourceTypeArray || that_present_CarSourceTypeArray) {
      if (!(this_present_CarSourceTypeArray && that_present_CarSourceTypeArray))
        return false;
      if (!this.CarSourceTypeArray.equals(that.CarSourceTypeArray))
        return false;
    }

    boolean this_present_CarTypeConfig = true && this.isSetCarTypeConfig();
    boolean that_present_CarTypeConfig = true && that.isSetCarTypeConfig();
    if (this_present_CarTypeConfig || that_present_CarTypeConfig) {
      if (!(this_present_CarTypeConfig && that_present_CarTypeConfig))
        return false;
      if (!this.CarTypeConfig.equals(that.CarTypeConfig))
        return false;
    }

    boolean this_present_IsRecommendGL = true;
    boolean that_present_IsRecommendGL = true;
    if (this_present_IsRecommendGL || that_present_IsRecommendGL) {
      if (!(this_present_IsRecommendGL && that_present_IsRecommendGL))
        return false;
      if (this.IsRecommendGL != that.IsRecommendGL)
        return false;
    }

    boolean this_present_IsWarranty = true;
    boolean that_present_IsWarranty = true;
    if (this_present_IsWarranty || that_present_IsWarranty) {
      if (!(this_present_IsWarranty && that_present_IsWarranty))
        return false;
      if (this.IsWarranty != that.IsWarranty)
        return false;
    }

    boolean this_present_WarrantyTypeArray = true && this.isSetWarrantyTypeArray();
    boolean that_present_WarrantyTypeArray = true && that.isSetWarrantyTypeArray();
    if (this_present_WarrantyTypeArray || that_present_WarrantyTypeArray) {
      if (!(this_present_WarrantyTypeArray && that_present_WarrantyTypeArray))
        return false;
      if (!this.WarrantyTypeArray.equals(that.WarrantyTypeArray))
        return false;
    }

    boolean this_present_IsTop = true;
    boolean that_present_IsTop = true;
    if (this_present_IsTop || that_present_IsTop) {
      if (!(this_present_IsTop && that_present_IsTop))
        return false;
      if (this.IsTop != that.IsTop)
        return false;
    }

    boolean this_present_IsActivity = true;
    boolean that_present_IsActivity = true;
    if (this_present_IsActivity || that_present_IsActivity) {
      if (!(this_present_IsActivity && that_present_IsActivity))
        return false;
      if (this.IsActivity != that.IsActivity)
        return false;
    }

    boolean this_present_IsBangmai = true;
    boolean that_present_IsBangmai = true;
    if (this_present_IsBangmai || that_present_IsBangmai) {
      if (!(this_present_IsBangmai && that_present_IsBangmai))
        return false;
      if (this.IsBangmai != that.IsBangmai)
        return false;
    }

    boolean this_present_IsBangmaiche = true;
    boolean that_present_IsBangmaiche = true;
    if (this_present_IsBangmaiche || that_present_IsBangmaiche) {
      if (!(this_present_IsBangmaiche && that_present_IsBangmaiche))
        return false;
      if (this.IsBangmaiche != that.IsBangmaiche)
        return false;
    }

    boolean this_present_IsShowMr = true;
    boolean that_present_IsShowMr = true;
    if (this_present_IsShowMr || that_present_IsShowMr) {
      if (!(this_present_IsShowMr && that_present_IsShowMr))
        return false;
      if (this.IsShowMr != that.IsShowMr)
        return false;
    }

    boolean this_present_IsCarId = true;
    boolean that_present_IsCarId = true;
    if (this_present_IsCarId || that_present_IsCarId) {
      if (!(this_present_IsCarId && that_present_IsCarId))
        return false;
      if (this.IsCarId != that.IsCarId)
        return false;
    }

    boolean this_present_IsB2B = true;
    boolean that_present_IsB2B = true;
    if (this_present_IsB2B || that_present_IsB2B) {
      if (!(this_present_IsB2B && that_present_IsB2B))
        return false;
      if (this.IsB2B != that.IsB2B)
        return false;
    }

    boolean this_present_CrmCustomerIdArray = true && this.isSetCrmCustomerIdArray();
    boolean that_present_CrmCustomerIdArray = true && that.isSetCrmCustomerIdArray();
    if (this_present_CrmCustomerIdArray || that_present_CrmCustomerIdArray) {
      if (!(this_present_CrmCustomerIdArray && that_present_CrmCustomerIdArray))
        return false;
      if (!this.CrmCustomerIdArray.equals(that.CrmCustomerIdArray))
        return false;
    }

    boolean this_present_IsCheckReportJson = true;
    boolean that_present_IsCheckReportJson = true;
    if (this_present_IsCheckReportJson || that_present_IsCheckReportJson) {
      if (!(this_present_IsCheckReportJson && that_present_IsCheckReportJson))
        return false;
      if (this.IsCheckReportJson != that.IsCheckReportJson)
        return false;
    }

    boolean this_present_EnvirStandardArray = true && this.isSetEnvirStandardArray();
    boolean that_present_EnvirStandardArray = true && that.isSetEnvirStandardArray();
    if (this_present_EnvirStandardArray || that_present_EnvirStandardArray) {
      if (!(this_present_EnvirStandardArray && that_present_EnvirStandardArray))
        return false;
      if (!this.EnvirStandardArray.equals(that.EnvirStandardArray))
        return false;
    }

    boolean this_present_ConsumptionLowerArray = true && this.isSetConsumptionLowerArray();
    boolean that_present_ConsumptionLowerArray = true && that.isSetConsumptionLowerArray();
    if (this_present_ConsumptionLowerArray || that_present_ConsumptionLowerArray) {
      if (!(this_present_ConsumptionLowerArray && that_present_ConsumptionLowerArray))
        return false;
      if (!this.ConsumptionLowerArray.equals(that.ConsumptionLowerArray))
        return false;
    }

    boolean this_present_ConsumptionHighArray = true && this.isSetConsumptionHighArray();
    boolean that_present_ConsumptionHighArray = true && that.isSetConsumptionHighArray();
    if (this_present_ConsumptionHighArray || that_present_ConsumptionHighArray) {
      if (!(this_present_ConsumptionHighArray && that_present_ConsumptionHighArray))
        return false;
      if (!this.ConsumptionHighArray.equals(that.ConsumptionHighArray))
        return false;
    }

    boolean this_present_OilTypeArray = true && this.isSetOilTypeArray();
    boolean that_present_OilTypeArray = true && that.isSetOilTypeArray();
    if (this_present_OilTypeArray || that_present_OilTypeArray) {
      if (!(this_present_OilTypeArray && that_present_OilTypeArray))
        return false;
      if (!this.OilTypeArray.equals(that.OilTypeArray))
        return false;
    }

    boolean this_present_EngineLocationArray = true && this.isSetEngineLocationArray();
    boolean that_present_EngineLocationArray = true && that.isSetEngineLocationArray();
    if (this_present_EngineLocationArray || that_present_EngineLocationArray) {
      if (!(this_present_EngineLocationArray && that_present_EngineLocationArray))
        return false;
      if (!this.EngineLocationArray.equals(that.EngineLocationArray))
        return false;
    }

    boolean this_present_BodyDoorsLowerArray = true && this.isSetBodyDoorsLowerArray();
    boolean that_present_BodyDoorsLowerArray = true && that.isSetBodyDoorsLowerArray();
    if (this_present_BodyDoorsLowerArray || that_present_BodyDoorsLowerArray) {
      if (!(this_present_BodyDoorsLowerArray && that_present_BodyDoorsLowerArray))
        return false;
      if (!this.BodyDoorsLowerArray.equals(that.BodyDoorsLowerArray))
        return false;
    }

    boolean this_present_BodyDoorsHighArray = true && this.isSetBodyDoorsHighArray();
    boolean that_present_BodyDoorsHighArray = true && that.isSetBodyDoorsHighArray();
    if (this_present_BodyDoorsHighArray || that_present_BodyDoorsHighArray) {
      if (!(this_present_BodyDoorsHighArray && that_present_BodyDoorsHighArray))
        return false;
      if (!this.BodyDoorsHighArray.equals(that.BodyDoorsHighArray))
        return false;
    }

    boolean this_present_SeatNumLowerArray = true && this.isSetSeatNumLowerArray();
    boolean that_present_SeatNumLowerArray = true && that.isSetSeatNumLowerArray();
    if (this_present_SeatNumLowerArray || that_present_SeatNumLowerArray) {
      if (!(this_present_SeatNumLowerArray && that_present_SeatNumLowerArray))
        return false;
      if (!this.SeatNumLowerArray.equals(that.SeatNumLowerArray))
        return false;
    }

    boolean this_present_SeatNumHighArray = true && this.isSetSeatNumHighArray();
    boolean that_present_SeatNumHighArray = true && that.isSetSeatNumHighArray();
    if (this_present_SeatNumHighArray || that_present_SeatNumHighArray) {
      if (!(this_present_SeatNumHighArray && that_present_SeatNumHighArray))
        return false;
      if (!this.SeatNumHighArray.equals(that.SeatNumHighArray))
        return false;
    }

    boolean this_present_IsWagon = true;
    boolean that_present_IsWagon = true;
    if (this_present_IsWagon || that_present_IsWagon) {
      if (!(this_present_IsWagon && that_present_IsWagon))
        return false;
      if (this.IsWagon != that.IsWagon)
        return false;
    }

    boolean this_present_DriveTypeArray = true && this.isSetDriveTypeArray();
    boolean that_present_DriveTypeArray = true && that.isSetDriveTypeArray();
    if (this_present_DriveTypeArray || that_present_DriveTypeArray) {
      if (!(this_present_DriveTypeArray && that_present_DriveTypeArray))
        return false;
      if (!this.DriveTypeArray.equals(that.DriveTypeArray))
        return false;
    }

    boolean this_present_CsBodyFormArray = true && this.isSetCsBodyFormArray();
    boolean that_present_CsBodyFormArray = true && that.isSetCsBodyFormArray();
    if (this_present_CsBodyFormArray || that_present_CsBodyFormArray) {
      if (!(this_present_CsBodyFormArray && that_present_CsBodyFormArray))
        return false;
      if (!this.CsBodyFormArray.equals(that.CsBodyFormArray))
        return false;
    }

    boolean this_present_CarLevelArray = true && this.isSetCarLevelArray();
    boolean that_present_CarLevelArray = true && that.isSetCarLevelArray();
    if (this_present_CarLevelArray || that_present_CarLevelArray) {
      if (!(this_present_CarLevelArray && that_present_CarLevelArray))
        return false;
      if (!this.CarLevelArray.equals(that.CarLevelArray))
        return false;
    }

    boolean this_present_CarLevelSecondArray = true && this.isSetCarLevelSecondArray();
    boolean that_present_CarLevelSecondArray = true && that.isSetCarLevelSecondArray();
    if (this_present_CarLevelSecondArray || that_present_CarLevelSecondArray) {
      if (!(this_present_CarLevelSecondArray && that_present_CarLevelSecondArray))
        return false;
      if (!this.CarLevelSecondArray.equals(that.CarLevelSecondArray))
        return false;
    }

    boolean this_present_CarYearArray = true && this.isSetCarYearArray();
    boolean that_present_CarYearArray = true && that.isSetCarYearArray();
    if (this_present_CarYearArray || that_present_CarYearArray) {
      if (!(this_present_CarYearArray && that_present_CarYearArray))
        return false;
      if (!this.CarYearArray.equals(that.CarYearArray))
        return false;
    }

    boolean this_present_MainBrandArray = true && this.isSetMainBrandArray();
    boolean that_present_MainBrandArray = true && that.isSetMainBrandArray();
    if (this_present_MainBrandArray || that_present_MainBrandArray) {
      if (!(this_present_MainBrandArray && that_present_MainBrandArray))
        return false;
      if (!this.MainBrandArray.equals(that.MainBrandArray))
        return false;
    }

    boolean this_present_BrandArray = true && this.isSetBrandArray();
    boolean that_present_BrandArray = true && that.isSetBrandArray();
    if (this_present_BrandArray || that_present_BrandArray) {
      if (!(this_present_BrandArray && that_present_BrandArray))
        return false;
      if (!this.BrandArray.equals(that.BrandArray))
        return false;
    }

    boolean this_present_CarSerialArray = true && this.isSetCarSerialArray();
    boolean that_present_CarSerialArray = true && that.isSetCarSerialArray();
    if (this_present_CarSerialArray || that_present_CarSerialArray) {
      if (!(this_present_CarSerialArray && that_present_CarSerialArray))
        return false;
      if (!this.CarSerialArray.equals(that.CarSerialArray))
        return false;
    }

    boolean this_present_CarIDArray = true && this.isSetCarIDArray();
    boolean that_present_CarIDArray = true && that.isSetCarIDArray();
    if (this_present_CarIDArray || that_present_CarIDArray) {
      if (!(this_present_CarIDArray && that_present_CarIDArray))
        return false;
      if (!this.CarIDArray.equals(that.CarIDArray))
        return false;
    }

    boolean this_present_GearBoxTypeArray = true && this.isSetGearBoxTypeArray();
    boolean that_present_GearBoxTypeArray = true && that.isSetGearBoxTypeArray();
    if (this_present_GearBoxTypeArray || that_present_GearBoxTypeArray) {
      if (!(this_present_GearBoxTypeArray && that_present_GearBoxTypeArray))
        return false;
      if (!this.GearBoxTypeArray.equals(that.GearBoxTypeArray))
        return false;
    }

    boolean this_present_ExhaustLevelLowerArray = true && this.isSetExhaustLevelLowerArray();
    boolean that_present_ExhaustLevelLowerArray = true && that.isSetExhaustLevelLowerArray();
    if (this_present_ExhaustLevelLowerArray || that_present_ExhaustLevelLowerArray) {
      if (!(this_present_ExhaustLevelLowerArray && that_present_ExhaustLevelLowerArray))
        return false;
      if (!this.ExhaustLevelLowerArray.equals(that.ExhaustLevelLowerArray))
        return false;
    }

    boolean this_present_ExhaustLevelHighArray = true && this.isSetExhaustLevelHighArray();
    boolean that_present_ExhaustLevelHighArray = true && that.isSetExhaustLevelHighArray();
    if (this_present_ExhaustLevelHighArray || that_present_ExhaustLevelHighArray) {
      if (!(this_present_ExhaustLevelHighArray && that_present_ExhaustLevelHighArray))
        return false;
      if (!this.ExhaustLevelHighArray.equals(that.ExhaustLevelHighArray))
        return false;
    }

    boolean this_present_ExhaustLevelArray = true && this.isSetExhaustLevelArray();
    boolean that_present_ExhaustLevelArray = true && that.isSetExhaustLevelArray();
    if (this_present_ExhaustLevelArray || that_present_ExhaustLevelArray) {
      if (!(this_present_ExhaustLevelArray && that_present_ExhaustLevelArray))
        return false;
      if (!this.ExhaustLevelArray.equals(that.ExhaustLevelArray))
        return false;
    }

    boolean this_present_CountryArray = true && this.isSetCountryArray();
    boolean that_present_CountryArray = true && that.isSetCountryArray();
    if (this_present_CountryArray || that_present_CountryArray) {
      if (!(this_present_CountryArray && that_present_CountryArray))
        return false;
      if (!this.CountryArray.equals(that.CountryArray))
        return false;
    }

    boolean this_present_BrandAttrArray = true && this.isSetBrandAttrArray();
    boolean that_present_BrandAttrArray = true && that.isSetBrandAttrArray();
    if (this_present_BrandAttrArray || that_present_BrandAttrArray) {
      if (!(this_present_BrandAttrArray && that_present_BrandAttrArray))
        return false;
      if (!this.BrandAttrArray.equals(that.BrandAttrArray))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_CommonFlag = true;
    list.add(present_CommonFlag);
    if (present_CommonFlag)
      list.add(CommonFlag);

    boolean present_RequestSource = true;
    list.add(present_RequestSource);
    if (present_RequestSource)
      list.add(RequestSource);

    boolean present_ReturnFieldArray = true && (isSetReturnFieldArray());
    list.add(present_ReturnFieldArray);
    if (present_ReturnFieldArray)
      list.add(ReturnFieldArray);

    boolean present_OrderByFieldArray = true && (isSetOrderByFieldArray());
    list.add(present_OrderByFieldArray);
    if (present_OrderByFieldArray)
      list.add(OrderByFieldArray);

    boolean present_OrderByIsDESCArray = true && (isSetOrderByIsDESCArray());
    list.add(present_OrderByIsDESCArray);
    if (present_OrderByIsDESCArray)
      list.add(OrderByIsDESCArray);

    boolean present_SortBoostFlag = true;
    list.add(present_SortBoostFlag);
    if (present_SortBoostFlag)
      list.add(SortBoostFlag);

    boolean present_PageSize = true;
    list.add(present_PageSize);
    if (present_PageSize)
      list.add(PageSize);

    boolean present_PageIndex = true;
    list.add(present_PageIndex);
    if (present_PageIndex)
      list.add(PageIndex);

    boolean present_DistanceKm = true;
    list.add(present_DistanceKm);
    if (present_DistanceKm)
      list.add(DistanceKm);

    boolean present_Location = true && (isSetLocation());
    list.add(present_Location);
    if (present_Location)
      list.add(Location);

    boolean present_IsCountSearch = true;
    list.add(present_IsCountSearch);
    if (present_IsCountSearch)
      list.add(IsCountSearch);

    boolean present_RequestParametersLog = true && (isSetRequestParametersLog());
    list.add(present_RequestParametersLog);
    if (present_RequestParametersLog)
      list.add(RequestParametersLog);

    boolean present_AggrFieldList = true && (isSetAggrFieldList());
    list.add(present_AggrFieldList);
    if (present_AggrFieldList)
      list.add(AggrFieldList);

    boolean present_UcarIdArray = true && (isSetUcarIdArray());
    list.add(present_UcarIdArray);
    if (present_UcarIdArray)
      list.add(UcarIdArray);

    boolean present_SiteId = true && (isSetSiteId());
    list.add(present_SiteId);
    if (present_SiteId)
      list.add(SiteId);

    boolean present_UcarStatusArray = true && (isSetUcarStatusArray());
    list.add(present_UcarStatusArray);
    if (present_UcarStatusArray)
      list.add(UcarStatusArray);

    boolean present_NoUcarIdArray = true && (isSetNoUcarIdArray());
    list.add(present_NoUcarIdArray);
    if (present_NoUcarIdArray)
      list.add(NoUcarIdArray);

    boolean present_IsAuthenticated = true;
    list.add(present_IsAuthenticated);
    if (present_IsAuthenticated)
      list.add(IsAuthenticated);

    boolean present_Source = true;
    list.add(present_Source);
    if (present_Source)
      list.add(Source);

    boolean present_UserIdArray = true && (isSetUserIdArray());
    list.add(present_UserIdArray);
    if (present_UserIdArray)
      list.add(UserIdArray);

    boolean present_NoUserIdArray = true && (isSetNoUserIdArray());
    list.add(present_NoUserIdArray);
    if (present_NoUserIdArray)
      list.add(NoUserIdArray);

    boolean present_UcarSerialNumberArray = true && (isSetUcarSerialNumberArray());
    list.add(present_UcarSerialNumberArray);
    if (present_UcarSerialNumberArray)
      list.add(UcarSerialNumberArray);

    boolean present_KeyWord = true && (isSetKeyWord());
    list.add(present_KeyWord);
    if (present_KeyWord)
      list.add(KeyWord);

    boolean present_ColorArray = true && (isSetColorArray());
    list.add(present_ColorArray);
    if (present_ColorArray)
      list.add(ColorArray);

    boolean present_CarSource1L = true;
    list.add(present_CarSource1L);
    if (present_CarSource1L)
      list.add(CarSource1L);

    boolean present_PictureCount = true;
    list.add(present_PictureCount);
    if (present_PictureCount)
      list.add(PictureCount);

    boolean present_BigAreaIdArray = true && (isSetBigAreaIdArray());
    list.add(present_BigAreaIdArray);
    if (present_BigAreaIdArray)
      list.add(BigAreaIdArray);

    boolean present_ProvinceIdArray = true && (isSetProvinceIdArray());
    list.add(present_ProvinceIdArray);
    if (present_ProvinceIdArray)
      list.add(ProvinceIdArray);

    boolean present_CityIdArray = true && (isSetCityIdArray());
    list.add(present_CityIdArray);
    if (present_CityIdArray)
      list.add(CityIdArray);

    boolean present_NoCityIdArray = true && (isSetNoCityIdArray());
    list.add(present_NoCityIdArray);
    if (present_NoCityIdArray)
      list.add(NoCityIdArray);

    boolean present_RelateCityArray = true && (isSetRelateCityArray());
    list.add(present_RelateCityArray);
    if (present_RelateCityArray)
      list.add(RelateCityArray);

    boolean present_PriceLowerArray = true && (isSetPriceLowerArray());
    list.add(present_PriceLowerArray);
    if (present_PriceLowerArray)
      list.add(PriceLowerArray);

    boolean present_PriceHighArray = true && (isSetPriceHighArray());
    list.add(present_PriceHighArray);
    if (present_PriceHighArray)
      list.add(PriceHighArray);

    boolean present_CPriceLowerArray = true && (isSetCPriceLowerArray());
    list.add(present_CPriceLowerArray);
    if (present_CPriceLowerArray)
      list.add(CPriceLowerArray);

    boolean present_CPriceHighArray = true && (isSetCPriceHighArray());
    list.add(present_CPriceHighArray);
    if (present_CPriceHighArray)
      list.add(CPriceHighArray);

    boolean present_B2BPriceLowerArray = true && (isSetB2BPriceLowerArray());
    list.add(present_B2BPriceLowerArray);
    if (present_B2BPriceLowerArray)
      list.add(B2BPriceLowerArray);

    boolean present_B2BPriceHighArray = true && (isSetB2BPriceHighArray());
    list.add(present_B2BPriceHighArray);
    if (present_B2BPriceHighArray)
      list.add(B2BPriceHighArray);

    boolean present_CarAgeLowerArray = true && (isSetCarAgeLowerArray());
    list.add(present_CarAgeLowerArray);
    if (present_CarAgeLowerArray)
      list.add(CarAgeLowerArray);

    boolean present_CarAgeHighArray = true && (isSetCarAgeHighArray());
    list.add(present_CarAgeHighArray);
    if (present_CarAgeHighArray)
      list.add(CarAgeHighArray);

    boolean present_DrivingMileageLowerArray = true && (isSetDrivingMileageLowerArray());
    list.add(present_DrivingMileageLowerArray);
    if (present_DrivingMileageLowerArray)
      list.add(DrivingMileageLowerArray);

    boolean present_DrivingMileageHighArray = true && (isSetDrivingMileageHighArray());
    list.add(present_DrivingMileageHighArray);
    if (present_DrivingMileageHighArray)
      list.add(DrivingMileageHighArray);

    boolean present_SuperiorId = true;
    list.add(present_SuperiorId);
    if (present_SuperiorId)
      list.add(SuperiorId);

    boolean present_UserType = true;
    list.add(present_UserType);
    if (present_UserType)
      list.add(UserType);

    boolean present_IsNeglect = true;
    list.add(present_IsNeglect);
    if (present_IsNeglect)
      list.add(IsNeglect);

    boolean present_IsVideo = true;
    list.add(present_IsVideo);
    if (present_IsVideo)
      list.add(IsVideo);

    boolean present_IsFirstPicTrue = true;
    list.add(present_IsFirstPicTrue);
    if (present_IsFirstPicTrue)
      list.add(IsFirstPicTrue);

    boolean present_IsDealerRecommend = true;
    list.add(present_IsDealerRecommend);
    if (present_IsDealerRecommend)
      list.add(IsDealerRecommend);

    boolean present_CarSourceTypeArray = true && (isSetCarSourceTypeArray());
    list.add(present_CarSourceTypeArray);
    if (present_CarSourceTypeArray)
      list.add(CarSourceTypeArray);

    boolean present_CarTypeConfig = true && (isSetCarTypeConfig());
    list.add(present_CarTypeConfig);
    if (present_CarTypeConfig)
      list.add(CarTypeConfig);

    boolean present_IsRecommendGL = true;
    list.add(present_IsRecommendGL);
    if (present_IsRecommendGL)
      list.add(IsRecommendGL);

    boolean present_IsWarranty = true;
    list.add(present_IsWarranty);
    if (present_IsWarranty)
      list.add(IsWarranty);

    boolean present_WarrantyTypeArray = true && (isSetWarrantyTypeArray());
    list.add(present_WarrantyTypeArray);
    if (present_WarrantyTypeArray)
      list.add(WarrantyTypeArray);

    boolean present_IsTop = true;
    list.add(present_IsTop);
    if (present_IsTop)
      list.add(IsTop);

    boolean present_IsActivity = true;
    list.add(present_IsActivity);
    if (present_IsActivity)
      list.add(IsActivity);

    boolean present_IsBangmai = true;
    list.add(present_IsBangmai);
    if (present_IsBangmai)
      list.add(IsBangmai);

    boolean present_IsBangmaiche = true;
    list.add(present_IsBangmaiche);
    if (present_IsBangmaiche)
      list.add(IsBangmaiche);

    boolean present_IsShowMr = true;
    list.add(present_IsShowMr);
    if (present_IsShowMr)
      list.add(IsShowMr);

    boolean present_IsCarId = true;
    list.add(present_IsCarId);
    if (present_IsCarId)
      list.add(IsCarId);

    boolean present_IsB2B = true;
    list.add(present_IsB2B);
    if (present_IsB2B)
      list.add(IsB2B);

    boolean present_CrmCustomerIdArray = true && (isSetCrmCustomerIdArray());
    list.add(present_CrmCustomerIdArray);
    if (present_CrmCustomerIdArray)
      list.add(CrmCustomerIdArray);

    boolean present_IsCheckReportJson = true;
    list.add(present_IsCheckReportJson);
    if (present_IsCheckReportJson)
      list.add(IsCheckReportJson);

    boolean present_EnvirStandardArray = true && (isSetEnvirStandardArray());
    list.add(present_EnvirStandardArray);
    if (present_EnvirStandardArray)
      list.add(EnvirStandardArray);

    boolean present_ConsumptionLowerArray = true && (isSetConsumptionLowerArray());
    list.add(present_ConsumptionLowerArray);
    if (present_ConsumptionLowerArray)
      list.add(ConsumptionLowerArray);

    boolean present_ConsumptionHighArray = true && (isSetConsumptionHighArray());
    list.add(present_ConsumptionHighArray);
    if (present_ConsumptionHighArray)
      list.add(ConsumptionHighArray);

    boolean present_OilTypeArray = true && (isSetOilTypeArray());
    list.add(present_OilTypeArray);
    if (present_OilTypeArray)
      list.add(OilTypeArray);

    boolean present_EngineLocationArray = true && (isSetEngineLocationArray());
    list.add(present_EngineLocationArray);
    if (present_EngineLocationArray)
      list.add(EngineLocationArray);

    boolean present_BodyDoorsLowerArray = true && (isSetBodyDoorsLowerArray());
    list.add(present_BodyDoorsLowerArray);
    if (present_BodyDoorsLowerArray)
      list.add(BodyDoorsLowerArray);

    boolean present_BodyDoorsHighArray = true && (isSetBodyDoorsHighArray());
    list.add(present_BodyDoorsHighArray);
    if (present_BodyDoorsHighArray)
      list.add(BodyDoorsHighArray);

    boolean present_SeatNumLowerArray = true && (isSetSeatNumLowerArray());
    list.add(present_SeatNumLowerArray);
    if (present_SeatNumLowerArray)
      list.add(SeatNumLowerArray);

    boolean present_SeatNumHighArray = true && (isSetSeatNumHighArray());
    list.add(present_SeatNumHighArray);
    if (present_SeatNumHighArray)
      list.add(SeatNumHighArray);

    boolean present_IsWagon = true;
    list.add(present_IsWagon);
    if (present_IsWagon)
      list.add(IsWagon);

    boolean present_DriveTypeArray = true && (isSetDriveTypeArray());
    list.add(present_DriveTypeArray);
    if (present_DriveTypeArray)
      list.add(DriveTypeArray);

    boolean present_CsBodyFormArray = true && (isSetCsBodyFormArray());
    list.add(present_CsBodyFormArray);
    if (present_CsBodyFormArray)
      list.add(CsBodyFormArray);

    boolean present_CarLevelArray = true && (isSetCarLevelArray());
    list.add(present_CarLevelArray);
    if (present_CarLevelArray)
      list.add(CarLevelArray);

    boolean present_CarLevelSecondArray = true && (isSetCarLevelSecondArray());
    list.add(present_CarLevelSecondArray);
    if (present_CarLevelSecondArray)
      list.add(CarLevelSecondArray);

    boolean present_CarYearArray = true && (isSetCarYearArray());
    list.add(present_CarYearArray);
    if (present_CarYearArray)
      list.add(CarYearArray);

    boolean present_MainBrandArray = true && (isSetMainBrandArray());
    list.add(present_MainBrandArray);
    if (present_MainBrandArray)
      list.add(MainBrandArray);

    boolean present_BrandArray = true && (isSetBrandArray());
    list.add(present_BrandArray);
    if (present_BrandArray)
      list.add(BrandArray);

    boolean present_CarSerialArray = true && (isSetCarSerialArray());
    list.add(present_CarSerialArray);
    if (present_CarSerialArray)
      list.add(CarSerialArray);

    boolean present_CarIDArray = true && (isSetCarIDArray());
    list.add(present_CarIDArray);
    if (present_CarIDArray)
      list.add(CarIDArray);

    boolean present_GearBoxTypeArray = true && (isSetGearBoxTypeArray());
    list.add(present_GearBoxTypeArray);
    if (present_GearBoxTypeArray)
      list.add(GearBoxTypeArray);

    boolean present_ExhaustLevelLowerArray = true && (isSetExhaustLevelLowerArray());
    list.add(present_ExhaustLevelLowerArray);
    if (present_ExhaustLevelLowerArray)
      list.add(ExhaustLevelLowerArray);

    boolean present_ExhaustLevelHighArray = true && (isSetExhaustLevelHighArray());
    list.add(present_ExhaustLevelHighArray);
    if (present_ExhaustLevelHighArray)
      list.add(ExhaustLevelHighArray);

    boolean present_ExhaustLevelArray = true && (isSetExhaustLevelArray());
    list.add(present_ExhaustLevelArray);
    if (present_ExhaustLevelArray)
      list.add(ExhaustLevelArray);

    boolean present_CountryArray = true && (isSetCountryArray());
    list.add(present_CountryArray);
    if (present_CountryArray)
      list.add(CountryArray);

    boolean present_BrandAttrArray = true && (isSetBrandAttrArray());
    list.add(present_BrandAttrArray);
    if (present_BrandAttrArray)
      list.add(BrandAttrArray);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchCondition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommonFlag()).compareTo(other.isSetCommonFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommonFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CommonFlag, other.CommonFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestSource()).compareTo(other.isSetRequestSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequestSource, other.RequestSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturnFieldArray()).compareTo(other.isSetReturnFieldArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnFieldArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReturnFieldArray, other.ReturnFieldArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderByFieldArray()).compareTo(other.isSetOrderByFieldArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderByFieldArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OrderByFieldArray, other.OrderByFieldArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderByIsDESCArray()).compareTo(other.isSetOrderByIsDESCArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderByIsDESCArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OrderByIsDESCArray, other.OrderByIsDESCArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSortBoostFlag()).compareTo(other.isSetSortBoostFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSortBoostFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SortBoostFlag, other.SortBoostFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageSize()).compareTo(other.isSetPageSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PageSize, other.PageSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPageIndex()).compareTo(other.isSetPageIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PageIndex, other.PageIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDistanceKm()).compareTo(other.isSetDistanceKm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDistanceKm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DistanceKm, other.DistanceKm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Location, other.Location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCountSearch()).compareTo(other.isSetIsCountSearch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCountSearch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCountSearch, other.IsCountSearch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestParametersLog()).compareTo(other.isSetRequestParametersLog());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestParametersLog()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RequestParametersLog, other.RequestParametersLog);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAggrFieldList()).compareTo(other.isSetAggrFieldList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAggrFieldList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.AggrFieldList, other.AggrFieldList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcarIdArray()).compareTo(other.isSetUcarIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UcarIdArray, other.UcarIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSiteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SiteId, other.SiteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcarStatusArray()).compareTo(other.isSetUcarStatusArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarStatusArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UcarStatusArray, other.UcarStatusArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoUcarIdArray()).compareTo(other.isSetNoUcarIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoUcarIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NoUcarIdArray, other.NoUcarIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAuthenticated()).compareTo(other.isSetIsAuthenticated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAuthenticated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsAuthenticated, other.IsAuthenticated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Source, other.Source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserIdArray()).compareTo(other.isSetUserIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserIdArray, other.UserIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoUserIdArray()).compareTo(other.isSetNoUserIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoUserIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NoUserIdArray, other.NoUserIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcarSerialNumberArray()).compareTo(other.isSetUcarSerialNumberArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcarSerialNumberArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UcarSerialNumberArray, other.UcarSerialNumberArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyWord()).compareTo(other.isSetKeyWord());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyWord()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KeyWord, other.KeyWord);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColorArray()).compareTo(other.isSetColorArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColorArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ColorArray, other.ColorArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarSource1L()).compareTo(other.isSetCarSource1L());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarSource1L()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarSource1L, other.CarSource1L);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPictureCount()).compareTo(other.isSetPictureCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPictureCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PictureCount, other.PictureCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBigAreaIdArray()).compareTo(other.isSetBigAreaIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBigAreaIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BigAreaIdArray, other.BigAreaIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProvinceIdArray()).compareTo(other.isSetProvinceIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProvinceIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ProvinceIdArray, other.ProvinceIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCityIdArray()).compareTo(other.isSetCityIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCityIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CityIdArray, other.CityIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoCityIdArray()).compareTo(other.isSetNoCityIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoCityIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.NoCityIdArray, other.NoCityIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateCityArray()).compareTo(other.isSetRelateCityArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateCityArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.RelateCityArray, other.RelateCityArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceLowerArray()).compareTo(other.isSetPriceLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PriceLowerArray, other.PriceLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPriceHighArray()).compareTo(other.isSetPriceHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PriceHighArray, other.PriceHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCPriceLowerArray()).compareTo(other.isSetCPriceLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCPriceLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CPriceLowerArray, other.CPriceLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCPriceHighArray()).compareTo(other.isSetCPriceHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCPriceHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CPriceHighArray, other.CPriceHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2BPriceLowerArray()).compareTo(other.isSetB2BPriceLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2BPriceLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.B2BPriceLowerArray, other.B2BPriceLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB2BPriceHighArray()).compareTo(other.isSetB2BPriceHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB2BPriceHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.B2BPriceHighArray, other.B2BPriceHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarAgeLowerArray()).compareTo(other.isSetCarAgeLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarAgeLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarAgeLowerArray, other.CarAgeLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarAgeHighArray()).compareTo(other.isSetCarAgeHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarAgeHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarAgeHighArray, other.CarAgeHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrivingMileageLowerArray()).compareTo(other.isSetDrivingMileageLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrivingMileageLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DrivingMileageLowerArray, other.DrivingMileageLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrivingMileageHighArray()).compareTo(other.isSetDrivingMileageHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrivingMileageHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DrivingMileageHighArray, other.DrivingMileageHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuperiorId()).compareTo(other.isSetSuperiorId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuperiorId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SuperiorId, other.SuperiorId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserType()).compareTo(other.isSetUserType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.UserType, other.UserType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsNeglect()).compareTo(other.isSetIsNeglect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsNeglect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsNeglect, other.IsNeglect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsVideo()).compareTo(other.isSetIsVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsVideo, other.IsVideo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFirstPicTrue()).compareTo(other.isSetIsFirstPicTrue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFirstPicTrue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsFirstPicTrue, other.IsFirstPicTrue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsDealerRecommend()).compareTo(other.isSetIsDealerRecommend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsDealerRecommend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsDealerRecommend, other.IsDealerRecommend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarSourceTypeArray()).compareTo(other.isSetCarSourceTypeArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarSourceTypeArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarSourceTypeArray, other.CarSourceTypeArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarTypeConfig()).compareTo(other.isSetCarTypeConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarTypeConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarTypeConfig, other.CarTypeConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsRecommendGL()).compareTo(other.isSetIsRecommendGL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRecommendGL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsRecommendGL, other.IsRecommendGL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsWarranty()).compareTo(other.isSetIsWarranty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsWarranty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsWarranty, other.IsWarranty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWarrantyTypeArray()).compareTo(other.isSetWarrantyTypeArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWarrantyTypeArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.WarrantyTypeArray, other.WarrantyTypeArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsTop()).compareTo(other.isSetIsTop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsTop, other.IsTop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActivity()).compareTo(other.isSetIsActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsActivity, other.IsActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBangmai()).compareTo(other.isSetIsBangmai());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBangmai()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsBangmai, other.IsBangmai);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsBangmaiche()).compareTo(other.isSetIsBangmaiche());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsBangmaiche()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsBangmaiche, other.IsBangmaiche);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsShowMr()).compareTo(other.isSetIsShowMr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsShowMr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsShowMr, other.IsShowMr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCarId()).compareTo(other.isSetIsCarId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCarId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCarId, other.IsCarId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsB2B()).compareTo(other.isSetIsB2B());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsB2B()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsB2B, other.IsB2B);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrmCustomerIdArray()).compareTo(other.isSetCrmCustomerIdArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrmCustomerIdArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CrmCustomerIdArray, other.CrmCustomerIdArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsCheckReportJson()).compareTo(other.isSetIsCheckReportJson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCheckReportJson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsCheckReportJson, other.IsCheckReportJson);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEnvirStandardArray()).compareTo(other.isSetEnvirStandardArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEnvirStandardArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EnvirStandardArray, other.EnvirStandardArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumptionLowerArray()).compareTo(other.isSetConsumptionLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumptionLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ConsumptionLowerArray, other.ConsumptionLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumptionHighArray()).compareTo(other.isSetConsumptionHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumptionHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ConsumptionHighArray, other.ConsumptionHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOilTypeArray()).compareTo(other.isSetOilTypeArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOilTypeArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.OilTypeArray, other.OilTypeArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngineLocationArray()).compareTo(other.isSetEngineLocationArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngineLocationArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.EngineLocationArray, other.EngineLocationArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyDoorsLowerArray()).compareTo(other.isSetBodyDoorsLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyDoorsLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BodyDoorsLowerArray, other.BodyDoorsLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBodyDoorsHighArray()).compareTo(other.isSetBodyDoorsHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodyDoorsHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BodyDoorsHighArray, other.BodyDoorsHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatNumLowerArray()).compareTo(other.isSetSeatNumLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatNumLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SeatNumLowerArray, other.SeatNumLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSeatNumHighArray()).compareTo(other.isSetSeatNumHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatNumHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.SeatNumHighArray, other.SeatNumHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsWagon()).compareTo(other.isSetIsWagon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsWagon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IsWagon, other.IsWagon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDriveTypeArray()).compareTo(other.isSetDriveTypeArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDriveTypeArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DriveTypeArray, other.DriveTypeArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCsBodyFormArray()).compareTo(other.isSetCsBodyFormArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCsBodyFormArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CsBodyFormArray, other.CsBodyFormArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarLevelArray()).compareTo(other.isSetCarLevelArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarLevelArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarLevelArray, other.CarLevelArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarLevelSecondArray()).compareTo(other.isSetCarLevelSecondArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarLevelSecondArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarLevelSecondArray, other.CarLevelSecondArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarYearArray()).compareTo(other.isSetCarYearArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarYearArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarYearArray, other.CarYearArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMainBrandArray()).compareTo(other.isSetMainBrandArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMainBrandArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MainBrandArray, other.MainBrandArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandArray()).compareTo(other.isSetBrandArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BrandArray, other.BrandArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarSerialArray()).compareTo(other.isSetCarSerialArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarSerialArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarSerialArray, other.CarSerialArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarIDArray()).compareTo(other.isSetCarIDArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarIDArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CarIDArray, other.CarIDArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGearBoxTypeArray()).compareTo(other.isSetGearBoxTypeArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGearBoxTypeArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.GearBoxTypeArray, other.GearBoxTypeArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhaustLevelLowerArray()).compareTo(other.isSetExhaustLevelLowerArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhaustLevelLowerArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExhaustLevelLowerArray, other.ExhaustLevelLowerArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhaustLevelHighArray()).compareTo(other.isSetExhaustLevelHighArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhaustLevelHighArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExhaustLevelHighArray, other.ExhaustLevelHighArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExhaustLevelArray()).compareTo(other.isSetExhaustLevelArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExhaustLevelArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ExhaustLevelArray, other.ExhaustLevelArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryArray()).compareTo(other.isSetCountryArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.CountryArray, other.CountryArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrandAttrArray()).compareTo(other.isSetBrandAttrArray());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandAttrArray()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.BrandAttrArray, other.BrandAttrArray);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchCondition(");
    boolean first = true;

    sb.append("CommonFlag:");
    sb.append(this.CommonFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequestSource:");
    sb.append(this.RequestSource);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ReturnFieldArray:");
    if (this.ReturnFieldArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ReturnFieldArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OrderByFieldArray:");
    if (this.OrderByFieldArray == null) {
      sb.append("null");
    } else {
      sb.append(this.OrderByFieldArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OrderByIsDESCArray:");
    if (this.OrderByIsDESCArray == null) {
      sb.append("null");
    } else {
      sb.append(this.OrderByIsDESCArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SortBoostFlag:");
    sb.append(this.SortBoostFlag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PageSize:");
    sb.append(this.PageSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PageIndex:");
    sb.append(this.PageIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DistanceKm:");
    sb.append(this.DistanceKm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Location:");
    if (this.Location == null) {
      sb.append("null");
    } else {
      sb.append(this.Location);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCountSearch:");
    sb.append(this.IsCountSearch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("RequestParametersLog:");
    if (this.RequestParametersLog == null) {
      sb.append("null");
    } else {
      sb.append(this.RequestParametersLog);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("AggrFieldList:");
    if (this.AggrFieldList == null) {
      sb.append("null");
    } else {
      sb.append(this.AggrFieldList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UcarIdArray:");
    if (this.UcarIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.UcarIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SiteId:");
    if (this.SiteId == null) {
      sb.append("null");
    } else {
      sb.append(this.SiteId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UcarStatusArray:");
    if (this.UcarStatusArray == null) {
      sb.append("null");
    } else {
      sb.append(this.UcarStatusArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NoUcarIdArray:");
    if (this.NoUcarIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.NoUcarIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsAuthenticated:");
    sb.append(this.IsAuthenticated);
    first = false;
    if (!first) sb.append(", ");
    sb.append("Source:");
    sb.append(this.Source);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UserIdArray:");
    if (this.UserIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.UserIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NoUserIdArray:");
    if (this.NoUserIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.NoUserIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("UcarSerialNumberArray:");
    if (this.UcarSerialNumberArray == null) {
      sb.append("null");
    } else {
      sb.append(this.UcarSerialNumberArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("KeyWord:");
    if (this.KeyWord == null) {
      sb.append("null");
    } else {
      sb.append(this.KeyWord);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ColorArray:");
    if (this.ColorArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ColorArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarSource1L:");
    sb.append(this.CarSource1L);
    first = false;
    if (!first) sb.append(", ");
    sb.append("PictureCount:");
    sb.append(this.PictureCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("BigAreaIdArray:");
    if (this.BigAreaIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.BigAreaIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ProvinceIdArray:");
    if (this.ProvinceIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ProvinceIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CityIdArray:");
    if (this.CityIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CityIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("NoCityIdArray:");
    if (this.NoCityIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.NoCityIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("RelateCityArray:");
    if (this.RelateCityArray == null) {
      sb.append("null");
    } else {
      sb.append(this.RelateCityArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PriceLowerArray:");
    if (this.PriceLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.PriceLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("PriceHighArray:");
    if (this.PriceHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.PriceHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CPriceLowerArray:");
    if (this.CPriceLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CPriceLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CPriceHighArray:");
    if (this.CPriceHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CPriceHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("B2BPriceLowerArray:");
    if (this.B2BPriceLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.B2BPriceLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("B2BPriceHighArray:");
    if (this.B2BPriceHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.B2BPriceHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarAgeLowerArray:");
    if (this.CarAgeLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarAgeLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarAgeHighArray:");
    if (this.CarAgeHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarAgeHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DrivingMileageLowerArray:");
    if (this.DrivingMileageLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.DrivingMileageLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("DrivingMileageHighArray:");
    if (this.DrivingMileageHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.DrivingMileageHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SuperiorId:");
    sb.append(this.SuperiorId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("UserType:");
    sb.append(this.UserType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsNeglect:");
    sb.append(this.IsNeglect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsVideo:");
    sb.append(this.IsVideo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsFirstPicTrue:");
    sb.append(this.IsFirstPicTrue);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsDealerRecommend:");
    sb.append(this.IsDealerRecommend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarSourceTypeArray:");
    if (this.CarSourceTypeArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarSourceTypeArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarTypeConfig:");
    if (this.CarTypeConfig == null) {
      sb.append("null");
    } else {
      sb.append(this.CarTypeConfig);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsRecommendGL:");
    sb.append(this.IsRecommendGL);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsWarranty:");
    sb.append(this.IsWarranty);
    first = false;
    if (!first) sb.append(", ");
    sb.append("WarrantyTypeArray:");
    if (this.WarrantyTypeArray == null) {
      sb.append("null");
    } else {
      sb.append(this.WarrantyTypeArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsTop:");
    sb.append(this.IsTop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsActivity:");
    sb.append(this.IsActivity);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsBangmai:");
    sb.append(this.IsBangmai);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsBangmaiche:");
    sb.append(this.IsBangmaiche);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsShowMr:");
    sb.append(this.IsShowMr);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCarId:");
    sb.append(this.IsCarId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsB2B:");
    sb.append(this.IsB2B);
    first = false;
    if (!first) sb.append(", ");
    sb.append("CrmCustomerIdArray:");
    if (this.CrmCustomerIdArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CrmCustomerIdArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsCheckReportJson:");
    sb.append(this.IsCheckReportJson);
    first = false;
    if (!first) sb.append(", ");
    sb.append("EnvirStandardArray:");
    if (this.EnvirStandardArray == null) {
      sb.append("null");
    } else {
      sb.append(this.EnvirStandardArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ConsumptionLowerArray:");
    if (this.ConsumptionLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ConsumptionLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ConsumptionHighArray:");
    if (this.ConsumptionHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ConsumptionHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("OilTypeArray:");
    if (this.OilTypeArray == null) {
      sb.append("null");
    } else {
      sb.append(this.OilTypeArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("EngineLocationArray:");
    if (this.EngineLocationArray == null) {
      sb.append("null");
    } else {
      sb.append(this.EngineLocationArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BodyDoorsLowerArray:");
    if (this.BodyDoorsLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.BodyDoorsLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BodyDoorsHighArray:");
    if (this.BodyDoorsHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.BodyDoorsHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SeatNumLowerArray:");
    if (this.SeatNumLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.SeatNumLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("SeatNumHighArray:");
    if (this.SeatNumHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.SeatNumHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("IsWagon:");
    sb.append(this.IsWagon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DriveTypeArray:");
    if (this.DriveTypeArray == null) {
      sb.append("null");
    } else {
      sb.append(this.DriveTypeArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CsBodyFormArray:");
    if (this.CsBodyFormArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CsBodyFormArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarLevelArray:");
    if (this.CarLevelArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarLevelArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarLevelSecondArray:");
    if (this.CarLevelSecondArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarLevelSecondArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarYearArray:");
    if (this.CarYearArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarYearArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("MainBrandArray:");
    if (this.MainBrandArray == null) {
      sb.append("null");
    } else {
      sb.append(this.MainBrandArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BrandArray:");
    if (this.BrandArray == null) {
      sb.append("null");
    } else {
      sb.append(this.BrandArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarSerialArray:");
    if (this.CarSerialArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarSerialArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CarIDArray:");
    if (this.CarIDArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CarIDArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("GearBoxTypeArray:");
    if (this.GearBoxTypeArray == null) {
      sb.append("null");
    } else {
      sb.append(this.GearBoxTypeArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExhaustLevelLowerArray:");
    if (this.ExhaustLevelLowerArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ExhaustLevelLowerArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExhaustLevelHighArray:");
    if (this.ExhaustLevelHighArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ExhaustLevelHighArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ExhaustLevelArray:");
    if (this.ExhaustLevelArray == null) {
      sb.append("null");
    } else {
      sb.append(this.ExhaustLevelArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("CountryArray:");
    if (this.CountryArray == null) {
      sb.append("null");
    } else {
      sb.append(this.CountryArray);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("BrandAttrArray:");
    if (this.BrandAttrArray == null) {
      sb.append("null");
    } else {
      sb.append(this.BrandAttrArray);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchConditionStandardSchemeFactory implements SchemeFactory {
    public SearchConditionStandardScheme getScheme() {
      return new SearchConditionStandardScheme();
    }
  }

  private static class SearchConditionStandardScheme extends StandardScheme<SearchCondition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchCondition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 101: // COMMON_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.CommonFlag = iprot.readI32();
              struct.setCommonFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // REQUEST_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.RequestSource = iprot.readI32();
              struct.setRequestSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 103: // RETURN_FIELD_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.ReturnFieldArray = new ArrayList<String>(_list136.size);
                String _elem137;
                for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                {
                  _elem137 = iprot.readString();
                  struct.ReturnFieldArray.add(_elem137);
                }
                iprot.readListEnd();
              }
              struct.setReturnFieldArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 104: // ORDER_BY_FIELD_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list139 = iprot.readListBegin();
                struct.OrderByFieldArray = new ArrayList<String>(_list139.size);
                String _elem140;
                for (int _i141 = 0; _i141 < _list139.size; ++_i141)
                {
                  _elem140 = iprot.readString();
                  struct.OrderByFieldArray.add(_elem140);
                }
                iprot.readListEnd();
              }
              struct.setOrderByFieldArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 105: // ORDER_BY_IS_DESCARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list142 = iprot.readListBegin();
                struct.OrderByIsDESCArray = new ArrayList<Boolean>(_list142.size);
                boolean _elem143;
                for (int _i144 = 0; _i144 < _list142.size; ++_i144)
                {
                  _elem143 = iprot.readBool();
                  struct.OrderByIsDESCArray.add(_elem143);
                }
                iprot.readListEnd();
              }
              struct.setOrderByIsDESCArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 106: // SORT_BOOST_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SortBoostFlag = iprot.readI32();
              struct.setSortBoostFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 107: // PAGE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PageSize = iprot.readI32();
              struct.setPageSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 108: // PAGE_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PageIndex = iprot.readI32();
              struct.setPageIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 110: // DISTANCE_KM
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.DistanceKm = iprot.readDouble();
              struct.setDistanceKmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 111: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.Location = iprot.readString();
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 112: // IS_COUNT_SEARCH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.IsCountSearch = iprot.readBool();
              struct.setIsCountSearchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 113: // REQUEST_PARAMETERS_LOG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.RequestParametersLog = iprot.readString();
              struct.setRequestParametersLogIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 114: // AGGR_FIELD_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list145 = iprot.readListBegin();
                struct.AggrFieldList = new ArrayList<AggrCondition>(_list145.size);
                AggrCondition _elem146;
                for (int _i147 = 0; _i147 < _list145.size; ++_i147)
                {
                  _elem146 = new AggrCondition();
                  _elem146.read(iprot);
                  struct.AggrFieldList.add(_elem146);
                }
                iprot.readListEnd();
              }
              struct.setAggrFieldListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // UCAR_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list148 = iprot.readListBegin();
                struct.UcarIdArray = new ArrayList<Integer>(_list148.size);
                int _elem149;
                for (int _i150 = 0; _i150 < _list148.size; ++_i150)
                {
                  _elem149 = iprot.readI32();
                  struct.UcarIdArray.add(_elem149);
                }
                iprot.readListEnd();
              }
              struct.setUcarIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SITE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list151 = iprot.readListBegin();
                struct.SiteId = new ArrayList<Integer>(_list151.size);
                int _elem152;
                for (int _i153 = 0; _i153 < _list151.size; ++_i153)
                {
                  _elem152 = iprot.readI32();
                  struct.SiteId.add(_elem152);
                }
                iprot.readListEnd();
              }
              struct.setSiteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UCAR_STATUS_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list154 = iprot.readListBegin();
                struct.UcarStatusArray = new ArrayList<Integer>(_list154.size);
                int _elem155;
                for (int _i156 = 0; _i156 < _list154.size; ++_i156)
                {
                  _elem155 = iprot.readI32();
                  struct.UcarStatusArray.add(_elem155);
                }
                iprot.readListEnd();
              }
              struct.setUcarStatusArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NO_UCAR_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list157 = iprot.readListBegin();
                struct.NoUcarIdArray = new ArrayList<Integer>(_list157.size);
                int _elem158;
                for (int _i159 = 0; _i159 < _list157.size; ++_i159)
                {
                  _elem158 = iprot.readI32();
                  struct.NoUcarIdArray.add(_elem158);
                }
                iprot.readListEnd();
              }
              struct.setNoUcarIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_AUTHENTICATED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsAuthenticated = iprot.readI32();
              struct.setIsAuthenticatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.Source = iprot.readI32();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.UserIdArray = new ArrayList<Integer>(_list160.size);
                int _elem161;
                for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                {
                  _elem161 = iprot.readI32();
                  struct.UserIdArray.add(_elem161);
                }
                iprot.readListEnd();
              }
              struct.setUserIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NO_USER_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list163 = iprot.readListBegin();
                struct.NoUserIdArray = new ArrayList<Integer>(_list163.size);
                int _elem164;
                for (int _i165 = 0; _i165 < _list163.size; ++_i165)
                {
                  _elem164 = iprot.readI32();
                  struct.NoUserIdArray.add(_elem164);
                }
                iprot.readListEnd();
              }
              struct.setNoUserIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UCAR_SERIAL_NUMBER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list166 = iprot.readListBegin();
                struct.UcarSerialNumberArray = new ArrayList<String>(_list166.size);
                String _elem167;
                for (int _i168 = 0; _i168 < _list166.size; ++_i168)
                {
                  _elem167 = iprot.readString();
                  struct.UcarSerialNumberArray.add(_elem167);
                }
                iprot.readListEnd();
              }
              struct.setUcarSerialNumberArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // KEY_WORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KeyWord = iprot.readString();
              struct.setKeyWordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COLOR_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list169 = iprot.readListBegin();
                struct.ColorArray = new ArrayList<String>(_list169.size);
                String _elem170;
                for (int _i171 = 0; _i171 < _list169.size; ++_i171)
                {
                  _elem170 = iprot.readString();
                  struct.ColorArray.add(_elem170);
                }
                iprot.readListEnd();
              }
              struct.setColorArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CAR_SOURCE1_L
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.CarSource1L = iprot.readI32();
              struct.setCarSource1LIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PICTURE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.PictureCount = iprot.readI32();
              struct.setPictureCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // BIG_AREA_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list172 = iprot.readListBegin();
                struct.BigAreaIdArray = new ArrayList<Integer>(_list172.size);
                int _elem173;
                for (int _i174 = 0; _i174 < _list172.size; ++_i174)
                {
                  _elem173 = iprot.readI32();
                  struct.BigAreaIdArray.add(_elem173);
                }
                iprot.readListEnd();
              }
              struct.setBigAreaIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PROVINCE_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list175 = iprot.readListBegin();
                struct.ProvinceIdArray = new ArrayList<Integer>(_list175.size);
                int _elem176;
                for (int _i177 = 0; _i177 < _list175.size; ++_i177)
                {
                  _elem176 = iprot.readI32();
                  struct.ProvinceIdArray.add(_elem176);
                }
                iprot.readListEnd();
              }
              struct.setProvinceIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CITY_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                struct.CityIdArray = new ArrayList<Integer>(_list178.size);
                int _elem179;
                for (int _i180 = 0; _i180 < _list178.size; ++_i180)
                {
                  _elem179 = iprot.readI32();
                  struct.CityIdArray.add(_elem179);
                }
                iprot.readListEnd();
              }
              struct.setCityIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // NO_CITY_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list181 = iprot.readListBegin();
                struct.NoCityIdArray = new ArrayList<Integer>(_list181.size);
                int _elem182;
                for (int _i183 = 0; _i183 < _list181.size; ++_i183)
                {
                  _elem182 = iprot.readI32();
                  struct.NoCityIdArray.add(_elem182);
                }
                iprot.readListEnd();
              }
              struct.setNoCityIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // RELATE_CITY_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.RelateCityArray = new ArrayList<Integer>(_list184.size);
                int _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = iprot.readI32();
                  struct.RelateCityArray.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setRelateCityArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRICE_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list187 = iprot.readListBegin();
                struct.PriceLowerArray = new ArrayList<Double>(_list187.size);
                double _elem188;
                for (int _i189 = 0; _i189 < _list187.size; ++_i189)
                {
                  _elem188 = iprot.readDouble();
                  struct.PriceLowerArray.add(_elem188);
                }
                iprot.readListEnd();
              }
              struct.setPriceLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PRICE_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list190 = iprot.readListBegin();
                struct.PriceHighArray = new ArrayList<Double>(_list190.size);
                double _elem191;
                for (int _i192 = 0; _i192 < _list190.size; ++_i192)
                {
                  _elem191 = iprot.readDouble();
                  struct.PriceHighArray.add(_elem191);
                }
                iprot.readListEnd();
              }
              struct.setPriceHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CPRICE_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list193 = iprot.readListBegin();
                struct.CPriceLowerArray = new ArrayList<Double>(_list193.size);
                double _elem194;
                for (int _i195 = 0; _i195 < _list193.size; ++_i195)
                {
                  _elem194 = iprot.readDouble();
                  struct.CPriceLowerArray.add(_elem194);
                }
                iprot.readListEnd();
              }
              struct.setCPriceLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // CPRICE_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list196 = iprot.readListBegin();
                struct.CPriceHighArray = new ArrayList<Double>(_list196.size);
                double _elem197;
                for (int _i198 = 0; _i198 < _list196.size; ++_i198)
                {
                  _elem197 = iprot.readDouble();
                  struct.CPriceHighArray.add(_elem197);
                }
                iprot.readListEnd();
              }
              struct.setCPriceHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // B2_BPRICE_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list199 = iprot.readListBegin();
                struct.B2BPriceLowerArray = new ArrayList<Double>(_list199.size);
                double _elem200;
                for (int _i201 = 0; _i201 < _list199.size; ++_i201)
                {
                  _elem200 = iprot.readDouble();
                  struct.B2BPriceLowerArray.add(_elem200);
                }
                iprot.readListEnd();
              }
              struct.setB2BPriceLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // B2_BPRICE_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                struct.B2BPriceHighArray = new ArrayList<Double>(_list202.size);
                double _elem203;
                for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                {
                  _elem203 = iprot.readDouble();
                  struct.B2BPriceHighArray.add(_elem203);
                }
                iprot.readListEnd();
              }
              struct.setB2BPriceHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // CAR_AGE_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list205 = iprot.readListBegin();
                struct.CarAgeLowerArray = new ArrayList<Integer>(_list205.size);
                int _elem206;
                for (int _i207 = 0; _i207 < _list205.size; ++_i207)
                {
                  _elem206 = iprot.readI32();
                  struct.CarAgeLowerArray.add(_elem206);
                }
                iprot.readListEnd();
              }
              struct.setCarAgeLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // CAR_AGE_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                struct.CarAgeHighArray = new ArrayList<Integer>(_list208.size);
                int _elem209;
                for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                {
                  _elem209 = iprot.readI32();
                  struct.CarAgeHighArray.add(_elem209);
                }
                iprot.readListEnd();
              }
              struct.setCarAgeHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 36: // DRIVING_MILEAGE_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                struct.DrivingMileageLowerArray = new ArrayList<Integer>(_list211.size);
                int _elem212;
                for (int _i213 = 0; _i213 < _list211.size; ++_i213)
                {
                  _elem212 = iprot.readI32();
                  struct.DrivingMileageLowerArray.add(_elem212);
                }
                iprot.readListEnd();
              }
              struct.setDrivingMileageLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 37: // DRIVING_MILEAGE_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.DrivingMileageHighArray = new ArrayList<Integer>(_list214.size);
                int _elem215;
                for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                {
                  _elem215 = iprot.readI32();
                  struct.DrivingMileageHighArray.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setDrivingMileageHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 39: // SUPERIOR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.SuperiorId = iprot.readI32();
              struct.setSuperiorIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // USER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.UserType = iprot.readI32();
              struct.setUserTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // IS_NEGLECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsNeglect = iprot.readI32();
              struct.setIsNeglectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // IS_VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsVideo = iprot.readI32();
              struct.setIsVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // IS_FIRST_PIC_TRUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsFirstPicTrue = iprot.readI32();
              struct.setIsFirstPicTrueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 45: // IS_DEALER_RECOMMEND
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsDealerRecommend = iprot.readI32();
              struct.setIsDealerRecommendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 46: // CAR_SOURCE_TYPE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                struct.CarSourceTypeArray = new ArrayList<Integer>(_list217.size);
                int _elem218;
                for (int _i219 = 0; _i219 < _list217.size; ++_i219)
                {
                  _elem218 = iprot.readI32();
                  struct.CarSourceTypeArray.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setCarSourceTypeArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // CAR_TYPE_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                struct.CarTypeConfig = new ArrayList<Integer>(_list220.size);
                int _elem221;
                for (int _i222 = 0; _i222 < _list220.size; ++_i222)
                {
                  _elem221 = iprot.readI32();
                  struct.CarTypeConfig.add(_elem221);
                }
                iprot.readListEnd();
              }
              struct.setCarTypeConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 51: // IS_RECOMMEND_GL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsRecommendGL = iprot.readI32();
              struct.setIsRecommendGLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 52: // IS_WARRANTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsWarranty = iprot.readI32();
              struct.setIsWarrantyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 53: // WARRANTY_TYPE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list223 = iprot.readListBegin();
                struct.WarrantyTypeArray = new ArrayList<Integer>(_list223.size);
                int _elem224;
                for (int _i225 = 0; _i225 < _list223.size; ++_i225)
                {
                  _elem224 = iprot.readI32();
                  struct.WarrantyTypeArray.add(_elem224);
                }
                iprot.readListEnd();
              }
              struct.setWarrantyTypeArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 54: // IS_TOP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsTop = iprot.readI32();
              struct.setIsTopIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 55: // IS_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsActivity = iprot.readI32();
              struct.setIsActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 56: // IS_BANGMAI
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsBangmai = iprot.readI32();
              struct.setIsBangmaiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 57: // IS_BANGMAICHE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsBangmaiche = iprot.readI32();
              struct.setIsBangmaicheIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 58: // IS_SHOW_MR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsShowMr = iprot.readI32();
              struct.setIsShowMrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 59: // IS_CAR_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsCarId = iprot.readI32();
              struct.setIsCarIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // IS_B2_B
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsB2B = iprot.readI32();
              struct.setIsB2BIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // CRM_CUSTOMER_ID_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list226 = iprot.readListBegin();
                struct.CrmCustomerIdArray = new ArrayList<Integer>(_list226.size);
                int _elem227;
                for (int _i228 = 0; _i228 < _list226.size; ++_i228)
                {
                  _elem227 = iprot.readI32();
                  struct.CrmCustomerIdArray.add(_elem227);
                }
                iprot.readListEnd();
              }
              struct.setCrmCustomerIdArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // IS_CHECK_REPORT_JSON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsCheckReportJson = iprot.readI32();
              struct.setIsCheckReportJsonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 201: // ENVIR_STANDARD_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list229 = iprot.readListBegin();
                struct.EnvirStandardArray = new ArrayList<Integer>(_list229.size);
                int _elem230;
                for (int _i231 = 0; _i231 < _list229.size; ++_i231)
                {
                  _elem230 = iprot.readI32();
                  struct.EnvirStandardArray.add(_elem230);
                }
                iprot.readListEnd();
              }
              struct.setEnvirStandardArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 202: // CONSUMPTION_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                struct.ConsumptionLowerArray = new ArrayList<Double>(_list232.size);
                double _elem233;
                for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                {
                  _elem233 = iprot.readDouble();
                  struct.ConsumptionLowerArray.add(_elem233);
                }
                iprot.readListEnd();
              }
              struct.setConsumptionLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 203: // CONSUMPTION_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list235 = iprot.readListBegin();
                struct.ConsumptionHighArray = new ArrayList<Double>(_list235.size);
                double _elem236;
                for (int _i237 = 0; _i237 < _list235.size; ++_i237)
                {
                  _elem236 = iprot.readDouble();
                  struct.ConsumptionHighArray.add(_elem236);
                }
                iprot.readListEnd();
              }
              struct.setConsumptionHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 204: // OIL_TYPE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list238 = iprot.readListBegin();
                struct.OilTypeArray = new ArrayList<Integer>(_list238.size);
                int _elem239;
                for (int _i240 = 0; _i240 < _list238.size; ++_i240)
                {
                  _elem239 = iprot.readI32();
                  struct.OilTypeArray.add(_elem239);
                }
                iprot.readListEnd();
              }
              struct.setOilTypeArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 205: // ENGINE_LOCATION_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list241 = iprot.readListBegin();
                struct.EngineLocationArray = new ArrayList<Integer>(_list241.size);
                int _elem242;
                for (int _i243 = 0; _i243 < _list241.size; ++_i243)
                {
                  _elem242 = iprot.readI32();
                  struct.EngineLocationArray.add(_elem242);
                }
                iprot.readListEnd();
              }
              struct.setEngineLocationArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 206: // BODY_DOORS_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list244 = iprot.readListBegin();
                struct.BodyDoorsLowerArray = new ArrayList<Integer>(_list244.size);
                int _elem245;
                for (int _i246 = 0; _i246 < _list244.size; ++_i246)
                {
                  _elem245 = iprot.readI32();
                  struct.BodyDoorsLowerArray.add(_elem245);
                }
                iprot.readListEnd();
              }
              struct.setBodyDoorsLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 207: // BODY_DOORS_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list247 = iprot.readListBegin();
                struct.BodyDoorsHighArray = new ArrayList<Integer>(_list247.size);
                int _elem248;
                for (int _i249 = 0; _i249 < _list247.size; ++_i249)
                {
                  _elem248 = iprot.readI32();
                  struct.BodyDoorsHighArray.add(_elem248);
                }
                iprot.readListEnd();
              }
              struct.setBodyDoorsHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 208: // SEAT_NUM_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                struct.SeatNumLowerArray = new ArrayList<Integer>(_list250.size);
                int _elem251;
                for (int _i252 = 0; _i252 < _list250.size; ++_i252)
                {
                  _elem251 = iprot.readI32();
                  struct.SeatNumLowerArray.add(_elem251);
                }
                iprot.readListEnd();
              }
              struct.setSeatNumLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 209: // SEAT_NUM_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list253 = iprot.readListBegin();
                struct.SeatNumHighArray = new ArrayList<Integer>(_list253.size);
                int _elem254;
                for (int _i255 = 0; _i255 < _list253.size; ++_i255)
                {
                  _elem254 = iprot.readI32();
                  struct.SeatNumHighArray.add(_elem254);
                }
                iprot.readListEnd();
              }
              struct.setSeatNumHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 210: // IS_WAGON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.IsWagon = iprot.readI32();
              struct.setIsWagonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 211: // DRIVE_TYPE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.DriveTypeArray = new ArrayList<Integer>(_list256.size);
                int _elem257;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = iprot.readI32();
                  struct.DriveTypeArray.add(_elem257);
                }
                iprot.readListEnd();
              }
              struct.setDriveTypeArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 212: // CS_BODY_FORM_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list259 = iprot.readListBegin();
                struct.CsBodyFormArray = new ArrayList<Integer>(_list259.size);
                int _elem260;
                for (int _i261 = 0; _i261 < _list259.size; ++_i261)
                {
                  _elem260 = iprot.readI32();
                  struct.CsBodyFormArray.add(_elem260);
                }
                iprot.readListEnd();
              }
              struct.setCsBodyFormArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 213: // CAR_LEVEL_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                struct.CarLevelArray = new ArrayList<Integer>(_list262.size);
                int _elem263;
                for (int _i264 = 0; _i264 < _list262.size; ++_i264)
                {
                  _elem263 = iprot.readI32();
                  struct.CarLevelArray.add(_elem263);
                }
                iprot.readListEnd();
              }
              struct.setCarLevelArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 214: // CAR_LEVEL_SECOND_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list265 = iprot.readListBegin();
                struct.CarLevelSecondArray = new ArrayList<Integer>(_list265.size);
                int _elem266;
                for (int _i267 = 0; _i267 < _list265.size; ++_i267)
                {
                  _elem266 = iprot.readI32();
                  struct.CarLevelSecondArray.add(_elem266);
                }
                iprot.readListEnd();
              }
              struct.setCarLevelSecondArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 215: // CAR_YEAR_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list268 = iprot.readListBegin();
                struct.CarYearArray = new ArrayList<String>(_list268.size);
                String _elem269;
                for (int _i270 = 0; _i270 < _list268.size; ++_i270)
                {
                  _elem269 = iprot.readString();
                  struct.CarYearArray.add(_elem269);
                }
                iprot.readListEnd();
              }
              struct.setCarYearArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 216: // MAIN_BRAND_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list271 = iprot.readListBegin();
                struct.MainBrandArray = new ArrayList<Integer>(_list271.size);
                int _elem272;
                for (int _i273 = 0; _i273 < _list271.size; ++_i273)
                {
                  _elem272 = iprot.readI32();
                  struct.MainBrandArray.add(_elem272);
                }
                iprot.readListEnd();
              }
              struct.setMainBrandArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 217: // BRAND_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list274 = iprot.readListBegin();
                struct.BrandArray = new ArrayList<Integer>(_list274.size);
                int _elem275;
                for (int _i276 = 0; _i276 < _list274.size; ++_i276)
                {
                  _elem275 = iprot.readI32();
                  struct.BrandArray.add(_elem275);
                }
                iprot.readListEnd();
              }
              struct.setBrandArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 218: // CAR_SERIAL_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list277 = iprot.readListBegin();
                struct.CarSerialArray = new ArrayList<Integer>(_list277.size);
                int _elem278;
                for (int _i279 = 0; _i279 < _list277.size; ++_i279)
                {
                  _elem278 = iprot.readI32();
                  struct.CarSerialArray.add(_elem278);
                }
                iprot.readListEnd();
              }
              struct.setCarSerialArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 219: // CAR_IDARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                struct.CarIDArray = new ArrayList<Integer>(_list280.size);
                int _elem281;
                for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                {
                  _elem281 = iprot.readI32();
                  struct.CarIDArray.add(_elem281);
                }
                iprot.readListEnd();
              }
              struct.setCarIDArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 220: // GEAR_BOX_TYPE_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list283 = iprot.readListBegin();
                struct.GearBoxTypeArray = new ArrayList<Integer>(_list283.size);
                int _elem284;
                for (int _i285 = 0; _i285 < _list283.size; ++_i285)
                {
                  _elem284 = iprot.readI32();
                  struct.GearBoxTypeArray.add(_elem284);
                }
                iprot.readListEnd();
              }
              struct.setGearBoxTypeArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 221: // EXHAUST_LEVEL_LOWER_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
                struct.ExhaustLevelLowerArray = new ArrayList<Double>(_list286.size);
                double _elem287;
                for (int _i288 = 0; _i288 < _list286.size; ++_i288)
                {
                  _elem287 = iprot.readDouble();
                  struct.ExhaustLevelLowerArray.add(_elem287);
                }
                iprot.readListEnd();
              }
              struct.setExhaustLevelLowerArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 222: // EXHAUST_LEVEL_HIGH_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list289 = iprot.readListBegin();
                struct.ExhaustLevelHighArray = new ArrayList<Double>(_list289.size);
                double _elem290;
                for (int _i291 = 0; _i291 < _list289.size; ++_i291)
                {
                  _elem290 = iprot.readDouble();
                  struct.ExhaustLevelHighArray.add(_elem290);
                }
                iprot.readListEnd();
              }
              struct.setExhaustLevelHighArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 223: // EXHAUST_LEVEL_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list292 = iprot.readListBegin();
                struct.ExhaustLevelArray = new ArrayList<Integer>(_list292.size);
                int _elem293;
                for (int _i294 = 0; _i294 < _list292.size; ++_i294)
                {
                  _elem293 = iprot.readI32();
                  struct.ExhaustLevelArray.add(_elem293);
                }
                iprot.readListEnd();
              }
              struct.setExhaustLevelArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 224: // COUNTRY_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list295 = iprot.readListBegin();
                struct.CountryArray = new ArrayList<Integer>(_list295.size);
                int _elem296;
                for (int _i297 = 0; _i297 < _list295.size; ++_i297)
                {
                  _elem296 = iprot.readI32();
                  struct.CountryArray.add(_elem296);
                }
                iprot.readListEnd();
              }
              struct.setCountryArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 225: // BRAND_ATTR_ARRAY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list298 = iprot.readListBegin();
                struct.BrandAttrArray = new ArrayList<Integer>(_list298.size);
                int _elem299;
                for (int _i300 = 0; _i300 < _list298.size; ++_i300)
                {
                  _elem299 = iprot.readI32();
                  struct.BrandAttrArray.add(_elem299);
                }
                iprot.readListEnd();
              }
              struct.setBrandAttrArrayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchCondition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.UcarIdArray != null) {
        oprot.writeFieldBegin(UCAR_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.UcarIdArray.size()));
          for (int _iter301 : struct.UcarIdArray)
          {
            oprot.writeI32(_iter301);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SiteId != null) {
        oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.SiteId.size()));
          for (int _iter302 : struct.SiteId)
          {
            oprot.writeI32(_iter302);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.UcarStatusArray != null) {
        oprot.writeFieldBegin(UCAR_STATUS_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.UcarStatusArray.size()));
          for (int _iter303 : struct.UcarStatusArray)
          {
            oprot.writeI32(_iter303);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.NoUcarIdArray != null) {
        oprot.writeFieldBegin(NO_UCAR_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.NoUcarIdArray.size()));
          for (int _iter304 : struct.NoUcarIdArray)
          {
            oprot.writeI32(_iter304);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_AUTHENTICATED_FIELD_DESC);
      oprot.writeI32(struct.IsAuthenticated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_FIELD_DESC);
      oprot.writeI32(struct.Source);
      oprot.writeFieldEnd();
      if (struct.UserIdArray != null) {
        oprot.writeFieldBegin(USER_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.UserIdArray.size()));
          for (int _iter305 : struct.UserIdArray)
          {
            oprot.writeI32(_iter305);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.NoUserIdArray != null) {
        oprot.writeFieldBegin(NO_USER_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.NoUserIdArray.size()));
          for (int _iter306 : struct.NoUserIdArray)
          {
            oprot.writeI32(_iter306);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.UcarSerialNumberArray != null) {
        oprot.writeFieldBegin(UCAR_SERIAL_NUMBER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.UcarSerialNumberArray.size()));
          for (String _iter307 : struct.UcarSerialNumberArray)
          {
            oprot.writeString(_iter307);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.KeyWord != null) {
        oprot.writeFieldBegin(KEY_WORD_FIELD_DESC);
        oprot.writeString(struct.KeyWord);
        oprot.writeFieldEnd();
      }
      if (struct.ColorArray != null) {
        oprot.writeFieldBegin(COLOR_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ColorArray.size()));
          for (String _iter308 : struct.ColorArray)
          {
            oprot.writeString(_iter308);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAR_SOURCE1_L_FIELD_DESC);
      oprot.writeI32(struct.CarSource1L);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PICTURE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.PictureCount);
      oprot.writeFieldEnd();
      if (struct.BigAreaIdArray != null) {
        oprot.writeFieldBegin(BIG_AREA_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.BigAreaIdArray.size()));
          for (int _iter309 : struct.BigAreaIdArray)
          {
            oprot.writeI32(_iter309);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ProvinceIdArray != null) {
        oprot.writeFieldBegin(PROVINCE_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ProvinceIdArray.size()));
          for (int _iter310 : struct.ProvinceIdArray)
          {
            oprot.writeI32(_iter310);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CityIdArray != null) {
        oprot.writeFieldBegin(CITY_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CityIdArray.size()));
          for (int _iter311 : struct.CityIdArray)
          {
            oprot.writeI32(_iter311);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.NoCityIdArray != null) {
        oprot.writeFieldBegin(NO_CITY_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.NoCityIdArray.size()));
          for (int _iter312 : struct.NoCityIdArray)
          {
            oprot.writeI32(_iter312);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.RelateCityArray != null) {
        oprot.writeFieldBegin(RELATE_CITY_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.RelateCityArray.size()));
          for (int _iter313 : struct.RelateCityArray)
          {
            oprot.writeI32(_iter313);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.PriceLowerArray != null) {
        oprot.writeFieldBegin(PRICE_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.PriceLowerArray.size()));
          for (double _iter314 : struct.PriceLowerArray)
          {
            oprot.writeDouble(_iter314);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.PriceHighArray != null) {
        oprot.writeFieldBegin(PRICE_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.PriceHighArray.size()));
          for (double _iter315 : struct.PriceHighArray)
          {
            oprot.writeDouble(_iter315);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CPriceLowerArray != null) {
        oprot.writeFieldBegin(CPRICE_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.CPriceLowerArray.size()));
          for (double _iter316 : struct.CPriceLowerArray)
          {
            oprot.writeDouble(_iter316);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CPriceHighArray != null) {
        oprot.writeFieldBegin(CPRICE_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.CPriceHighArray.size()));
          for (double _iter317 : struct.CPriceHighArray)
          {
            oprot.writeDouble(_iter317);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.B2BPriceLowerArray != null) {
        oprot.writeFieldBegin(B2_BPRICE_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.B2BPriceLowerArray.size()));
          for (double _iter318 : struct.B2BPriceLowerArray)
          {
            oprot.writeDouble(_iter318);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.B2BPriceHighArray != null) {
        oprot.writeFieldBegin(B2_BPRICE_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.B2BPriceHighArray.size()));
          for (double _iter319 : struct.B2BPriceHighArray)
          {
            oprot.writeDouble(_iter319);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarAgeLowerArray != null) {
        oprot.writeFieldBegin(CAR_AGE_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarAgeLowerArray.size()));
          for (int _iter320 : struct.CarAgeLowerArray)
          {
            oprot.writeI32(_iter320);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarAgeHighArray != null) {
        oprot.writeFieldBegin(CAR_AGE_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarAgeHighArray.size()));
          for (int _iter321 : struct.CarAgeHighArray)
          {
            oprot.writeI32(_iter321);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.DrivingMileageLowerArray != null) {
        oprot.writeFieldBegin(DRIVING_MILEAGE_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.DrivingMileageLowerArray.size()));
          for (int _iter322 : struct.DrivingMileageLowerArray)
          {
            oprot.writeI32(_iter322);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.DrivingMileageHighArray != null) {
        oprot.writeFieldBegin(DRIVING_MILEAGE_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.DrivingMileageHighArray.size()));
          for (int _iter323 : struct.DrivingMileageHighArray)
          {
            oprot.writeI32(_iter323);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUPERIOR_ID_FIELD_DESC);
      oprot.writeI32(struct.SuperiorId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(USER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.UserType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_NEGLECT_FIELD_DESC);
      oprot.writeI32(struct.IsNeglect);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_VIDEO_FIELD_DESC);
      oprot.writeI32(struct.IsVideo);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FIRST_PIC_TRUE_FIELD_DESC);
      oprot.writeI32(struct.IsFirstPicTrue);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_DEALER_RECOMMEND_FIELD_DESC);
      oprot.writeI32(struct.IsDealerRecommend);
      oprot.writeFieldEnd();
      if (struct.CarSourceTypeArray != null) {
        oprot.writeFieldBegin(CAR_SOURCE_TYPE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarSourceTypeArray.size()));
          for (int _iter324 : struct.CarSourceTypeArray)
          {
            oprot.writeI32(_iter324);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarTypeConfig != null) {
        oprot.writeFieldBegin(CAR_TYPE_CONFIG_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarTypeConfig.size()));
          for (int _iter325 : struct.CarTypeConfig)
          {
            oprot.writeI32(_iter325);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_RECOMMEND_GL_FIELD_DESC);
      oprot.writeI32(struct.IsRecommendGL);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_WARRANTY_FIELD_DESC);
      oprot.writeI32(struct.IsWarranty);
      oprot.writeFieldEnd();
      if (struct.WarrantyTypeArray != null) {
        oprot.writeFieldBegin(WARRANTY_TYPE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.WarrantyTypeArray.size()));
          for (int _iter326 : struct.WarrantyTypeArray)
          {
            oprot.writeI32(_iter326);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TOP_FIELD_DESC);
      oprot.writeI32(struct.IsTop);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ACTIVITY_FIELD_DESC);
      oprot.writeI32(struct.IsActivity);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BANGMAI_FIELD_DESC);
      oprot.writeI32(struct.IsBangmai);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_BANGMAICHE_FIELD_DESC);
      oprot.writeI32(struct.IsBangmaiche);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SHOW_MR_FIELD_DESC);
      oprot.writeI32(struct.IsShowMr);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CAR_ID_FIELD_DESC);
      oprot.writeI32(struct.IsCarId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_B2_B_FIELD_DESC);
      oprot.writeI32(struct.IsB2B);
      oprot.writeFieldEnd();
      if (struct.CrmCustomerIdArray != null) {
        oprot.writeFieldBegin(CRM_CUSTOMER_ID_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CrmCustomerIdArray.size()));
          for (int _iter327 : struct.CrmCustomerIdArray)
          {
            oprot.writeI32(_iter327);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_CHECK_REPORT_JSON_FIELD_DESC);
      oprot.writeI32(struct.IsCheckReportJson);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMON_FLAG_FIELD_DESC);
      oprot.writeI32(struct.CommonFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_SOURCE_FIELD_DESC);
      oprot.writeI32(struct.RequestSource);
      oprot.writeFieldEnd();
      if (struct.ReturnFieldArray != null) {
        oprot.writeFieldBegin(RETURN_FIELD_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.ReturnFieldArray.size()));
          for (String _iter328 : struct.ReturnFieldArray)
          {
            oprot.writeString(_iter328);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OrderByFieldArray != null) {
        oprot.writeFieldBegin(ORDER_BY_FIELD_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.OrderByFieldArray.size()));
          for (String _iter329 : struct.OrderByFieldArray)
          {
            oprot.writeString(_iter329);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OrderByIsDESCArray != null) {
        oprot.writeFieldBegin(ORDER_BY_IS_DESCARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.OrderByIsDESCArray.size()));
          for (boolean _iter330 : struct.OrderByIsDESCArray)
          {
            oprot.writeBool(_iter330);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SORT_BOOST_FLAG_FIELD_DESC);
      oprot.writeI32(struct.SortBoostFlag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_SIZE_FIELD_DESC);
      oprot.writeI32(struct.PageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PAGE_INDEX_FIELD_DESC);
      oprot.writeI32(struct.PageIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DISTANCE_KM_FIELD_DESC);
      oprot.writeDouble(struct.DistanceKm);
      oprot.writeFieldEnd();
      if (struct.Location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        oprot.writeString(struct.Location);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_COUNT_SEARCH_FIELD_DESC);
      oprot.writeBool(struct.IsCountSearch);
      oprot.writeFieldEnd();
      if (struct.RequestParametersLog != null) {
        oprot.writeFieldBegin(REQUEST_PARAMETERS_LOG_FIELD_DESC);
        oprot.writeString(struct.RequestParametersLog);
        oprot.writeFieldEnd();
      }
      if (struct.AggrFieldList != null) {
        oprot.writeFieldBegin(AGGR_FIELD_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.AggrFieldList.size()));
          for (AggrCondition _iter331 : struct.AggrFieldList)
          {
            _iter331.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.EnvirStandardArray != null) {
        oprot.writeFieldBegin(ENVIR_STANDARD_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.EnvirStandardArray.size()));
          for (int _iter332 : struct.EnvirStandardArray)
          {
            oprot.writeI32(_iter332);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ConsumptionLowerArray != null) {
        oprot.writeFieldBegin(CONSUMPTION_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.ConsumptionLowerArray.size()));
          for (double _iter333 : struct.ConsumptionLowerArray)
          {
            oprot.writeDouble(_iter333);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ConsumptionHighArray != null) {
        oprot.writeFieldBegin(CONSUMPTION_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.ConsumptionHighArray.size()));
          for (double _iter334 : struct.ConsumptionHighArray)
          {
            oprot.writeDouble(_iter334);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.OilTypeArray != null) {
        oprot.writeFieldBegin(OIL_TYPE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.OilTypeArray.size()));
          for (int _iter335 : struct.OilTypeArray)
          {
            oprot.writeI32(_iter335);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.EngineLocationArray != null) {
        oprot.writeFieldBegin(ENGINE_LOCATION_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.EngineLocationArray.size()));
          for (int _iter336 : struct.EngineLocationArray)
          {
            oprot.writeI32(_iter336);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BodyDoorsLowerArray != null) {
        oprot.writeFieldBegin(BODY_DOORS_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.BodyDoorsLowerArray.size()));
          for (int _iter337 : struct.BodyDoorsLowerArray)
          {
            oprot.writeI32(_iter337);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BodyDoorsHighArray != null) {
        oprot.writeFieldBegin(BODY_DOORS_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.BodyDoorsHighArray.size()));
          for (int _iter338 : struct.BodyDoorsHighArray)
          {
            oprot.writeI32(_iter338);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SeatNumLowerArray != null) {
        oprot.writeFieldBegin(SEAT_NUM_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.SeatNumLowerArray.size()));
          for (int _iter339 : struct.SeatNumLowerArray)
          {
            oprot.writeI32(_iter339);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.SeatNumHighArray != null) {
        oprot.writeFieldBegin(SEAT_NUM_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.SeatNumHighArray.size()));
          for (int _iter340 : struct.SeatNumHighArray)
          {
            oprot.writeI32(_iter340);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_WAGON_FIELD_DESC);
      oprot.writeI32(struct.IsWagon);
      oprot.writeFieldEnd();
      if (struct.DriveTypeArray != null) {
        oprot.writeFieldBegin(DRIVE_TYPE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.DriveTypeArray.size()));
          for (int _iter341 : struct.DriveTypeArray)
          {
            oprot.writeI32(_iter341);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CsBodyFormArray != null) {
        oprot.writeFieldBegin(CS_BODY_FORM_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CsBodyFormArray.size()));
          for (int _iter342 : struct.CsBodyFormArray)
          {
            oprot.writeI32(_iter342);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarLevelArray != null) {
        oprot.writeFieldBegin(CAR_LEVEL_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarLevelArray.size()));
          for (int _iter343 : struct.CarLevelArray)
          {
            oprot.writeI32(_iter343);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarLevelSecondArray != null) {
        oprot.writeFieldBegin(CAR_LEVEL_SECOND_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarLevelSecondArray.size()));
          for (int _iter344 : struct.CarLevelSecondArray)
          {
            oprot.writeI32(_iter344);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarYearArray != null) {
        oprot.writeFieldBegin(CAR_YEAR_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.CarYearArray.size()));
          for (String _iter345 : struct.CarYearArray)
          {
            oprot.writeString(_iter345);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.MainBrandArray != null) {
        oprot.writeFieldBegin(MAIN_BRAND_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.MainBrandArray.size()));
          for (int _iter346 : struct.MainBrandArray)
          {
            oprot.writeI32(_iter346);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BrandArray != null) {
        oprot.writeFieldBegin(BRAND_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.BrandArray.size()));
          for (int _iter347 : struct.BrandArray)
          {
            oprot.writeI32(_iter347);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarSerialArray != null) {
        oprot.writeFieldBegin(CAR_SERIAL_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarSerialArray.size()));
          for (int _iter348 : struct.CarSerialArray)
          {
            oprot.writeI32(_iter348);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CarIDArray != null) {
        oprot.writeFieldBegin(CAR_IDARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CarIDArray.size()));
          for (int _iter349 : struct.CarIDArray)
          {
            oprot.writeI32(_iter349);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.GearBoxTypeArray != null) {
        oprot.writeFieldBegin(GEAR_BOX_TYPE_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.GearBoxTypeArray.size()));
          for (int _iter350 : struct.GearBoxTypeArray)
          {
            oprot.writeI32(_iter350);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ExhaustLevelLowerArray != null) {
        oprot.writeFieldBegin(EXHAUST_LEVEL_LOWER_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.ExhaustLevelLowerArray.size()));
          for (double _iter351 : struct.ExhaustLevelLowerArray)
          {
            oprot.writeDouble(_iter351);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ExhaustLevelHighArray != null) {
        oprot.writeFieldBegin(EXHAUST_LEVEL_HIGH_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.ExhaustLevelHighArray.size()));
          for (double _iter352 : struct.ExhaustLevelHighArray)
          {
            oprot.writeDouble(_iter352);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.ExhaustLevelArray != null) {
        oprot.writeFieldBegin(EXHAUST_LEVEL_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.ExhaustLevelArray.size()));
          for (int _iter353 : struct.ExhaustLevelArray)
          {
            oprot.writeI32(_iter353);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.CountryArray != null) {
        oprot.writeFieldBegin(COUNTRY_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.CountryArray.size()));
          for (int _iter354 : struct.CountryArray)
          {
            oprot.writeI32(_iter354);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.BrandAttrArray != null) {
        oprot.writeFieldBegin(BRAND_ATTR_ARRAY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.BrandAttrArray.size()));
          for (int _iter355 : struct.BrandAttrArray)
          {
            oprot.writeI32(_iter355);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchConditionTupleSchemeFactory implements SchemeFactory {
    public SearchConditionTupleScheme getScheme() {
      return new SearchConditionTupleScheme();
    }
  }

  private static class SearchConditionTupleScheme extends TupleScheme<SearchCondition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommonFlag()) {
        optionals.set(0);
      }
      if (struct.isSetRequestSource()) {
        optionals.set(1);
      }
      if (struct.isSetReturnFieldArray()) {
        optionals.set(2);
      }
      if (struct.isSetOrderByFieldArray()) {
        optionals.set(3);
      }
      if (struct.isSetOrderByIsDESCArray()) {
        optionals.set(4);
      }
      if (struct.isSetSortBoostFlag()) {
        optionals.set(5);
      }
      if (struct.isSetPageSize()) {
        optionals.set(6);
      }
      if (struct.isSetPageIndex()) {
        optionals.set(7);
      }
      if (struct.isSetDistanceKm()) {
        optionals.set(8);
      }
      if (struct.isSetLocation()) {
        optionals.set(9);
      }
      if (struct.isSetIsCountSearch()) {
        optionals.set(10);
      }
      if (struct.isSetRequestParametersLog()) {
        optionals.set(11);
      }
      if (struct.isSetAggrFieldList()) {
        optionals.set(12);
      }
      if (struct.isSetUcarIdArray()) {
        optionals.set(13);
      }
      if (struct.isSetSiteId()) {
        optionals.set(14);
      }
      if (struct.isSetUcarStatusArray()) {
        optionals.set(15);
      }
      if (struct.isSetNoUcarIdArray()) {
        optionals.set(16);
      }
      if (struct.isSetIsAuthenticated()) {
        optionals.set(17);
      }
      if (struct.isSetSource()) {
        optionals.set(18);
      }
      if (struct.isSetUserIdArray()) {
        optionals.set(19);
      }
      if (struct.isSetNoUserIdArray()) {
        optionals.set(20);
      }
      if (struct.isSetUcarSerialNumberArray()) {
        optionals.set(21);
      }
      if (struct.isSetKeyWord()) {
        optionals.set(22);
      }
      if (struct.isSetColorArray()) {
        optionals.set(23);
      }
      if (struct.isSetCarSource1L()) {
        optionals.set(24);
      }
      if (struct.isSetPictureCount()) {
        optionals.set(25);
      }
      if (struct.isSetBigAreaIdArray()) {
        optionals.set(26);
      }
      if (struct.isSetProvinceIdArray()) {
        optionals.set(27);
      }
      if (struct.isSetCityIdArray()) {
        optionals.set(28);
      }
      if (struct.isSetNoCityIdArray()) {
        optionals.set(29);
      }
      if (struct.isSetRelateCityArray()) {
        optionals.set(30);
      }
      if (struct.isSetPriceLowerArray()) {
        optionals.set(31);
      }
      if (struct.isSetPriceHighArray()) {
        optionals.set(32);
      }
      if (struct.isSetCPriceLowerArray()) {
        optionals.set(33);
      }
      if (struct.isSetCPriceHighArray()) {
        optionals.set(34);
      }
      if (struct.isSetB2BPriceLowerArray()) {
        optionals.set(35);
      }
      if (struct.isSetB2BPriceHighArray()) {
        optionals.set(36);
      }
      if (struct.isSetCarAgeLowerArray()) {
        optionals.set(37);
      }
      if (struct.isSetCarAgeHighArray()) {
        optionals.set(38);
      }
      if (struct.isSetDrivingMileageLowerArray()) {
        optionals.set(39);
      }
      if (struct.isSetDrivingMileageHighArray()) {
        optionals.set(40);
      }
      if (struct.isSetSuperiorId()) {
        optionals.set(41);
      }
      if (struct.isSetUserType()) {
        optionals.set(42);
      }
      if (struct.isSetIsNeglect()) {
        optionals.set(43);
      }
      if (struct.isSetIsVideo()) {
        optionals.set(44);
      }
      if (struct.isSetIsFirstPicTrue()) {
        optionals.set(45);
      }
      if (struct.isSetIsDealerRecommend()) {
        optionals.set(46);
      }
      if (struct.isSetCarSourceTypeArray()) {
        optionals.set(47);
      }
      if (struct.isSetCarTypeConfig()) {
        optionals.set(48);
      }
      if (struct.isSetIsRecommendGL()) {
        optionals.set(49);
      }
      if (struct.isSetIsWarranty()) {
        optionals.set(50);
      }
      if (struct.isSetWarrantyTypeArray()) {
        optionals.set(51);
      }
      if (struct.isSetIsTop()) {
        optionals.set(52);
      }
      if (struct.isSetIsActivity()) {
        optionals.set(53);
      }
      if (struct.isSetIsBangmai()) {
        optionals.set(54);
      }
      if (struct.isSetIsBangmaiche()) {
        optionals.set(55);
      }
      if (struct.isSetIsShowMr()) {
        optionals.set(56);
      }
      if (struct.isSetIsCarId()) {
        optionals.set(57);
      }
      if (struct.isSetIsB2B()) {
        optionals.set(58);
      }
      if (struct.isSetCrmCustomerIdArray()) {
        optionals.set(59);
      }
      if (struct.isSetIsCheckReportJson()) {
        optionals.set(60);
      }
      if (struct.isSetEnvirStandardArray()) {
        optionals.set(61);
      }
      if (struct.isSetConsumptionLowerArray()) {
        optionals.set(62);
      }
      if (struct.isSetConsumptionHighArray()) {
        optionals.set(63);
      }
      if (struct.isSetOilTypeArray()) {
        optionals.set(64);
      }
      if (struct.isSetEngineLocationArray()) {
        optionals.set(65);
      }
      if (struct.isSetBodyDoorsLowerArray()) {
        optionals.set(66);
      }
      if (struct.isSetBodyDoorsHighArray()) {
        optionals.set(67);
      }
      if (struct.isSetSeatNumLowerArray()) {
        optionals.set(68);
      }
      if (struct.isSetSeatNumHighArray()) {
        optionals.set(69);
      }
      if (struct.isSetIsWagon()) {
        optionals.set(70);
      }
      if (struct.isSetDriveTypeArray()) {
        optionals.set(71);
      }
      if (struct.isSetCsBodyFormArray()) {
        optionals.set(72);
      }
      if (struct.isSetCarLevelArray()) {
        optionals.set(73);
      }
      if (struct.isSetCarLevelSecondArray()) {
        optionals.set(74);
      }
      if (struct.isSetCarYearArray()) {
        optionals.set(75);
      }
      if (struct.isSetMainBrandArray()) {
        optionals.set(76);
      }
      if (struct.isSetBrandArray()) {
        optionals.set(77);
      }
      if (struct.isSetCarSerialArray()) {
        optionals.set(78);
      }
      if (struct.isSetCarIDArray()) {
        optionals.set(79);
      }
      if (struct.isSetGearBoxTypeArray()) {
        optionals.set(80);
      }
      if (struct.isSetExhaustLevelLowerArray()) {
        optionals.set(81);
      }
      if (struct.isSetExhaustLevelHighArray()) {
        optionals.set(82);
      }
      if (struct.isSetExhaustLevelArray()) {
        optionals.set(83);
      }
      if (struct.isSetCountryArray()) {
        optionals.set(84);
      }
      if (struct.isSetBrandAttrArray()) {
        optionals.set(85);
      }
      oprot.writeBitSet(optionals, 86);
      if (struct.isSetCommonFlag()) {
        oprot.writeI32(struct.CommonFlag);
      }
      if (struct.isSetRequestSource()) {
        oprot.writeI32(struct.RequestSource);
      }
      if (struct.isSetReturnFieldArray()) {
        {
          oprot.writeI32(struct.ReturnFieldArray.size());
          for (String _iter356 : struct.ReturnFieldArray)
          {
            oprot.writeString(_iter356);
          }
        }
      }
      if (struct.isSetOrderByFieldArray()) {
        {
          oprot.writeI32(struct.OrderByFieldArray.size());
          for (String _iter357 : struct.OrderByFieldArray)
          {
            oprot.writeString(_iter357);
          }
        }
      }
      if (struct.isSetOrderByIsDESCArray()) {
        {
          oprot.writeI32(struct.OrderByIsDESCArray.size());
          for (boolean _iter358 : struct.OrderByIsDESCArray)
          {
            oprot.writeBool(_iter358);
          }
        }
      }
      if (struct.isSetSortBoostFlag()) {
        oprot.writeI32(struct.SortBoostFlag);
      }
      if (struct.isSetPageSize()) {
        oprot.writeI32(struct.PageSize);
      }
      if (struct.isSetPageIndex()) {
        oprot.writeI32(struct.PageIndex);
      }
      if (struct.isSetDistanceKm()) {
        oprot.writeDouble(struct.DistanceKm);
      }
      if (struct.isSetLocation()) {
        oprot.writeString(struct.Location);
      }
      if (struct.isSetIsCountSearch()) {
        oprot.writeBool(struct.IsCountSearch);
      }
      if (struct.isSetRequestParametersLog()) {
        oprot.writeString(struct.RequestParametersLog);
      }
      if (struct.isSetAggrFieldList()) {
        {
          oprot.writeI32(struct.AggrFieldList.size());
          for (AggrCondition _iter359 : struct.AggrFieldList)
          {
            _iter359.write(oprot);
          }
        }
      }
      if (struct.isSetUcarIdArray()) {
        {
          oprot.writeI32(struct.UcarIdArray.size());
          for (int _iter360 : struct.UcarIdArray)
          {
            oprot.writeI32(_iter360);
          }
        }
      }
      if (struct.isSetSiteId()) {
        {
          oprot.writeI32(struct.SiteId.size());
          for (int _iter361 : struct.SiteId)
          {
            oprot.writeI32(_iter361);
          }
        }
      }
      if (struct.isSetUcarStatusArray()) {
        {
          oprot.writeI32(struct.UcarStatusArray.size());
          for (int _iter362 : struct.UcarStatusArray)
          {
            oprot.writeI32(_iter362);
          }
        }
      }
      if (struct.isSetNoUcarIdArray()) {
        {
          oprot.writeI32(struct.NoUcarIdArray.size());
          for (int _iter363 : struct.NoUcarIdArray)
          {
            oprot.writeI32(_iter363);
          }
        }
      }
      if (struct.isSetIsAuthenticated()) {
        oprot.writeI32(struct.IsAuthenticated);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.Source);
      }
      if (struct.isSetUserIdArray()) {
        {
          oprot.writeI32(struct.UserIdArray.size());
          for (int _iter364 : struct.UserIdArray)
          {
            oprot.writeI32(_iter364);
          }
        }
      }
      if (struct.isSetNoUserIdArray()) {
        {
          oprot.writeI32(struct.NoUserIdArray.size());
          for (int _iter365 : struct.NoUserIdArray)
          {
            oprot.writeI32(_iter365);
          }
        }
      }
      if (struct.isSetUcarSerialNumberArray()) {
        {
          oprot.writeI32(struct.UcarSerialNumberArray.size());
          for (String _iter366 : struct.UcarSerialNumberArray)
          {
            oprot.writeString(_iter366);
          }
        }
      }
      if (struct.isSetKeyWord()) {
        oprot.writeString(struct.KeyWord);
      }
      if (struct.isSetColorArray()) {
        {
          oprot.writeI32(struct.ColorArray.size());
          for (String _iter367 : struct.ColorArray)
          {
            oprot.writeString(_iter367);
          }
        }
      }
      if (struct.isSetCarSource1L()) {
        oprot.writeI32(struct.CarSource1L);
      }
      if (struct.isSetPictureCount()) {
        oprot.writeI32(struct.PictureCount);
      }
      if (struct.isSetBigAreaIdArray()) {
        {
          oprot.writeI32(struct.BigAreaIdArray.size());
          for (int _iter368 : struct.BigAreaIdArray)
          {
            oprot.writeI32(_iter368);
          }
        }
      }
      if (struct.isSetProvinceIdArray()) {
        {
          oprot.writeI32(struct.ProvinceIdArray.size());
          for (int _iter369 : struct.ProvinceIdArray)
          {
            oprot.writeI32(_iter369);
          }
        }
      }
      if (struct.isSetCityIdArray()) {
        {
          oprot.writeI32(struct.CityIdArray.size());
          for (int _iter370 : struct.CityIdArray)
          {
            oprot.writeI32(_iter370);
          }
        }
      }
      if (struct.isSetNoCityIdArray()) {
        {
          oprot.writeI32(struct.NoCityIdArray.size());
          for (int _iter371 : struct.NoCityIdArray)
          {
            oprot.writeI32(_iter371);
          }
        }
      }
      if (struct.isSetRelateCityArray()) {
        {
          oprot.writeI32(struct.RelateCityArray.size());
          for (int _iter372 : struct.RelateCityArray)
          {
            oprot.writeI32(_iter372);
          }
        }
      }
      if (struct.isSetPriceLowerArray()) {
        {
          oprot.writeI32(struct.PriceLowerArray.size());
          for (double _iter373 : struct.PriceLowerArray)
          {
            oprot.writeDouble(_iter373);
          }
        }
      }
      if (struct.isSetPriceHighArray()) {
        {
          oprot.writeI32(struct.PriceHighArray.size());
          for (double _iter374 : struct.PriceHighArray)
          {
            oprot.writeDouble(_iter374);
          }
        }
      }
      if (struct.isSetCPriceLowerArray()) {
        {
          oprot.writeI32(struct.CPriceLowerArray.size());
          for (double _iter375 : struct.CPriceLowerArray)
          {
            oprot.writeDouble(_iter375);
          }
        }
      }
      if (struct.isSetCPriceHighArray()) {
        {
          oprot.writeI32(struct.CPriceHighArray.size());
          for (double _iter376 : struct.CPriceHighArray)
          {
            oprot.writeDouble(_iter376);
          }
        }
      }
      if (struct.isSetB2BPriceLowerArray()) {
        {
          oprot.writeI32(struct.B2BPriceLowerArray.size());
          for (double _iter377 : struct.B2BPriceLowerArray)
          {
            oprot.writeDouble(_iter377);
          }
        }
      }
      if (struct.isSetB2BPriceHighArray()) {
        {
          oprot.writeI32(struct.B2BPriceHighArray.size());
          for (double _iter378 : struct.B2BPriceHighArray)
          {
            oprot.writeDouble(_iter378);
          }
        }
      }
      if (struct.isSetCarAgeLowerArray()) {
        {
          oprot.writeI32(struct.CarAgeLowerArray.size());
          for (int _iter379 : struct.CarAgeLowerArray)
          {
            oprot.writeI32(_iter379);
          }
        }
      }
      if (struct.isSetCarAgeHighArray()) {
        {
          oprot.writeI32(struct.CarAgeHighArray.size());
          for (int _iter380 : struct.CarAgeHighArray)
          {
            oprot.writeI32(_iter380);
          }
        }
      }
      if (struct.isSetDrivingMileageLowerArray()) {
        {
          oprot.writeI32(struct.DrivingMileageLowerArray.size());
          for (int _iter381 : struct.DrivingMileageLowerArray)
          {
            oprot.writeI32(_iter381);
          }
        }
      }
      if (struct.isSetDrivingMileageHighArray()) {
        {
          oprot.writeI32(struct.DrivingMileageHighArray.size());
          for (int _iter382 : struct.DrivingMileageHighArray)
          {
            oprot.writeI32(_iter382);
          }
        }
      }
      if (struct.isSetSuperiorId()) {
        oprot.writeI32(struct.SuperiorId);
      }
      if (struct.isSetUserType()) {
        oprot.writeI32(struct.UserType);
      }
      if (struct.isSetIsNeglect()) {
        oprot.writeI32(struct.IsNeglect);
      }
      if (struct.isSetIsVideo()) {
        oprot.writeI32(struct.IsVideo);
      }
      if (struct.isSetIsFirstPicTrue()) {
        oprot.writeI32(struct.IsFirstPicTrue);
      }
      if (struct.isSetIsDealerRecommend()) {
        oprot.writeI32(struct.IsDealerRecommend);
      }
      if (struct.isSetCarSourceTypeArray()) {
        {
          oprot.writeI32(struct.CarSourceTypeArray.size());
          for (int _iter383 : struct.CarSourceTypeArray)
          {
            oprot.writeI32(_iter383);
          }
        }
      }
      if (struct.isSetCarTypeConfig()) {
        {
          oprot.writeI32(struct.CarTypeConfig.size());
          for (int _iter384 : struct.CarTypeConfig)
          {
            oprot.writeI32(_iter384);
          }
        }
      }
      if (struct.isSetIsRecommendGL()) {
        oprot.writeI32(struct.IsRecommendGL);
      }
      if (struct.isSetIsWarranty()) {
        oprot.writeI32(struct.IsWarranty);
      }
      if (struct.isSetWarrantyTypeArray()) {
        {
          oprot.writeI32(struct.WarrantyTypeArray.size());
          for (int _iter385 : struct.WarrantyTypeArray)
          {
            oprot.writeI32(_iter385);
          }
        }
      }
      if (struct.isSetIsTop()) {
        oprot.writeI32(struct.IsTop);
      }
      if (struct.isSetIsActivity()) {
        oprot.writeI32(struct.IsActivity);
      }
      if (struct.isSetIsBangmai()) {
        oprot.writeI32(struct.IsBangmai);
      }
      if (struct.isSetIsBangmaiche()) {
        oprot.writeI32(struct.IsBangmaiche);
      }
      if (struct.isSetIsShowMr()) {
        oprot.writeI32(struct.IsShowMr);
      }
      if (struct.isSetIsCarId()) {
        oprot.writeI32(struct.IsCarId);
      }
      if (struct.isSetIsB2B()) {
        oprot.writeI32(struct.IsB2B);
      }
      if (struct.isSetCrmCustomerIdArray()) {
        {
          oprot.writeI32(struct.CrmCustomerIdArray.size());
          for (int _iter386 : struct.CrmCustomerIdArray)
          {
            oprot.writeI32(_iter386);
          }
        }
      }
      if (struct.isSetIsCheckReportJson()) {
        oprot.writeI32(struct.IsCheckReportJson);
      }
      if (struct.isSetEnvirStandardArray()) {
        {
          oprot.writeI32(struct.EnvirStandardArray.size());
          for (int _iter387 : struct.EnvirStandardArray)
          {
            oprot.writeI32(_iter387);
          }
        }
      }
      if (struct.isSetConsumptionLowerArray()) {
        {
          oprot.writeI32(struct.ConsumptionLowerArray.size());
          for (double _iter388 : struct.ConsumptionLowerArray)
          {
            oprot.writeDouble(_iter388);
          }
        }
      }
      if (struct.isSetConsumptionHighArray()) {
        {
          oprot.writeI32(struct.ConsumptionHighArray.size());
          for (double _iter389 : struct.ConsumptionHighArray)
          {
            oprot.writeDouble(_iter389);
          }
        }
      }
      if (struct.isSetOilTypeArray()) {
        {
          oprot.writeI32(struct.OilTypeArray.size());
          for (int _iter390 : struct.OilTypeArray)
          {
            oprot.writeI32(_iter390);
          }
        }
      }
      if (struct.isSetEngineLocationArray()) {
        {
          oprot.writeI32(struct.EngineLocationArray.size());
          for (int _iter391 : struct.EngineLocationArray)
          {
            oprot.writeI32(_iter391);
          }
        }
      }
      if (struct.isSetBodyDoorsLowerArray()) {
        {
          oprot.writeI32(struct.BodyDoorsLowerArray.size());
          for (int _iter392 : struct.BodyDoorsLowerArray)
          {
            oprot.writeI32(_iter392);
          }
        }
      }
      if (struct.isSetBodyDoorsHighArray()) {
        {
          oprot.writeI32(struct.BodyDoorsHighArray.size());
          for (int _iter393 : struct.BodyDoorsHighArray)
          {
            oprot.writeI32(_iter393);
          }
        }
      }
      if (struct.isSetSeatNumLowerArray()) {
        {
          oprot.writeI32(struct.SeatNumLowerArray.size());
          for (int _iter394 : struct.SeatNumLowerArray)
          {
            oprot.writeI32(_iter394);
          }
        }
      }
      if (struct.isSetSeatNumHighArray()) {
        {
          oprot.writeI32(struct.SeatNumHighArray.size());
          for (int _iter395 : struct.SeatNumHighArray)
          {
            oprot.writeI32(_iter395);
          }
        }
      }
      if (struct.isSetIsWagon()) {
        oprot.writeI32(struct.IsWagon);
      }
      if (struct.isSetDriveTypeArray()) {
        {
          oprot.writeI32(struct.DriveTypeArray.size());
          for (int _iter396 : struct.DriveTypeArray)
          {
            oprot.writeI32(_iter396);
          }
        }
      }
      if (struct.isSetCsBodyFormArray()) {
        {
          oprot.writeI32(struct.CsBodyFormArray.size());
          for (int _iter397 : struct.CsBodyFormArray)
          {
            oprot.writeI32(_iter397);
          }
        }
      }
      if (struct.isSetCarLevelArray()) {
        {
          oprot.writeI32(struct.CarLevelArray.size());
          for (int _iter398 : struct.CarLevelArray)
          {
            oprot.writeI32(_iter398);
          }
        }
      }
      if (struct.isSetCarLevelSecondArray()) {
        {
          oprot.writeI32(struct.CarLevelSecondArray.size());
          for (int _iter399 : struct.CarLevelSecondArray)
          {
            oprot.writeI32(_iter399);
          }
        }
      }
      if (struct.isSetCarYearArray()) {
        {
          oprot.writeI32(struct.CarYearArray.size());
          for (String _iter400 : struct.CarYearArray)
          {
            oprot.writeString(_iter400);
          }
        }
      }
      if (struct.isSetMainBrandArray()) {
        {
          oprot.writeI32(struct.MainBrandArray.size());
          for (int _iter401 : struct.MainBrandArray)
          {
            oprot.writeI32(_iter401);
          }
        }
      }
      if (struct.isSetBrandArray()) {
        {
          oprot.writeI32(struct.BrandArray.size());
          for (int _iter402 : struct.BrandArray)
          {
            oprot.writeI32(_iter402);
          }
        }
      }
      if (struct.isSetCarSerialArray()) {
        {
          oprot.writeI32(struct.CarSerialArray.size());
          for (int _iter403 : struct.CarSerialArray)
          {
            oprot.writeI32(_iter403);
          }
        }
      }
      if (struct.isSetCarIDArray()) {
        {
          oprot.writeI32(struct.CarIDArray.size());
          for (int _iter404 : struct.CarIDArray)
          {
            oprot.writeI32(_iter404);
          }
        }
      }
      if (struct.isSetGearBoxTypeArray()) {
        {
          oprot.writeI32(struct.GearBoxTypeArray.size());
          for (int _iter405 : struct.GearBoxTypeArray)
          {
            oprot.writeI32(_iter405);
          }
        }
      }
      if (struct.isSetExhaustLevelLowerArray()) {
        {
          oprot.writeI32(struct.ExhaustLevelLowerArray.size());
          for (double _iter406 : struct.ExhaustLevelLowerArray)
          {
            oprot.writeDouble(_iter406);
          }
        }
      }
      if (struct.isSetExhaustLevelHighArray()) {
        {
          oprot.writeI32(struct.ExhaustLevelHighArray.size());
          for (double _iter407 : struct.ExhaustLevelHighArray)
          {
            oprot.writeDouble(_iter407);
          }
        }
      }
      if (struct.isSetExhaustLevelArray()) {
        {
          oprot.writeI32(struct.ExhaustLevelArray.size());
          for (int _iter408 : struct.ExhaustLevelArray)
          {
            oprot.writeI32(_iter408);
          }
        }
      }
      if (struct.isSetCountryArray()) {
        {
          oprot.writeI32(struct.CountryArray.size());
          for (int _iter409 : struct.CountryArray)
          {
            oprot.writeI32(_iter409);
          }
        }
      }
      if (struct.isSetBrandAttrArray()) {
        {
          oprot.writeI32(struct.BrandAttrArray.size());
          for (int _iter410 : struct.BrandAttrArray)
          {
            oprot.writeI32(_iter410);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchCondition struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(86);
      if (incoming.get(0)) {
        struct.CommonFlag = iprot.readI32();
        struct.setCommonFlagIsSet(true);
      }
      if (incoming.get(1)) {
        struct.RequestSource = iprot.readI32();
        struct.setRequestSourceIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list411 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ReturnFieldArray = new ArrayList<String>(_list411.size);
          String _elem412;
          for (int _i413 = 0; _i413 < _list411.size; ++_i413)
          {
            _elem412 = iprot.readString();
            struct.ReturnFieldArray.add(_elem412);
          }
        }
        struct.setReturnFieldArrayIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list414 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.OrderByFieldArray = new ArrayList<String>(_list414.size);
          String _elem415;
          for (int _i416 = 0; _i416 < _list414.size; ++_i416)
          {
            _elem415 = iprot.readString();
            struct.OrderByFieldArray.add(_elem415);
          }
        }
        struct.setOrderByFieldArrayIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list417 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.OrderByIsDESCArray = new ArrayList<Boolean>(_list417.size);
          boolean _elem418;
          for (int _i419 = 0; _i419 < _list417.size; ++_i419)
          {
            _elem418 = iprot.readBool();
            struct.OrderByIsDESCArray.add(_elem418);
          }
        }
        struct.setOrderByIsDESCArrayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.SortBoostFlag = iprot.readI32();
        struct.setSortBoostFlagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.PageSize = iprot.readI32();
        struct.setPageSizeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.PageIndex = iprot.readI32();
        struct.setPageIndexIsSet(true);
      }
      if (incoming.get(8)) {
        struct.DistanceKm = iprot.readDouble();
        struct.setDistanceKmIsSet(true);
      }
      if (incoming.get(9)) {
        struct.Location = iprot.readString();
        struct.setLocationIsSet(true);
      }
      if (incoming.get(10)) {
        struct.IsCountSearch = iprot.readBool();
        struct.setIsCountSearchIsSet(true);
      }
      if (incoming.get(11)) {
        struct.RequestParametersLog = iprot.readString();
        struct.setRequestParametersLogIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list420 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.AggrFieldList = new ArrayList<AggrCondition>(_list420.size);
          AggrCondition _elem421;
          for (int _i422 = 0; _i422 < _list420.size; ++_i422)
          {
            _elem421 = new AggrCondition();
            _elem421.read(iprot);
            struct.AggrFieldList.add(_elem421);
          }
        }
        struct.setAggrFieldListIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list423 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.UcarIdArray = new ArrayList<Integer>(_list423.size);
          int _elem424;
          for (int _i425 = 0; _i425 < _list423.size; ++_i425)
          {
            _elem424 = iprot.readI32();
            struct.UcarIdArray.add(_elem424);
          }
        }
        struct.setUcarIdArrayIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list426 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.SiteId = new ArrayList<Integer>(_list426.size);
          int _elem427;
          for (int _i428 = 0; _i428 < _list426.size; ++_i428)
          {
            _elem427 = iprot.readI32();
            struct.SiteId.add(_elem427);
          }
        }
        struct.setSiteIdIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list429 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.UcarStatusArray = new ArrayList<Integer>(_list429.size);
          int _elem430;
          for (int _i431 = 0; _i431 < _list429.size; ++_i431)
          {
            _elem430 = iprot.readI32();
            struct.UcarStatusArray.add(_elem430);
          }
        }
        struct.setUcarStatusArrayIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TList _list432 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.NoUcarIdArray = new ArrayList<Integer>(_list432.size);
          int _elem433;
          for (int _i434 = 0; _i434 < _list432.size; ++_i434)
          {
            _elem433 = iprot.readI32();
            struct.NoUcarIdArray.add(_elem433);
          }
        }
        struct.setNoUcarIdArrayIsSet(true);
      }
      if (incoming.get(17)) {
        struct.IsAuthenticated = iprot.readI32();
        struct.setIsAuthenticatedIsSet(true);
      }
      if (incoming.get(18)) {
        struct.Source = iprot.readI32();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list435 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.UserIdArray = new ArrayList<Integer>(_list435.size);
          int _elem436;
          for (int _i437 = 0; _i437 < _list435.size; ++_i437)
          {
            _elem436 = iprot.readI32();
            struct.UserIdArray.add(_elem436);
          }
        }
        struct.setUserIdArrayIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list438 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.NoUserIdArray = new ArrayList<Integer>(_list438.size);
          int _elem439;
          for (int _i440 = 0; _i440 < _list438.size; ++_i440)
          {
            _elem439 = iprot.readI32();
            struct.NoUserIdArray.add(_elem439);
          }
        }
        struct.setNoUserIdArrayIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list441 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.UcarSerialNumberArray = new ArrayList<String>(_list441.size);
          String _elem442;
          for (int _i443 = 0; _i443 < _list441.size; ++_i443)
          {
            _elem442 = iprot.readString();
            struct.UcarSerialNumberArray.add(_elem442);
          }
        }
        struct.setUcarSerialNumberArrayIsSet(true);
      }
      if (incoming.get(22)) {
        struct.KeyWord = iprot.readString();
        struct.setKeyWordIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TList _list444 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.ColorArray = new ArrayList<String>(_list444.size);
          String _elem445;
          for (int _i446 = 0; _i446 < _list444.size; ++_i446)
          {
            _elem445 = iprot.readString();
            struct.ColorArray.add(_elem445);
          }
        }
        struct.setColorArrayIsSet(true);
      }
      if (incoming.get(24)) {
        struct.CarSource1L = iprot.readI32();
        struct.setCarSource1LIsSet(true);
      }
      if (incoming.get(25)) {
        struct.PictureCount = iprot.readI32();
        struct.setPictureCountIsSet(true);
      }
      if (incoming.get(26)) {
        {
          org.apache.thrift.protocol.TList _list447 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.BigAreaIdArray = new ArrayList<Integer>(_list447.size);
          int _elem448;
          for (int _i449 = 0; _i449 < _list447.size; ++_i449)
          {
            _elem448 = iprot.readI32();
            struct.BigAreaIdArray.add(_elem448);
          }
        }
        struct.setBigAreaIdArrayIsSet(true);
      }
      if (incoming.get(27)) {
        {
          org.apache.thrift.protocol.TList _list450 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.ProvinceIdArray = new ArrayList<Integer>(_list450.size);
          int _elem451;
          for (int _i452 = 0; _i452 < _list450.size; ++_i452)
          {
            _elem451 = iprot.readI32();
            struct.ProvinceIdArray.add(_elem451);
          }
        }
        struct.setProvinceIdArrayIsSet(true);
      }
      if (incoming.get(28)) {
        {
          org.apache.thrift.protocol.TList _list453 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CityIdArray = new ArrayList<Integer>(_list453.size);
          int _elem454;
          for (int _i455 = 0; _i455 < _list453.size; ++_i455)
          {
            _elem454 = iprot.readI32();
            struct.CityIdArray.add(_elem454);
          }
        }
        struct.setCityIdArrayIsSet(true);
      }
      if (incoming.get(29)) {
        {
          org.apache.thrift.protocol.TList _list456 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.NoCityIdArray = new ArrayList<Integer>(_list456.size);
          int _elem457;
          for (int _i458 = 0; _i458 < _list456.size; ++_i458)
          {
            _elem457 = iprot.readI32();
            struct.NoCityIdArray.add(_elem457);
          }
        }
        struct.setNoCityIdArrayIsSet(true);
      }
      if (incoming.get(30)) {
        {
          org.apache.thrift.protocol.TList _list459 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.RelateCityArray = new ArrayList<Integer>(_list459.size);
          int _elem460;
          for (int _i461 = 0; _i461 < _list459.size; ++_i461)
          {
            _elem460 = iprot.readI32();
            struct.RelateCityArray.add(_elem460);
          }
        }
        struct.setRelateCityArrayIsSet(true);
      }
      if (incoming.get(31)) {
        {
          org.apache.thrift.protocol.TList _list462 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.PriceLowerArray = new ArrayList<Double>(_list462.size);
          double _elem463;
          for (int _i464 = 0; _i464 < _list462.size; ++_i464)
          {
            _elem463 = iprot.readDouble();
            struct.PriceLowerArray.add(_elem463);
          }
        }
        struct.setPriceLowerArrayIsSet(true);
      }
      if (incoming.get(32)) {
        {
          org.apache.thrift.protocol.TList _list465 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.PriceHighArray = new ArrayList<Double>(_list465.size);
          double _elem466;
          for (int _i467 = 0; _i467 < _list465.size; ++_i467)
          {
            _elem466 = iprot.readDouble();
            struct.PriceHighArray.add(_elem466);
          }
        }
        struct.setPriceHighArrayIsSet(true);
      }
      if (incoming.get(33)) {
        {
          org.apache.thrift.protocol.TList _list468 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.CPriceLowerArray = new ArrayList<Double>(_list468.size);
          double _elem469;
          for (int _i470 = 0; _i470 < _list468.size; ++_i470)
          {
            _elem469 = iprot.readDouble();
            struct.CPriceLowerArray.add(_elem469);
          }
        }
        struct.setCPriceLowerArrayIsSet(true);
      }
      if (incoming.get(34)) {
        {
          org.apache.thrift.protocol.TList _list471 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.CPriceHighArray = new ArrayList<Double>(_list471.size);
          double _elem472;
          for (int _i473 = 0; _i473 < _list471.size; ++_i473)
          {
            _elem472 = iprot.readDouble();
            struct.CPriceHighArray.add(_elem472);
          }
        }
        struct.setCPriceHighArrayIsSet(true);
      }
      if (incoming.get(35)) {
        {
          org.apache.thrift.protocol.TList _list474 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.B2BPriceLowerArray = new ArrayList<Double>(_list474.size);
          double _elem475;
          for (int _i476 = 0; _i476 < _list474.size; ++_i476)
          {
            _elem475 = iprot.readDouble();
            struct.B2BPriceLowerArray.add(_elem475);
          }
        }
        struct.setB2BPriceLowerArrayIsSet(true);
      }
      if (incoming.get(36)) {
        {
          org.apache.thrift.protocol.TList _list477 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.B2BPriceHighArray = new ArrayList<Double>(_list477.size);
          double _elem478;
          for (int _i479 = 0; _i479 < _list477.size; ++_i479)
          {
            _elem478 = iprot.readDouble();
            struct.B2BPriceHighArray.add(_elem478);
          }
        }
        struct.setB2BPriceHighArrayIsSet(true);
      }
      if (incoming.get(37)) {
        {
          org.apache.thrift.protocol.TList _list480 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarAgeLowerArray = new ArrayList<Integer>(_list480.size);
          int _elem481;
          for (int _i482 = 0; _i482 < _list480.size; ++_i482)
          {
            _elem481 = iprot.readI32();
            struct.CarAgeLowerArray.add(_elem481);
          }
        }
        struct.setCarAgeLowerArrayIsSet(true);
      }
      if (incoming.get(38)) {
        {
          org.apache.thrift.protocol.TList _list483 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarAgeHighArray = new ArrayList<Integer>(_list483.size);
          int _elem484;
          for (int _i485 = 0; _i485 < _list483.size; ++_i485)
          {
            _elem484 = iprot.readI32();
            struct.CarAgeHighArray.add(_elem484);
          }
        }
        struct.setCarAgeHighArrayIsSet(true);
      }
      if (incoming.get(39)) {
        {
          org.apache.thrift.protocol.TList _list486 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.DrivingMileageLowerArray = new ArrayList<Integer>(_list486.size);
          int _elem487;
          for (int _i488 = 0; _i488 < _list486.size; ++_i488)
          {
            _elem487 = iprot.readI32();
            struct.DrivingMileageLowerArray.add(_elem487);
          }
        }
        struct.setDrivingMileageLowerArrayIsSet(true);
      }
      if (incoming.get(40)) {
        {
          org.apache.thrift.protocol.TList _list489 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.DrivingMileageHighArray = new ArrayList<Integer>(_list489.size);
          int _elem490;
          for (int _i491 = 0; _i491 < _list489.size; ++_i491)
          {
            _elem490 = iprot.readI32();
            struct.DrivingMileageHighArray.add(_elem490);
          }
        }
        struct.setDrivingMileageHighArrayIsSet(true);
      }
      if (incoming.get(41)) {
        struct.SuperiorId = iprot.readI32();
        struct.setSuperiorIdIsSet(true);
      }
      if (incoming.get(42)) {
        struct.UserType = iprot.readI32();
        struct.setUserTypeIsSet(true);
      }
      if (incoming.get(43)) {
        struct.IsNeglect = iprot.readI32();
        struct.setIsNeglectIsSet(true);
      }
      if (incoming.get(44)) {
        struct.IsVideo = iprot.readI32();
        struct.setIsVideoIsSet(true);
      }
      if (incoming.get(45)) {
        struct.IsFirstPicTrue = iprot.readI32();
        struct.setIsFirstPicTrueIsSet(true);
      }
      if (incoming.get(46)) {
        struct.IsDealerRecommend = iprot.readI32();
        struct.setIsDealerRecommendIsSet(true);
      }
      if (incoming.get(47)) {
        {
          org.apache.thrift.protocol.TList _list492 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarSourceTypeArray = new ArrayList<Integer>(_list492.size);
          int _elem493;
          for (int _i494 = 0; _i494 < _list492.size; ++_i494)
          {
            _elem493 = iprot.readI32();
            struct.CarSourceTypeArray.add(_elem493);
          }
        }
        struct.setCarSourceTypeArrayIsSet(true);
      }
      if (incoming.get(48)) {
        {
          org.apache.thrift.protocol.TList _list495 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarTypeConfig = new ArrayList<Integer>(_list495.size);
          int _elem496;
          for (int _i497 = 0; _i497 < _list495.size; ++_i497)
          {
            _elem496 = iprot.readI32();
            struct.CarTypeConfig.add(_elem496);
          }
        }
        struct.setCarTypeConfigIsSet(true);
      }
      if (incoming.get(49)) {
        struct.IsRecommendGL = iprot.readI32();
        struct.setIsRecommendGLIsSet(true);
      }
      if (incoming.get(50)) {
        struct.IsWarranty = iprot.readI32();
        struct.setIsWarrantyIsSet(true);
      }
      if (incoming.get(51)) {
        {
          org.apache.thrift.protocol.TList _list498 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.WarrantyTypeArray = new ArrayList<Integer>(_list498.size);
          int _elem499;
          for (int _i500 = 0; _i500 < _list498.size; ++_i500)
          {
            _elem499 = iprot.readI32();
            struct.WarrantyTypeArray.add(_elem499);
          }
        }
        struct.setWarrantyTypeArrayIsSet(true);
      }
      if (incoming.get(52)) {
        struct.IsTop = iprot.readI32();
        struct.setIsTopIsSet(true);
      }
      if (incoming.get(53)) {
        struct.IsActivity = iprot.readI32();
        struct.setIsActivityIsSet(true);
      }
      if (incoming.get(54)) {
        struct.IsBangmai = iprot.readI32();
        struct.setIsBangmaiIsSet(true);
      }
      if (incoming.get(55)) {
        struct.IsBangmaiche = iprot.readI32();
        struct.setIsBangmaicheIsSet(true);
      }
      if (incoming.get(56)) {
        struct.IsShowMr = iprot.readI32();
        struct.setIsShowMrIsSet(true);
      }
      if (incoming.get(57)) {
        struct.IsCarId = iprot.readI32();
        struct.setIsCarIdIsSet(true);
      }
      if (incoming.get(58)) {
        struct.IsB2B = iprot.readI32();
        struct.setIsB2BIsSet(true);
      }
      if (incoming.get(59)) {
        {
          org.apache.thrift.protocol.TList _list501 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CrmCustomerIdArray = new ArrayList<Integer>(_list501.size);
          int _elem502;
          for (int _i503 = 0; _i503 < _list501.size; ++_i503)
          {
            _elem502 = iprot.readI32();
            struct.CrmCustomerIdArray.add(_elem502);
          }
        }
        struct.setCrmCustomerIdArrayIsSet(true);
      }
      if (incoming.get(60)) {
        struct.IsCheckReportJson = iprot.readI32();
        struct.setIsCheckReportJsonIsSet(true);
      }
      if (incoming.get(61)) {
        {
          org.apache.thrift.protocol.TList _list504 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.EnvirStandardArray = new ArrayList<Integer>(_list504.size);
          int _elem505;
          for (int _i506 = 0; _i506 < _list504.size; ++_i506)
          {
            _elem505 = iprot.readI32();
            struct.EnvirStandardArray.add(_elem505);
          }
        }
        struct.setEnvirStandardArrayIsSet(true);
      }
      if (incoming.get(62)) {
        {
          org.apache.thrift.protocol.TList _list507 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.ConsumptionLowerArray = new ArrayList<Double>(_list507.size);
          double _elem508;
          for (int _i509 = 0; _i509 < _list507.size; ++_i509)
          {
            _elem508 = iprot.readDouble();
            struct.ConsumptionLowerArray.add(_elem508);
          }
        }
        struct.setConsumptionLowerArrayIsSet(true);
      }
      if (incoming.get(63)) {
        {
          org.apache.thrift.protocol.TList _list510 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.ConsumptionHighArray = new ArrayList<Double>(_list510.size);
          double _elem511;
          for (int _i512 = 0; _i512 < _list510.size; ++_i512)
          {
            _elem511 = iprot.readDouble();
            struct.ConsumptionHighArray.add(_elem511);
          }
        }
        struct.setConsumptionHighArrayIsSet(true);
      }
      if (incoming.get(64)) {
        {
          org.apache.thrift.protocol.TList _list513 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.OilTypeArray = new ArrayList<Integer>(_list513.size);
          int _elem514;
          for (int _i515 = 0; _i515 < _list513.size; ++_i515)
          {
            _elem514 = iprot.readI32();
            struct.OilTypeArray.add(_elem514);
          }
        }
        struct.setOilTypeArrayIsSet(true);
      }
      if (incoming.get(65)) {
        {
          org.apache.thrift.protocol.TList _list516 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.EngineLocationArray = new ArrayList<Integer>(_list516.size);
          int _elem517;
          for (int _i518 = 0; _i518 < _list516.size; ++_i518)
          {
            _elem517 = iprot.readI32();
            struct.EngineLocationArray.add(_elem517);
          }
        }
        struct.setEngineLocationArrayIsSet(true);
      }
      if (incoming.get(66)) {
        {
          org.apache.thrift.protocol.TList _list519 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.BodyDoorsLowerArray = new ArrayList<Integer>(_list519.size);
          int _elem520;
          for (int _i521 = 0; _i521 < _list519.size; ++_i521)
          {
            _elem520 = iprot.readI32();
            struct.BodyDoorsLowerArray.add(_elem520);
          }
        }
        struct.setBodyDoorsLowerArrayIsSet(true);
      }
      if (incoming.get(67)) {
        {
          org.apache.thrift.protocol.TList _list522 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.BodyDoorsHighArray = new ArrayList<Integer>(_list522.size);
          int _elem523;
          for (int _i524 = 0; _i524 < _list522.size; ++_i524)
          {
            _elem523 = iprot.readI32();
            struct.BodyDoorsHighArray.add(_elem523);
          }
        }
        struct.setBodyDoorsHighArrayIsSet(true);
      }
      if (incoming.get(68)) {
        {
          org.apache.thrift.protocol.TList _list525 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.SeatNumLowerArray = new ArrayList<Integer>(_list525.size);
          int _elem526;
          for (int _i527 = 0; _i527 < _list525.size; ++_i527)
          {
            _elem526 = iprot.readI32();
            struct.SeatNumLowerArray.add(_elem526);
          }
        }
        struct.setSeatNumLowerArrayIsSet(true);
      }
      if (incoming.get(69)) {
        {
          org.apache.thrift.protocol.TList _list528 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.SeatNumHighArray = new ArrayList<Integer>(_list528.size);
          int _elem529;
          for (int _i530 = 0; _i530 < _list528.size; ++_i530)
          {
            _elem529 = iprot.readI32();
            struct.SeatNumHighArray.add(_elem529);
          }
        }
        struct.setSeatNumHighArrayIsSet(true);
      }
      if (incoming.get(70)) {
        struct.IsWagon = iprot.readI32();
        struct.setIsWagonIsSet(true);
      }
      if (incoming.get(71)) {
        {
          org.apache.thrift.protocol.TList _list531 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.DriveTypeArray = new ArrayList<Integer>(_list531.size);
          int _elem532;
          for (int _i533 = 0; _i533 < _list531.size; ++_i533)
          {
            _elem532 = iprot.readI32();
            struct.DriveTypeArray.add(_elem532);
          }
        }
        struct.setDriveTypeArrayIsSet(true);
      }
      if (incoming.get(72)) {
        {
          org.apache.thrift.protocol.TList _list534 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CsBodyFormArray = new ArrayList<Integer>(_list534.size);
          int _elem535;
          for (int _i536 = 0; _i536 < _list534.size; ++_i536)
          {
            _elem535 = iprot.readI32();
            struct.CsBodyFormArray.add(_elem535);
          }
        }
        struct.setCsBodyFormArrayIsSet(true);
      }
      if (incoming.get(73)) {
        {
          org.apache.thrift.protocol.TList _list537 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarLevelArray = new ArrayList<Integer>(_list537.size);
          int _elem538;
          for (int _i539 = 0; _i539 < _list537.size; ++_i539)
          {
            _elem538 = iprot.readI32();
            struct.CarLevelArray.add(_elem538);
          }
        }
        struct.setCarLevelArrayIsSet(true);
      }
      if (incoming.get(74)) {
        {
          org.apache.thrift.protocol.TList _list540 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarLevelSecondArray = new ArrayList<Integer>(_list540.size);
          int _elem541;
          for (int _i542 = 0; _i542 < _list540.size; ++_i542)
          {
            _elem541 = iprot.readI32();
            struct.CarLevelSecondArray.add(_elem541);
          }
        }
        struct.setCarLevelSecondArrayIsSet(true);
      }
      if (incoming.get(75)) {
        {
          org.apache.thrift.protocol.TList _list543 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.CarYearArray = new ArrayList<String>(_list543.size);
          String _elem544;
          for (int _i545 = 0; _i545 < _list543.size; ++_i545)
          {
            _elem544 = iprot.readString();
            struct.CarYearArray.add(_elem544);
          }
        }
        struct.setCarYearArrayIsSet(true);
      }
      if (incoming.get(76)) {
        {
          org.apache.thrift.protocol.TList _list546 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.MainBrandArray = new ArrayList<Integer>(_list546.size);
          int _elem547;
          for (int _i548 = 0; _i548 < _list546.size; ++_i548)
          {
            _elem547 = iprot.readI32();
            struct.MainBrandArray.add(_elem547);
          }
        }
        struct.setMainBrandArrayIsSet(true);
      }
      if (incoming.get(77)) {
        {
          org.apache.thrift.protocol.TList _list549 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.BrandArray = new ArrayList<Integer>(_list549.size);
          int _elem550;
          for (int _i551 = 0; _i551 < _list549.size; ++_i551)
          {
            _elem550 = iprot.readI32();
            struct.BrandArray.add(_elem550);
          }
        }
        struct.setBrandArrayIsSet(true);
      }
      if (incoming.get(78)) {
        {
          org.apache.thrift.protocol.TList _list552 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarSerialArray = new ArrayList<Integer>(_list552.size);
          int _elem553;
          for (int _i554 = 0; _i554 < _list552.size; ++_i554)
          {
            _elem553 = iprot.readI32();
            struct.CarSerialArray.add(_elem553);
          }
        }
        struct.setCarSerialArrayIsSet(true);
      }
      if (incoming.get(79)) {
        {
          org.apache.thrift.protocol.TList _list555 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CarIDArray = new ArrayList<Integer>(_list555.size);
          int _elem556;
          for (int _i557 = 0; _i557 < _list555.size; ++_i557)
          {
            _elem556 = iprot.readI32();
            struct.CarIDArray.add(_elem556);
          }
        }
        struct.setCarIDArrayIsSet(true);
      }
      if (incoming.get(80)) {
        {
          org.apache.thrift.protocol.TList _list558 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.GearBoxTypeArray = new ArrayList<Integer>(_list558.size);
          int _elem559;
          for (int _i560 = 0; _i560 < _list558.size; ++_i560)
          {
            _elem559 = iprot.readI32();
            struct.GearBoxTypeArray.add(_elem559);
          }
        }
        struct.setGearBoxTypeArrayIsSet(true);
      }
      if (incoming.get(81)) {
        {
          org.apache.thrift.protocol.TList _list561 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.ExhaustLevelLowerArray = new ArrayList<Double>(_list561.size);
          double _elem562;
          for (int _i563 = 0; _i563 < _list561.size; ++_i563)
          {
            _elem562 = iprot.readDouble();
            struct.ExhaustLevelLowerArray.add(_elem562);
          }
        }
        struct.setExhaustLevelLowerArrayIsSet(true);
      }
      if (incoming.get(82)) {
        {
          org.apache.thrift.protocol.TList _list564 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.ExhaustLevelHighArray = new ArrayList<Double>(_list564.size);
          double _elem565;
          for (int _i566 = 0; _i566 < _list564.size; ++_i566)
          {
            _elem565 = iprot.readDouble();
            struct.ExhaustLevelHighArray.add(_elem565);
          }
        }
        struct.setExhaustLevelHighArrayIsSet(true);
      }
      if (incoming.get(83)) {
        {
          org.apache.thrift.protocol.TList _list567 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.ExhaustLevelArray = new ArrayList<Integer>(_list567.size);
          int _elem568;
          for (int _i569 = 0; _i569 < _list567.size; ++_i569)
          {
            _elem568 = iprot.readI32();
            struct.ExhaustLevelArray.add(_elem568);
          }
        }
        struct.setExhaustLevelArrayIsSet(true);
      }
      if (incoming.get(84)) {
        {
          org.apache.thrift.protocol.TList _list570 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.CountryArray = new ArrayList<Integer>(_list570.size);
          int _elem571;
          for (int _i572 = 0; _i572 < _list570.size; ++_i572)
          {
            _elem571 = iprot.readI32();
            struct.CountryArray.add(_elem571);
          }
        }
        struct.setCountryArrayIsSet(true);
      }
      if (incoming.get(85)) {
        {
          org.apache.thrift.protocol.TList _list573 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.BrandAttrArray = new ArrayList<Integer>(_list573.size);
          int _elem574;
          for (int _i575 = 0; _i575 < _list573.size; ++_i575)
          {
            _elem574 = iprot.readI32();
            struct.BrandAttrArray.add(_elem574);
          }
        }
        struct.setBrandAttrArrayIsSet(true);
      }
    }
  }

}

